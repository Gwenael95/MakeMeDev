[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "MakeMeDev/.external-ecmascript.js",
    "static": true,
    "longname": "MakeMeDev/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "MakeMeDev/.external-ecmascript.js",
    "static": true,
    "longname": "MakeMeDev/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "MakeMeDev/.external-ecmascript.js",
    "static": true,
    "longname": "MakeMeDev/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "MakeMeDev/.external-ecmascript.js",
    "static": true,
    "longname": "MakeMeDev/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "MakeMeDev/.external-ecmascript.js",
    "static": true,
    "longname": "MakeMeDev/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "MakeMeDev/.external-ecmascript.js",
    "static": true,
    "longname": "MakeMeDev/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "MakeMeDev/.external-ecmascript.js",
    "static": true,
    "longname": "MakeMeDev/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "MakeMeDev/.external-ecmascript.js",
    "static": true,
    "longname": "MakeMeDev/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "MakeMeDev/.external-ecmascript.js",
    "static": true,
    "longname": "MakeMeDev/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "MakeMeDev/.external-ecmascript.js",
    "static": true,
    "longname": "MakeMeDev/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "MakeMeDev/.external-ecmascript.js",
    "static": true,
    "longname": "MakeMeDev/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "MakeMeDev/.external-ecmascript.js",
    "static": true,
    "longname": "MakeMeDev/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "MakeMeDev/.external-ecmascript.js",
    "static": true,
    "longname": "MakeMeDev/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "MakeMeDev/.external-ecmascript.js",
    "static": true,
    "longname": "MakeMeDev/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "MakeMeDev/.external-ecmascript.js",
    "static": true,
    "longname": "MakeMeDev/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "MakeMeDev/.external-ecmascript.js",
    "static": true,
    "longname": "MakeMeDev/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "MakeMeDev/.external-ecmascript.js",
    "static": true,
    "longname": "MakeMeDev/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "MakeMeDev/.external-ecmascript.js",
    "static": true,
    "longname": "MakeMeDev/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "MakeMeDev/.external-ecmascript.js",
    "static": true,
    "longname": "MakeMeDev/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "MakeMeDev/.external-ecmascript.js",
    "static": true,
    "longname": "MakeMeDev/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "MakeMeDev/.external-ecmascript.js",
    "static": true,
    "longname": "MakeMeDev/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "MakeMeDev/.external-ecmascript.js",
    "static": true,
    "longname": "MakeMeDev/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "MakeMeDev/.external-ecmascript.js",
    "static": true,
    "longname": "MakeMeDev/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "MakeMeDev/.external-ecmascript.js",
    "static": true,
    "longname": "MakeMeDev/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "MakeMeDev/.external-ecmascript.js",
    "static": true,
    "longname": "MakeMeDev/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "MakeMeDev/.external-ecmascript.js",
    "static": true,
    "longname": "MakeMeDev/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "MakeMeDev/.external-ecmascript.js",
    "static": true,
    "longname": "MakeMeDev/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "MakeMeDev/.external-ecmascript.js",
    "static": true,
    "longname": "MakeMeDev/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "MakeMeDev/.external-ecmascript.js",
    "static": true,
    "longname": "MakeMeDev/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "MakeMeDev/.external-ecmascript.js",
    "static": true,
    "longname": "MakeMeDev/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "MakeMeDev/.external-ecmascript.js",
    "static": true,
    "longname": "MakeMeDev/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "MakeMeDev/.external-ecmascript.js",
    "static": true,
    "longname": "MakeMeDev/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "MakeMeDev/.external-ecmascript.js",
    "static": true,
    "longname": "MakeMeDev/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "MakeMeDev/.external-ecmascript.js",
    "static": true,
    "longname": "MakeMeDev/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "MakeMeDev/.external-ecmascript.js",
    "static": true,
    "longname": "MakeMeDev/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "MakeMeDev/.external-ecmascript.js",
    "static": true,
    "longname": "MakeMeDev/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "MakeMeDev/.external-ecmascript.js",
    "static": true,
    "longname": "MakeMeDev/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "MakeMeDev/.external-ecmascript.js",
    "static": true,
    "longname": "MakeMeDev/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "MakeMeDev/.external-ecmascript.js",
    "static": true,
    "longname": "MakeMeDev/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "MakeMeDev/.external-ecmascript.js",
    "static": true,
    "longname": "MakeMeDev/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "MakeMeDev/.external-ecmascript.js",
    "static": true,
    "longname": "MakeMeDev/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "MakeMeDev/.external-ecmascript.js",
    "static": true,
    "longname": "MakeMeDev/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "MakeMeDev/.external-ecmascript.js",
    "static": true,
    "longname": "MakeMeDev/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "MakeMeDev/.external-ecmascript.js",
    "static": true,
    "longname": "MakeMeDev/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "MakeMeDev/.external-ecmascript.js",
    "static": true,
    "longname": "MakeMeDev/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "MakeMeDev/.external-ecmascript.js",
    "static": true,
    "longname": "MakeMeDev/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "MakeMeDev/.external-ecmascript.js",
    "static": true,
    "longname": "MakeMeDev/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "MakeMeDev/Controllers/postController.js",
    "content": "/**\n * This Controller file requires {@link module:../Services/postService }  and\n * {@link module:../Tools/Controller/controllerHelper}.\n * @requires module:../Services/postService\n * @requires module:../Tools/Controller/controllerHelper\n */\nconst { create, get, updateVote, addPostResponse, addCommentary, updateFunction } = require(\"../Services/postService\");\nconst {emptyRequest} = require(\"../Tools/Controller/controllerHelper\");\n\n//region get\n/** @function\n * @name getPost\n * @async\n * Get a post from database if our query isn't empty.\n * @param {Object.<Request>} req - request received\n * @param {Object.<Response>} res - response to dispatched\n * @param {Function} next - get control to the next middleware function\n * @returns {Promise<*|boolean|void>}\n */\nexports.getPost = async (req, res, next)  => {\n    const response = emptyRequest(req.search) ? emptyRequest(req.search) : await get(req.search)\n    return res.status(response.code).send(response.body)\n};\n//endregion\n\n//region post\n/** @function\n * @name sendPost\n * Send a post to add in database if our post data isn't empty.\n * @param {Object.<Request>} req - request received\n * @param {Object.<Response>} res - response to dispatched\n * @param {Function} next - get control to the next middleware function\n * @returns {Promise<*|boolean|void>}\n */\nexports.sendPost = async (req, res, next) => {\n    const {post} = req.body;\n    const response = emptyRequest(post) ? emptyRequest(post) : await create(post, req.user)\n    return res.status(response.code).send(response.body)\n};\n//endregion\n\n//region patch\n/** @function\n * @name sendVote\n * Send a vote to like or dislike a post in DB.\n * @param {Object.<Request>} req - request received\n * @param {Object.<Response>} res - response to dispatched\n * @param {Function} next - get control to the next middleware function\n * @returns {Promise<*|boolean|void>}\n */\nexports.sendVote = async (req, res, next)  => {\n    const {vote, idPost} =  req.body\n    const response = emptyRequest(vote) ? emptyRequest(vote) : await updateVote(vote, idPost, req.user)\n    return res.status(response.code).send(response.body)\n};\n\n/** @function\n * @name addResponse\n * Send a response to add to a post in DB.\n * @param {Object.<Request>} req - request received\n * @param {Object.<Response>} res - response to dispatched\n * @param {Function} next - get control to the next middleware function\n * @returns {Promise<*|boolean|void>}\n */\nexports.addResponse = async (req, res, next)  => {\n    const {responsePost, idPost} =  req.body\n    const response = emptyRequest(responsePost) ? emptyRequest(responsePost) : await addPostResponse(responsePost, idPost, req.user)\n    return res.status(response.code).send(response.body)\n};\n\n/** @function\n * @name addCommentary\n * Send a comment to add to a post in DB.\n * @param {Object.<Request>} req - request received\n * @param {Object.<Response>} res - response to dispatched\n * @param {Function} next - get control to the next middleware function\n * @returns {Promise<*|boolean|void>}\n */\nexports.addCommentary = async (req, res, next)  => {\n    const {commentaryPost, idPost} =  req.body\n    const response = emptyRequest(commentaryPost) ? emptyRequest(commentaryPost) : await addCommentary(commentaryPost, idPost, req.user)\n    return res.status(response.code).send(response.body)\n};\n\n/** @function\n * @name updateFunction\n * Send a function to update it in a post in DB.\n * @param {Object.<Request>} req - request received\n * @param {Object.<Response>} res - response to dispatched\n * @param {Function} next - get control to the next middleware function\n * @returns {Promise<*|boolean|void>}\n */\nexports.updateFunction = async (req, res, next)  => {\n    const {functionPost, idPost} =  req.body\n    const response = emptyRequest(functionPost) ? emptyRequest(functionPost) : await updateFunction(functionPost, idPost, req.user)\n    return res.status(response.code).send(response.body)\n};\n//endregion\n\n\n\n",
    "static": true,
    "longname": "/Users/gwenael/Documents/cours/L2/decembre_projWeb_makeMeDev/MakeMeDev/Controllers/postController.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "variable",
    "name": "create",
    "memberof": "MakeMeDev/Controllers/postController.js",
    "static": true,
    "longname": "MakeMeDev/Controllers/postController.js~create",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Controllers/postController.js",
    "importStyle": null,
    "description": "This Controller file requires {@link module:../Services/postService }  and\n{@link module:../Tools/Controller/controllerHelper}.",
    "lineNumber": 7,
    "unknown": [
      {
        "tagName": "@requires",
        "tagValue": "module:../Services/postService"
      },
      {
        "tagName": "@requires",
        "tagValue": "module:../Tools/Controller/controllerHelper"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 50,
    "kind": "variable",
    "name": "emptyRequest",
    "memberof": "MakeMeDev/Controllers/postController.js",
    "static": true,
    "longname": "MakeMeDev/Controllers/postController.js~emptyRequest",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Controllers/postController.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 51,
    "kind": "file",
    "name": "MakeMeDev/Controllers/usersController.js",
    "content": "/**\n * This Controller file requires {@link module:../Services/usersService }  and\n * {@link module:../Tools/Controller/controllerHelper}.\n * @requires module:../Services/usersService\n * @requires module:../Tools/Controller/controllerHelper\n */\nconst {addUser, getUser, updateUser} = require(\"../Services/usersService\");\nconst {emptyRequest} = require(\"../Tools/Controller/controllerHelper\");\n\n//region post\n/** @function\n * @name signUp\n * Create a new account on our app, saved in mongoDb\n * @param {Object.<Request>} req - request received\n * @param {Object.<Response>} res - response to dispatched\n * @param {Function} next - get control to the next middleware function\n * @returns {Promise<*|boolean|void>}\n */\nexports.signUp = async (req, res, next) => {\n    const {user} = req.body;\n    const response = emptyRequest(user) ? emptyRequest(user) : await addUser(user)\n    return res.status(response.code).send(response.body)\n};\n\n/** @function\n * @name signIn\n * @param {Object.<Request>} req - request received\n * @param {Object.<Response>} res - response to dispatched\n * @param {Function} next - get control to the next middleware function\n * @returns {Promise<*|boolean|void>}\n */\nexports.signIn = async (req, res, next)  => {\n    const {user} = req.body;\n    const response = emptyRequest(user) ? emptyRequest(user) : await getUser(user)\n    return res.status(response.code).send(response.body)\n};\n//endregion\n\n\n//region patch\n/** @function\n * @name updateUser\n * @param {Object.<Request>} req - request received\n * @param {Object.<Response>} res - response to dispatched\n * @param {Function} next - get control to the next middleware function\n * @returns {Promise<*|boolean|void>}\n */\nexports.updateUser = async (req, res, next) => {\n    const {user} = req.body;\n    user.id = req.user._id\n    const response = emptyRequest(user) ? emptyRequest(user) : await updateUser(user)\n    return res.status(response.code).send(response.body)\n};\n\n//endregion\n\n",
    "static": true,
    "longname": "/Users/gwenael/Documents/cours/L2/decembre_projWeb_makeMeDev/MakeMeDev/Controllers/usersController.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 52,
    "kind": "variable",
    "name": "addUser",
    "memberof": "MakeMeDev/Controllers/usersController.js",
    "static": true,
    "longname": "MakeMeDev/Controllers/usersController.js~addUser",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Controllers/usersController.js",
    "importStyle": null,
    "description": "This Controller file requires {@link module:../Services/usersService }  and\n{@link module:../Tools/Controller/controllerHelper}.",
    "lineNumber": 7,
    "unknown": [
      {
        "tagName": "@requires",
        "tagValue": "module:../Services/usersService"
      },
      {
        "tagName": "@requires",
        "tagValue": "module:../Tools/Controller/controllerHelper"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 53,
    "kind": "variable",
    "name": "emptyRequest",
    "memberof": "MakeMeDev/Controllers/usersController.js",
    "static": true,
    "longname": "MakeMeDev/Controllers/usersController.js~emptyRequest",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Controllers/usersController.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 54,
    "kind": "file",
    "name": "MakeMeDev/DB/postRepository.js",
    "content": "/**\n * This file requires {@link module:../Models/postModel}, {@link module:../Tools/DB/postPipeline},\n * {@link module:../Tools/DB/postHelper}.\n * @requires module:../Models/postModel\"\n * @requires module:../Tools/DB/postPipeline\n * @requires module:../Tools/DB/postHelper\n */\nconst mongoose = require('mongoose');\nconst {postSchema} = require(\"../Models/postModel\");\nconst {getPipeline} = require(\"../Tools/DB/postPipeline\")\nconst {getLastResponseId, getLastCommentaryId} = require(\"../Tools/DB/postHelper\")\n\n/**\n * A mongoose post model\n * @type {Model<Document>}\n */\nconst PostModel = mongoose.model('posts', postSchema)\nconst ObjectId = mongoose.Types.ObjectId;\n\n\n//region get\n/** @function\n * @name getPostByFunction\n * Get post in database depending on many criteria, and return the result of this try\n * @param {object} searchedData - data to search in database\n * @returns {Promise<{success: {success: T}}|{error: Error.ValidationError | {[p: string]: ValidatorError | CastError} | number}>}\n */\nasync function getPostByFunction(searchedData) {\n    return await PostModel\n        .aggregate(getPipeline(searchedData))//.sort({\"post.totalLike\":1})\n        .exec()\n        .then(result => {return {success: result}})\n        .catch(err => {\n            return {error: err.errors}\n        });\n}\n\n/** @function\n * @name getPostById\n * Get post in database depending on post's Id, and return the result of this try\n * @param {object} postId - post's Id to search in database\n * @returns {Promise<{success: {success: T}}|{error: Error.ValidationError | {[p: string]: ValidatorError | CastError} | number}>}\n */\nasync function getPostById(postId) {\n    return await PostModel\n        .findOne({_id: ObjectId(postId)})\n        .exec()\n        .then(result => {return {success: result}})\n        .catch(err => {\n            return {error: err.errors}\n        });\n}\n//endregion\n\n//region post\n/** @function\n * @name addPost\n * Insert a new post in database, and return the result of this try\n * @param {object} postData - post to add, should correspond to postModels {@link '../Models/postModels'}.\n * @returns {Promise<{success: {success: T}}|{error: Error.ValidationError | {[p: string]: ValidatorError | CastError} | number}>}\n */\nasync function addPost(postData, user) {\n    const doc = new PostModel(postData);\n    return await doc.save().then(result => {\n        return {success: result}\n    }).catch(err => {\n        return {error: err.errors}\n    })\n}\n//endregion\n\n//region patch\n\n/** @function\n * @name updatePost\n * A generic function used to update a post.\n * @param {object} filter - object used by mongoDB to select corresponding documents in DB.\n * @param {object} update - object containing fields to set (ex: $set, or $push).\n * @param {string} id - a post's id\n * @returns {Promise<{commentaryId: (null|undefined), success: {commentaryId: (null|undefined), success: T, postId: *, responseId: *}, postId: *, responseId: *}|{error}>}\n */\nasync function updatePost(filter, update, id) {\n    return await PostModel\n        .findOneAndUpdate(\n            filter,\n            update,\n            {new: true, context: \"query\"})\n        .lean()\n        .exec()\n        .then((result ) => {\n            return {success: result, postId: id , responseId: getLastResponseId(result), commentaryId: getLastCommentaryId(result, id)}\n        })\n        .catch(err => {\n            return {error: err.errors}\n        });\n}\n\n/** @function\n * @name updatePostFunction\n * Update a post function.\n * @param {string} functionPost - the new function\n * @param {string} idPost - a post's id\n * @returns {Promise<{commentaryId: (null|undefined), success: {commentaryId: (null|undefined), success: T, postId: *, responseId: *}, postId: *, responseId: *}|{error}>}\n */\nasync function updatePostFunction(functionPost, idPost) {\n    return await updatePost({\"post._id\": ObjectId(idPost)}, {$set : {\"post.$.function\": functionPost}}, idPost)\n}\n\n/** @function\n * @name pushPostResponse\n * Add a post response.\n * @param {object} responsePost - a new response post to add in an array in DB\n * @param idPost - a post's id\n * @returns {Promise<{commentaryId: (null|undefined), success: {commentaryId: (null|undefined), success: T, postId: *, responseId: *}, postId: *, responseId: *}|{error}>}\n */\nasync function pushPostResponse(responsePost, idPost) {\n    return await updatePost({\"_id\": ObjectId(idPost)}, {$push : {post: responsePost}}, idPost)\n}\n\n/** @function\n * @name pushPostResponseCommentary\n * Add a post commentary.\n * @param {object} commentaryResponse -  a new commentary to add in an array in DB\n * @param idPost - a post's id\n * @returns {Promise<{commentaryId: (null|undefined), success: {commentaryId: (null|undefined), success: T, postId: *, responseId: *}, postId: *, responseId: *}|{error}>}\n */\nasync function pushPostResponseCommentary(commentaryResponse, idPost) {\n    return await updatePost({\"post._id\": ObjectId(idPost)}, {$push : {\"post.$.commentary\": commentaryResponse}}, idPost)\n}\n\n/** @function\n * @name updateLikeOrDislike\n * Add or update like/dislike for a post.\n * start by checking if user already vote for this post.\n * if not we increment the like/dislike counter.\n * else, if it changes is mind (want to change a like by a dislike), we decrement\n * the old vote and increase the new one.\n * @param {string} likeOrDislike - a string equals to 'like' or 'dislike'\n * @param {string} idPost - post's id\n * @param {object} user - user's data (needed to know his activities)\n * @returns {Promise<{error: string}|*>}\n */\nasync function updateLikeOrDislike(likeOrDislike, idPost, user) {\n    /**\n     * A string, opposite to the current vote\n     * @type {string}\n     */\n    let opposite = {like:\"dislike\", dislike:\"like\"}[likeOrDislike]\n    /**\n     * An object containing fields to set in DB\n     * @type {object}\n     */\n    let setPost\n\n    if (!(user.activities[likeOrDislike].includes(idPost) || user.activities[opposite].includes( idPost))) {\n        setPost = {$inc: {[\"post.$.\" + likeOrDislike]:1}}\n    }\n    else if(user.activities[opposite].includes( idPost)) {\n        setPost = {$inc: {[\"post.$.\" + likeOrDislike]:1, [\"post.$.\" + opposite]:-1}}\n    }\n    else{\n        return {error:\"cet utilisateur à déjà mis un \" + likeOrDislike}\n    }\n    return await updatePost({\"post._id\": ObjectId(idPost)}, setPost, idPost)\n}\n//endregion\n\n\nmodule.exports = {addPost, getPostByFunction, getPostById, updateLikeOrDislike,\n    pushPostResponse, pushPostResponseCommentary, updatePostFunction};\n",
    "static": true,
    "longname": "/Users/gwenael/Documents/cours/L2/decembre_projWeb_makeMeDev/MakeMeDev/DB/postRepository.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 55,
    "kind": "variable",
    "name": "mongoose",
    "memberof": "MakeMeDev/DB/postRepository.js",
    "static": true,
    "longname": "MakeMeDev/DB/postRepository.js~mongoose",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/DB/postRepository.js",
    "importStyle": null,
    "description": "This file requires {@link module:../Models/postModel}, {@link module:../Tools/DB/postPipeline},\n{@link module:../Tools/DB/postHelper}.",
    "lineNumber": 8,
    "unknown": [
      {
        "tagName": "@requires",
        "tagValue": "module:../Models/postModel\""
      },
      {
        "tagName": "@requires",
        "tagValue": "module:../Tools/DB/postPipeline"
      },
      {
        "tagName": "@requires",
        "tagValue": "module:../Tools/DB/postHelper"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 56,
    "kind": "variable",
    "name": "postSchema",
    "memberof": "MakeMeDev/DB/postRepository.js",
    "static": true,
    "longname": "MakeMeDev/DB/postRepository.js~postSchema",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/DB/postRepository.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 57,
    "kind": "variable",
    "name": "getPipeline",
    "memberof": "MakeMeDev/DB/postRepository.js",
    "static": true,
    "longname": "MakeMeDev/DB/postRepository.js~getPipeline",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/DB/postRepository.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 58,
    "kind": "variable",
    "name": "getLastResponseId",
    "memberof": "MakeMeDev/DB/postRepository.js",
    "static": true,
    "longname": "MakeMeDev/DB/postRepository.js~getLastResponseId",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/DB/postRepository.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 59,
    "kind": "variable",
    "name": "PostModel",
    "memberof": "MakeMeDev/DB/postRepository.js",
    "static": true,
    "longname": "MakeMeDev/DB/postRepository.js~PostModel",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/DB/postRepository.js",
    "importStyle": null,
    "description": "A mongoose post model",
    "lineNumber": 17,
    "type": {
      "nullable": null,
      "types": [
        "Model<Document>"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 60,
    "kind": "variable",
    "name": "ObjectId",
    "memberof": "MakeMeDev/DB/postRepository.js",
    "static": true,
    "longname": "MakeMeDev/DB/postRepository.js~ObjectId",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/DB/postRepository.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 61,
    "kind": "function",
    "name": "getPostByFunction",
    "memberof": "MakeMeDev/DB/postRepository.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "MakeMeDev/DB/postRepository.js~getPostByFunction",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/DB/postRepository.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 28,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Promise<{success: {success: T}}|{error: Error.ValidationError | {[p: string]: ValidatorError | CastError} | number}>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "searchedData",
        "description": "data to search in database"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<{success: {success: T}}",
        "{error: Error.ValidationError ",
        " {[p: string]: ValidatorError ",
        " CastError"
      ],
      "spread": false,
      "description": "| number}>}"
    },
    "ignore": true
  },
  {
    "__docId__": 62,
    "kind": "function",
    "name": "getPostById",
    "memberof": "MakeMeDev/DB/postRepository.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "MakeMeDev/DB/postRepository.js~getPostById",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/DB/postRepository.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 44,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Promise<{success: {success: T}}|{error: Error.ValidationError | {[p: string]: ValidatorError | CastError} | number}>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "postId",
        "description": "post's Id to search in database"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<{success: {success: T}}",
        "{error: Error.ValidationError ",
        " {[p: string]: ValidatorError ",
        " CastError"
      ],
      "spread": false,
      "description": "| number}>}"
    },
    "ignore": true
  },
  {
    "__docId__": 63,
    "kind": "function",
    "name": "addPost",
    "memberof": "MakeMeDev/DB/postRepository.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "MakeMeDev/DB/postRepository.js~addPost",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/DB/postRepository.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 62,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Promise<{success: {success: T}}|{error: Error.ValidationError | {[p: string]: ValidatorError | CastError} | number}>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "postData",
        "description": "post to add, should correspond to postModels {@link '../Models/postModels'}."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<{success: {success: T}}",
        "{error: Error.ValidationError ",
        " {[p: string]: ValidatorError ",
        " CastError"
      ],
      "spread": false,
      "description": "| number}>}"
    },
    "ignore": true
  },
  {
    "__docId__": 64,
    "kind": "function",
    "name": "updatePost",
    "memberof": "MakeMeDev/DB/postRepository.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "MakeMeDev/DB/postRepository.js~updatePost",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/DB/postRepository.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 82,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Promise<{commentaryId: (null|undefined), success: {commentaryId: (null|undefined), success: T, postId: *, responseId: *}, postId: *, responseId: *}|{error}>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "filter",
        "description": "object used by mongoDB to select corresponding documents in DB."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "update",
        "description": "object containing fields to set (ex: $set, or $push)."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "a post's id"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<{commentaryId: (null|undefined), success: {commentaryId: (null|undefined), success: T, postId: *, responseId: *}, postId: *, responseId: *}|{error}>"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 65,
    "kind": "function",
    "name": "updatePostFunction",
    "memberof": "MakeMeDev/DB/postRepository.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "MakeMeDev/DB/postRepository.js~updatePostFunction",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/DB/postRepository.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 105,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Promise<{commentaryId: (null|undefined), success: {commentaryId: (null|undefined), success: T, postId: *, responseId: *}, postId: *, responseId: *}|{error}>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "functionPost",
        "description": "the new function"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "idPost",
        "description": "a post's id"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<{commentaryId: (null|undefined), success: {commentaryId: (null|undefined), success: T, postId: *, responseId: *}, postId: *, responseId: *}|{error}>"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 66,
    "kind": "function",
    "name": "pushPostResponse",
    "memberof": "MakeMeDev/DB/postRepository.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "MakeMeDev/DB/postRepository.js~pushPostResponse",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/DB/postRepository.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 116,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Promise<{commentaryId: (null|undefined), success: {commentaryId: (null|undefined), success: T, postId: *, responseId: *}, postId: *, responseId: *}|{error}>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "responsePost",
        "description": "a new response post to add in an array in DB"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "idPost",
        "description": "a post's id"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<{commentaryId: (null|undefined), success: {commentaryId: (null|undefined), success: T, postId: *, responseId: *}, postId: *, responseId: *}|{error}>"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 67,
    "kind": "function",
    "name": "pushPostResponseCommentary",
    "memberof": "MakeMeDev/DB/postRepository.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "MakeMeDev/DB/postRepository.js~pushPostResponseCommentary",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/DB/postRepository.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 127,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Promise<{commentaryId: (null|undefined), success: {commentaryId: (null|undefined), success: T, postId: *, responseId: *}, postId: *, responseId: *}|{error}>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "commentaryResponse",
        "description": "a new commentary to add in an array in DB"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "idPost",
        "description": "a post's id"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<{commentaryId: (null|undefined), success: {commentaryId: (null|undefined), success: T, postId: *, responseId: *}, postId: *, responseId: *}|{error}>"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 68,
    "kind": "function",
    "name": "updateLikeOrDislike",
    "memberof": "MakeMeDev/DB/postRepository.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "MakeMeDev/DB/postRepository.js~updateLikeOrDislike",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/DB/postRepository.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 143,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Promise<{error: string}|*>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "likeOrDislike",
        "description": "a string equals to 'like' or 'dislike'"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "idPost",
        "description": "post's id"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "user",
        "description": "user's data (needed to know his activities)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<{error: string}|*>"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 69,
    "kind": "file",
    "name": "MakeMeDev/DB/userRepository.js",
    "content": "/**\n * This file requires {@link module:../Models/userModel}, {@link module:../Tools/DB/userHelper}.\n * @requires module:../Models/userModel\n * @requires module:../Tools/DB/userHelper\n */\nconst {userSchema} = require(\"../Models/userModel\");\nconst {filterPassword} = require(\"../Tools/DB/userHelper\");\nconst uniqueValidator = require('mongoose-unique-validator')\nconst mongoose = require('mongoose');\nconst ObjectId = mongoose.Types.ObjectId;\nconst {generate, verify} = require(\"password-hash\");\nconst UserModel = mongoose.model('users', userSchema)\n\n\n//region get\n/** @function\n * @name signIn\n * Check if user's data are in database and check if password is correct,\n * depending on login value, and return the result of this try.\n * Login could be mail or pseudo.\n * @param {object} userData - data to search in database\n * @returns {Promise<{success: *}|{error: Error.ValidationError | {[p: string]: ValidatorError | CastError} | number}>}\n */\nasync function signIn(userData) {\n    return await UserModel.findOne({  $or: [\n            { pseudo: userData.login  },\n            { mail: userData.login },\n        ]}, { \"__v\": 0} ).lean()\n        .exec()\n        .then(result => {\n            return result===null ? {error: \"login incorrect\"}\n                : verify(userData.password, result.password) ? {success: filterPassword(result)}\n                    : {error: \"mot de passe incorrect\"}\n        })\n        .catch(err => {return {error: err.errors}});\n}\n//endregion\n\n//region post\n/** @function\n * @name signUp\n * Add a new user in database, and return the result of this try\n * @param {object} userData - user to add, should correspond to userModel {@link '../Models/userModels'}.\n * @returns {Promise<{success: *}|{error: Error.ValidationError | {[p: string]: ValidatorError | CastError} | number}>}\n */\nasync function signUp(userData) {\n    userSchema.plugin(uniqueValidator)\n    const doc = new UserModel(userData);\n    doc.password = generate(userData.password)\n    return await doc.save()\n        .then(result => {return {success: filterPassword(result)}})\n        .catch(err => {return {error: err.errors}})\n}\n//endregion\n\n//region patch\n/** @function\n * @name updateUser\n * A generic function used to update a user.\n * @param {object} filter - object used by mongoDB to select corresponding documents in DB.\n * @param {object} update - object containing fields to set (ex: $set, or $push).\n * @returns {Promise<{success: Object}|{error}>}\n */\nasync function updateUser(filter, update) {\n    return await UserModel\n        .findOneAndUpdate(\n            filter,\n            update,\n            {new: true, runValidators: true, context: \"query\"})\n        .lean()\n        .exec()\n        .then((result) => {\n            return {success: filterPassword(result)}\n        })\n        .catch(err => {\n            return {error: err.errors}\n        });\n}\n\n/** @function\n * @name updateUserById\n * Update user's data depending on his ID and wanted fields to set\n * @param {object} data - user's data\n * @param {object} update - object containing fields to set (ex: $set, or $push).\n * @returns {Promise<{success: Object}|{error}>}\n */\nasync function updateUserById(data, update) {\n    try {\n        userSchema.plugin(uniqueValidator)\n        return await updateUser({_id: ObjectId(data.id)}, update)\n    }\n    catch (e) {\n        return {error : \"erreur lors de la mise à jour de l'utilisateur\"}\n    }\n}\n//endregion\n\n\nmodule.exports = {signUp, signIn, updateUserById};\n",
    "static": true,
    "longname": "/Users/gwenael/Documents/cours/L2/decembre_projWeb_makeMeDev/MakeMeDev/DB/userRepository.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 70,
    "kind": "variable",
    "name": "userSchema",
    "memberof": "MakeMeDev/DB/userRepository.js",
    "static": true,
    "longname": "MakeMeDev/DB/userRepository.js~userSchema",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/DB/userRepository.js",
    "importStyle": null,
    "description": "This file requires {@link module:../Models/userModel}, {@link module:../Tools/DB/userHelper}.",
    "lineNumber": 6,
    "unknown": [
      {
        "tagName": "@requires",
        "tagValue": "module:../Models/userModel"
      },
      {
        "tagName": "@requires",
        "tagValue": "module:../Tools/DB/userHelper"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 71,
    "kind": "variable",
    "name": "filterPassword",
    "memberof": "MakeMeDev/DB/userRepository.js",
    "static": true,
    "longname": "MakeMeDev/DB/userRepository.js~filterPassword",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/DB/userRepository.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 72,
    "kind": "variable",
    "name": "uniqueValidator",
    "memberof": "MakeMeDev/DB/userRepository.js",
    "static": true,
    "longname": "MakeMeDev/DB/userRepository.js~uniqueValidator",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/DB/userRepository.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 73,
    "kind": "variable",
    "name": "mongoose",
    "memberof": "MakeMeDev/DB/userRepository.js",
    "static": true,
    "longname": "MakeMeDev/DB/userRepository.js~mongoose",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/DB/userRepository.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 74,
    "kind": "variable",
    "name": "ObjectId",
    "memberof": "MakeMeDev/DB/userRepository.js",
    "static": true,
    "longname": "MakeMeDev/DB/userRepository.js~ObjectId",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/DB/userRepository.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 75,
    "kind": "variable",
    "name": "generate",
    "memberof": "MakeMeDev/DB/userRepository.js",
    "static": true,
    "longname": "MakeMeDev/DB/userRepository.js~generate",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/DB/userRepository.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 76,
    "kind": "variable",
    "name": "UserModel",
    "memberof": "MakeMeDev/DB/userRepository.js",
    "static": true,
    "longname": "MakeMeDev/DB/userRepository.js~UserModel",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/DB/userRepository.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 77,
    "kind": "function",
    "name": "signIn",
    "memberof": "MakeMeDev/DB/userRepository.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "MakeMeDev/DB/userRepository.js~signIn",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/DB/userRepository.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 24,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Promise<{success: *}|{error: Error.ValidationError | {[p: string]: ValidatorError | CastError} | number}>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "userData",
        "description": "data to search in database"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<{success: *}",
        "{error: Error.ValidationError ",
        " {[p: string]: ValidatorError ",
        " CastError"
      ],
      "spread": false,
      "description": "| number}>}"
    },
    "ignore": true
  },
  {
    "__docId__": 78,
    "kind": "function",
    "name": "signUp",
    "memberof": "MakeMeDev/DB/userRepository.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "MakeMeDev/DB/userRepository.js~signUp",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/DB/userRepository.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 46,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Promise<{success: *}|{error: Error.ValidationError | {[p: string]: ValidatorError | CastError} | number}>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "userData",
        "description": "user to add, should correspond to userModel {@link '../Models/userModels'}."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<{success: *}",
        "{error: Error.ValidationError ",
        " {[p: string]: ValidatorError ",
        " CastError"
      ],
      "spread": false,
      "description": "| number}>}"
    },
    "ignore": true
  },
  {
    "__docId__": 79,
    "kind": "function",
    "name": "updateUser",
    "memberof": "MakeMeDev/DB/userRepository.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "MakeMeDev/DB/userRepository.js~updateUser",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/DB/userRepository.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 64,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Promise<{success: Object}|{error}>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "filter",
        "description": "object used by mongoDB to select corresponding documents in DB."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "update",
        "description": "object containing fields to set (ex: $set, or $push)."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<{success: Object}|{error}>"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 80,
    "kind": "function",
    "name": "updateUserById",
    "memberof": "MakeMeDev/DB/userRepository.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "MakeMeDev/DB/userRepository.js~updateUserById",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/DB/userRepository.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 87,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Promise<{success: Object}|{error}>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "user's data"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "update",
        "description": "object containing fields to set (ex: $set, or $push)."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<{success: Object}|{error}>"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 81,
    "kind": "file",
    "name": "MakeMeDev/Middlewares/middleware.js",
    "content": "const jwt = require(\"jsonwebtoken\");\n\n/** @function\n * @name authenticateToken\n * Check User's token before authorized some community features, add user field in req.\n * @param {Object.<Request>} req - request received\n * @param {Object.<Response>} res - response to dispatched\n * @param {Function} next - get control to the next middleware function\n * @returns {*}\n */\nfunction authenticateToken(req, res, next) {\n    const authHeader = req.headers['authorization']\n    const token = authHeader && authHeader.split(' ')[1]\n    if (token == null) return res.sendStatus(401)\n    jwt.verify(token, process.env.TOKEN_SECRET, (err, user ) => {\n        if (err) return res.sendStatus(403)\n        req.user = user.success\n        next()\n    })\n}\n\n/** @function\n * @name handleGetPost\n * Allow to search post by id or with several criteria extracted from a string.\n * @param {Object.<Request>} req - request received\n * @param {Object.<Response>} res - response to dispatched\n * @param {Function} next - get control to the next middleware function\n */\nfunction handleGetPost(req, res, next) {\n    const {search, postId} =  req.query\n    req.search = {search:search, postId:postId}\n    next()\n}\n\n\nmodule.exports = {authenticateToken, handleGetPost}\n",
    "static": true,
    "longname": "/Users/gwenael/Documents/cours/L2/decembre_projWeb_makeMeDev/MakeMeDev/Middlewares/middleware.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 82,
    "kind": "variable",
    "name": "jwt",
    "memberof": "MakeMeDev/Middlewares/middleware.js",
    "static": true,
    "longname": "MakeMeDev/Middlewares/middleware.js~jwt",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Middlewares/middleware.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 83,
    "kind": "function",
    "name": "authenticateToken",
    "memberof": "MakeMeDev/Middlewares/middleware.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "MakeMeDev/Middlewares/middleware.js~authenticateToken",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Middlewares/middleware.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{*}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object.<Request>"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "request received"
      },
      {
        "nullable": null,
        "types": [
          "Object.<Response>"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "response to dispatched"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "next",
        "description": "get control to the next middleware function"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 84,
    "kind": "function",
    "name": "handleGetPost",
    "memberof": "MakeMeDev/Middlewares/middleware.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "MakeMeDev/Middlewares/middleware.js~handleGetPost",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Middlewares/middleware.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 29,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object.<Request>"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "request received"
      },
      {
        "nullable": null,
        "types": [
          "Object.<Response>"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "response to dispatched"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "next",
        "description": "get control to the next middleware function"
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 85,
    "kind": "file",
    "name": "MakeMeDev/Models/postModel.js",
    "content": "const mongoose = require('mongoose');\n\n/**\n * Our Post Model used for mongoDB {@link '../DB/postRepository.js'}.\n * @type {module:mongoose.Schema<any>}\n */\nexports.postSchema = new mongoose.Schema({\n        bookMarked: {type: Number, default: 0},\n        shared: {type: Number, default: 0},\n        name: {type: String, required: true},\n        author: {\n            userId: {type: mongoose.Types.ObjectId, required: true},\n            pseudo: {type: String, required: true},\n            avatar: {type: String, required: true},\n        },\n        creationDate: {type: String, default:  new Date().getTime() / 1000},\n\n        params: [\n            {\n                name: {type: String, required: true},\n                type: {type: String, required: true},\n                description: {type: String, required: true},\n                defaultValue: {type: String}\n            }\n        ],\n        paramsTypes:{},\n        returnsTypes:{},\n        returns:[\n            {\n                name: {type: String},\n                type: {type: String},\n                description: {type: String},\n                defaultValue: {type: String}\n            }],\n        tag: [{type: String, required: true}],\n        post: [\n            {\n                author: {\n                    userId: {type: mongoose.Types.ObjectId, required: true},\n                    pseudo: {type: String, required: true},\n                    avatar: {type: String, required: true},\n                },\n                creationDate: {type: String, default:  new Date().getTime() / 1000},\n                function: {type: String, required: true},\n                description: {type: String, required: true},\n                like: {type: Number, default: 0},\n                dislike: {type: Number, default: 0},\n                totalLike: {type: Number, default: 0},\n                commentary: [\n                    {\n                        author: {\n                            userId: {type: mongoose.Types.ObjectId, required: true},\n                            pseudo: {type: String, required: true},\n                            avatar: {type: String, required: true}\n                        },\n                        commentary: {type: String, required: true},\n                        date: {type: String, default:  new Date().getTime() / 1000}\n                    }\n                ]\n            }\n        ]\n});\n",
    "static": true,
    "longname": "/Users/gwenael/Documents/cours/L2/decembre_projWeb_makeMeDev/MakeMeDev/Models/postModel.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 86,
    "kind": "variable",
    "name": "mongoose",
    "memberof": "MakeMeDev/Models/postModel.js",
    "static": true,
    "longname": "MakeMeDev/Models/postModel.js~mongoose",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Models/postModel.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 87,
    "kind": "file",
    "name": "MakeMeDev/Models/userModel.js",
    "content": "const mongoose = require('mongoose');\n\n/**\n * Our User Model used for mongoDB {@link '../DB/userRepository.js'}.\n * @type {module:mongoose.Schema<any>}\n */\nexports.userSchema = new mongoose.Schema({\n    mail: {type: String, required: true, unique: true},\n    pseudo: {type: String, unique: true, required:true},\n    password: {type: String, required: true},\n    avatar: {type: String, default: \"https://discord.com/channels/690896147404816434/785427941127225354/786182169679757314\"},\n    creationDate: {type: String, default: new Date().getTime() / 1000},\n    activities: {\n        like: [{type: mongoose.Types.ObjectId}],\n        dislike: [{type: mongoose.Types.ObjectId}],\n        response: [{type: mongoose.Types.ObjectId}],\n        commentary: [{type: mongoose.Types.ObjectId}],\n    },\n    post: [{type: mongoose.Types.ObjectId}],\n    bookMark: [{type: mongoose.Types.ObjectId}]\n});\n",
    "static": true,
    "longname": "/Users/gwenael/Documents/cours/L2/decembre_projWeb_makeMeDev/MakeMeDev/Models/userModel.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 88,
    "kind": "variable",
    "name": "mongoose",
    "memberof": "MakeMeDev/Models/userModel.js",
    "static": true,
    "longname": "MakeMeDev/Models/userModel.js~mongoose",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Models/userModel.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 89,
    "kind": "file",
    "name": "MakeMeDev/Routes/const.js",
    "content": "/**\n * Our url used for all routes\n * @type {string}\n */\nexports.url = process.env.URL\n",
    "static": true,
    "longname": "/Users/gwenael/Documents/cours/L2/decembre_projWeb_makeMeDev/MakeMeDev/Routes/const.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 90,
    "kind": "file",
    "name": "MakeMeDev/Routes/post.js",
    "content": "/**\n * This file requires {@link module:../Controllers/postController}, {@link module:../Middlewares/middleware }  and\n * {@link module:./const}.\n * @requires module:../Controllers/postController\n * @requires module:../Middlewares/middleware\n * @requires module:./const\n */\nconst {sendPost, getPost, sendVote, addResponse, addCommentary, updateFunction} = require(\"../Controllers/postController\");\nconst {authenticateToken, handleGetPost} = require(\"../Middlewares/middleware\")\nconst {url} = require(\"./const\");\n\nmodule.exports = (app) => {\n    app.get(url + \"post\", handleGetPost,  getPost);\n    app.post(url + \"post\", authenticateToken,  sendPost);\n    app.post(url + \"post-update\", authenticateToken, updateFunction);\n    app.post(url + \"post-add-response\", authenticateToken, addResponse);\n    app.post(url + \"post-vote\", authenticateToken, sendVote);\n    app.post(url + \"post-add-commentary\", authenticateToken, addCommentary);\n};\n",
    "static": true,
    "longname": "/Users/gwenael/Documents/cours/L2/decembre_projWeb_makeMeDev/MakeMeDev/Routes/post.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 91,
    "kind": "variable",
    "name": "sendPost",
    "memberof": "MakeMeDev/Routes/post.js",
    "static": true,
    "longname": "MakeMeDev/Routes/post.js~sendPost",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Routes/post.js",
    "importStyle": null,
    "description": "This file requires {@link module:../Controllers/postController}, {@link module:../Middlewares/middleware }  and\n{@link module:./const}.",
    "lineNumber": 8,
    "unknown": [
      {
        "tagName": "@requires",
        "tagValue": "module:../Controllers/postController"
      },
      {
        "tagName": "@requires",
        "tagValue": "module:../Middlewares/middleware"
      },
      {
        "tagName": "@requires",
        "tagValue": "module:./const"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 92,
    "kind": "variable",
    "name": "authenticateToken",
    "memberof": "MakeMeDev/Routes/post.js",
    "static": true,
    "longname": "MakeMeDev/Routes/post.js~authenticateToken",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Routes/post.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 93,
    "kind": "variable",
    "name": "url",
    "memberof": "MakeMeDev/Routes/post.js",
    "static": true,
    "longname": "MakeMeDev/Routes/post.js~url",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Routes/post.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 94,
    "kind": "file",
    "name": "MakeMeDev/Routes/user.js",
    "content": "/**\n * This file requires {@link module:../Controllers/usersController}, {@link module:../Middlewares/middleware }  and\n * {@link module:./const}.\n * @requires module:../Controllers/usersController\n * @requires module:../Middlewares/middleware\n * @requires module:./const\n */\nconst {signIn, signUp, updateUser} = require(\"../Controllers/usersController\");\nconst {authenticateToken} = require(\"../Middlewares/middleware\")\nconst {url} = require(\"./const\");\n\nmodule.exports = (app) => {\n    app.post(url + \"user-signin\", signIn);\n    app.post(url + \"users\", signUp);\n    app.post(url + \"update-users\", authenticateToken, updateUser);\n};\n",
    "static": true,
    "longname": "/Users/gwenael/Documents/cours/L2/decembre_projWeb_makeMeDev/MakeMeDev/Routes/user.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 95,
    "kind": "variable",
    "name": "signIn",
    "memberof": "MakeMeDev/Routes/user.js",
    "static": true,
    "longname": "MakeMeDev/Routes/user.js~signIn",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Routes/user.js",
    "importStyle": null,
    "description": "This file requires {@link module:../Controllers/usersController}, {@link module:../Middlewares/middleware }  and\n{@link module:./const}.",
    "lineNumber": 8,
    "unknown": [
      {
        "tagName": "@requires",
        "tagValue": "module:../Controllers/usersController"
      },
      {
        "tagName": "@requires",
        "tagValue": "module:../Middlewares/middleware"
      },
      {
        "tagName": "@requires",
        "tagValue": "module:./const"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 96,
    "kind": "variable",
    "name": "authenticateToken",
    "memberof": "MakeMeDev/Routes/user.js",
    "static": true,
    "longname": "MakeMeDev/Routes/user.js~authenticateToken",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Routes/user.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 97,
    "kind": "variable",
    "name": "url",
    "memberof": "MakeMeDev/Routes/user.js",
    "static": true,
    "longname": "MakeMeDev/Routes/user.js~url",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Routes/user.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 98,
    "kind": "file",
    "name": "MakeMeDev/Services/postService.js",
    "content": "/**\n * This Service file requires {@link module:../DB/postRepository }, {@link module:../DB/userRepository},\n * {@link module:../Tools/token}, {@link module:../Tools/Services/searchPost },\n * {@link module:../Tools/Common/undefinedControl }, {@link module:../Tools/Services/addField}\n * {@link module:../Tools/Services/sortPost} and {@link module:../Tools/Services/responseHandler}\n\n * @requires module:../DB/postRepository\n * @requires module:../DB/userRepository\n * @requires module:../Tools/token\n * @requires module:../Tools/Services/searchPost\n * @requires module:../Tools/Common/undefinedControl\n * @requires module:../Tools/Services/addField\n * @requires module:../Tools/Services/sortPost\n * @requires module:../Tools/Services/responseHandler\n */\nconst { addPost, getPostByFunction, getPostById, updateLikeOrDislike, pushPostResponse,\n        pushPostResponseCommentary, updatePostFunction} = require(\"../DB/postRepository\");\nconst { updateUserById} = require(\"../DB/userRepository\");\n\n//region Tools\nconst { generateAccessToken} = require(\"../Tools/token\");\nconst { getSearchPost} = require(\"../Tools/Services/searchPost\");\nconst { isDefinedAndNotNull} = require(\"../Tools/Common/undefinedControl\");\nconst { addDate, addAuthor, setTypes} = require(\"../Tools/Services/addField\");\nconst { sortPostByLikes, sortAllPostByLike} = require(\"../Tools/Services/sortPost\");\nconst { getHandler, getHandlerForUserPost, updateDbHandler} = require(\"../Tools/Services/responseHandler\");\n//endregion\n\n//region exported methods\n//region get\n/** @function\n * @name get\n * Get posts depending on a request get thanks to a string with strict typography to demarcate\n * each field, and if not exist it will not be a criteria to search at all.\n * Structure : functionName(param1, param2, ?){returned1, returned2}\"functionDescription\"[tag1, tag2, tag3]\n * OR use a post id to get the corresponding post.\n * @param {object} search - search field to find in database\n * @returns {Promise<{code: number, body: {error: *}}|{code: number, body: *}|{code: number, body: *}|{code: number, body: {error: string}}>}\n */\nasync function get(search) {\n    if (isDefinedAndNotNull(search.search)) {\n        const objectSearchPost = getSearchPost(search.search)\n        let queryRes = await getPostByFunction(objectSearchPost);\n        return getHandler(sortAllPostByLike(queryRes), \"No post exists with these details\");\n    }\n    else {\n        let queryRes = await getPostById(search.postId);\n        queryRes.success = sortPostByLikes(queryRes.success)\n        return getHandler(queryRes, \"No post exists with this id\");\n    }\n}\n//endregion\n\n//region post\n/** @function\n * @name create\n * Create a new post, that will be add in database.\n * We add some field : paramsTypes and returnsTypes to have an object with a number of occurrence of each params.\n * Also creation date for post\n * It will make it simpler to search post depending on the amount of params or returns with getPost function.\n * @param {object} post - post to add, should be really similar to postModels {@link '../Models/postModels'}.\n * @param {object} user - user to update, should be really similar to userModels {@link '../Models/userModels'}.\n * @returns {Promise<{code: number, body: {success: {post: (string|boolean|SrvPoller.success|Event), user: (string|boolean|SrvPoller.success|Event)}, token: *}}|{code: number, body: {error: string}}|{code: number, body: *}>}\n */\nasync function create(post, user) {\n    try {\n        setTypes(post, \"params\");\n        setTypes(post, \"returns\");\n        addAuthor(user ,post)\n        addAuthor(user ,post.post[0])\n        addDate(post.post[0])\n        addDate(post)\n\n        const result = await addPost(post, user);\n        if (result.success) {\n            const userRes = await updateUserById({id: user._id}, {$push: {post: result.success._id}});\n            return closeUserUpdateAction(userRes, result, \"Post created, but can't update user's data\")\n        }\n        return updateDbHandler(result, \"Error when creating post\", 500);\n    }\n    catch (e) {\n        return updateDbHandler({error: \"Can't create this post: bad request\"})\n    }\n}\n//endregion\n\n//region patch\n/** @function\n * @name updateFunction\n * Update a function from a post or post response thanks to its id.\n * @param {string} functionPost - the complete function, real code that could be run.\n * @param {string} idPost - post's or response post's id to update\n * @param {object} user - current user's data\n * @todo Check if current user if post or post response author\n * @returns {Promise<{code: number, body: {error: string}}|{code: number, body: *}>}\n */\nasync function updateFunction(functionPost, idPost, user) {\n    if (functionPost) {\n        return updateDbHandler(await updatePostFunction(functionPost, idPost), \"Error when updating post function\", 500)\n    }\n    return updateDbHandler({error: \"Update function failed\"}, \"can't update post function: no functionPost found\");\n}\n\n/** @function\n * @name updateVote\n * Used to add or update a vote in DB for a post. Then we update user to know if it already have\n * like or dislike a function.\n * @param {int|string} vote - vote value. If it's an int, 1=\"like\" & -1=\"dislike\"\n * @param {string} idPost - post's id\n * @param {object} user - user's data\n * @returns {Promise<{code: number, body: {success: {post: (string|boolean|SrvPoller.success|Event), user: (string|boolean|SrvPoller.success|Event)}, token: *}}|{code: number, body: {error: string}}|{code: number, body: *}>}\n */\nasync function updateVote(vote, idPost, user) {\n    const likeOrDislike = vote === 1 || vote === \"like\" ? \"like\" : \"dislike\"\n    const opposite = vote === 1 || vote === \"like\" ? \"dislike\" : \"like\"\n    let result = await updateLikeOrDislike(likeOrDislike, idPost, user)\n\n    //check if updated , then update user\n    if (isDefinedAndNotNull(result.success)) {\n        const userRes = await updateUserById({id: user._id}, {\n            $push: {[\"activities.\" + likeOrDislike]: result.postId},\n            $pull: {[\"activities.\" + opposite]: result.postId}\n        })\n        result.success = sortPostByLikes(result.success)\n        return closeUserUpdateAction(userRes, result, \"Adding \" + likeOrDislike + \" on post with id= \" + idPost + \" is impossible\")\n    }\n    return updateDbHandler({error: \"Update vote failed\"}, \"Can't update vote post\", 500);\n}\n\n/** @function\n * @name addPostResponse\n * Add a response to a post (with a new function proposal) after adding author and date.\n * Then we update user to save in his activities he post a response.\n * @param {object} responsePost - a response to a post\n * @param {string} idPost - post's id\n * @param {object} user - user's data\n * @returns {Promise<{code: number, body: {success: {post: (string|boolean|SrvPoller.success|Event), user: (string|boolean|SrvPoller.success|Event)}, token: *}}|{code: number, body: {error: string}}|{code: number, body: *}>}\n */\nasync function addPostResponse(responsePost, idPost, user) {\n    addAuthor(user, responsePost)\n    addDate(responsePost)\n    if (responsePost['function'] && responsePost['description']) {\n        const result = await pushPostResponse(responsePost, idPost, user)\n        if (result.success !== null && result.success !== undefined) {\n            const userRes = await updateUserById({id: user._id}, {$push: {[\"activities.response\"]: result.responseId}})\n            result.success = sortPostByLikes(result.success)\n            return closeUserUpdateAction(userRes, result, \"Add a new response,but can't update user's data\")\n        }\n    }\n    return updateDbHandler({error: \"Adding response failed\"}, \"Can't add response to post\");\n}\n\n/** @function\n * @name addCommentary\n * Add a commentary to a post after adding author and date. Then we update user to save in his\n * activities he add a commentary to a post.\n * @param {object} commentaryPost - a commentary post\n * @param {string} idPost - post's id\n * @param {object} user - user's data\n * @returns {Promise<{code: number, body: {success: {post: (string|boolean|SrvPoller.success|Event), user: (string|boolean|SrvPoller.success|Event)}, token: *}}|{code: number, body: {error: string}}|{code: number, body: *}>}\n */\nasync function addCommentary(commentaryPost, idPost, user) {\n    addAuthor(user, commentaryPost)\n    addDate(commentaryPost, \"date\")\n    if (commentaryPost['commentary']) {\n        const result = await pushPostResponseCommentary(commentaryPost, idPost, user)\n        if (result.success !== null && result.success !== undefined) {\n            const userRes = await updateUserById({id: user._id}, {$push: {[\"activities.commentary\"]: result.commentaryId}})\n            result.success = sortPostByLikes(result.success)\n            return closeUserUpdateAction(userRes, result, \"Add a new commentary, but can't update user's data\")\n        }\n    }\n    return updateDbHandler({error: \"Adding commentary failed\"}, \"Can't add a commentary\");\n}\n//endregion\n//endregion\n\n\n//region not exported functions\n/** @function\n * @name closeUserUpdateAction\n * This function is used to close action. We generate a new token\n * and return a http code status and body\n * @param {object} userData - user's data from a response\n * @param {object} postData - post's data from a response\n * @param {string } [msg= \"erreur en base de données\"] - message to send in body if there is an issue\n * @returns {{code: number, body: {success: {post: (string|boolean|SrvPoller.success|Event), user: (string|boolean|SrvPoller.success|Event)}, token: *}}|{code: number, body: {error: string}}|{code: number, body: *}}\n */\nfunction closeUserUpdateAction(userData, postData, msg=\"DB error\"){\n    generateAccessToken(userData)\n    return getHandlerForUserPost(userData, postData, msg);\n}\n\n//endregion\n\nmodule.exports = {create, get, updateVote, addPostResponse, addCommentary, updateFunction};\n",
    "static": true,
    "longname": "/Users/gwenael/Documents/cours/L2/decembre_projWeb_makeMeDev/MakeMeDev/Services/postService.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 99,
    "kind": "variable",
    "name": "addPost",
    "memberof": "MakeMeDev/Services/postService.js",
    "static": true,
    "longname": "MakeMeDev/Services/postService.js~addPost",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Services/postService.js",
    "importStyle": null,
    "description": "This Service file requires {@link module:../DB/postRepository }, {@link module:../DB/userRepository},\n{@link module:../Tools/token}, {@link module:../Tools/Services/searchPost },\n{@link module:../Tools/Common/undefinedControl }, {@link module:../Tools/Services/addField}\n{@link module:../Tools/Services/sortPost} and {@link module:../Tools/Services/responseHandler}",
    "lineNumber": 16,
    "unknown": [
      {
        "tagName": "@requires",
        "tagValue": "module:../DB/postRepository"
      },
      {
        "tagName": "@requires",
        "tagValue": "module:../DB/userRepository"
      },
      {
        "tagName": "@requires",
        "tagValue": "module:../Tools/token"
      },
      {
        "tagName": "@requires",
        "tagValue": "module:../Tools/Services/searchPost"
      },
      {
        "tagName": "@requires",
        "tagValue": "module:../Tools/Common/undefinedControl"
      },
      {
        "tagName": "@requires",
        "tagValue": "module:../Tools/Services/addField"
      },
      {
        "tagName": "@requires",
        "tagValue": "module:../Tools/Services/sortPost"
      },
      {
        "tagName": "@requires",
        "tagValue": "module:../Tools/Services/responseHandler"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 100,
    "kind": "variable",
    "name": "updateUserById",
    "memberof": "MakeMeDev/Services/postService.js",
    "static": true,
    "longname": "MakeMeDev/Services/postService.js~updateUserById",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Services/postService.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 101,
    "kind": "variable",
    "name": "generateAccessToken",
    "memberof": "MakeMeDev/Services/postService.js",
    "static": true,
    "longname": "MakeMeDev/Services/postService.js~generateAccessToken",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Services/postService.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 102,
    "kind": "variable",
    "name": "getSearchPost",
    "memberof": "MakeMeDev/Services/postService.js",
    "static": true,
    "longname": "MakeMeDev/Services/postService.js~getSearchPost",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Services/postService.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 103,
    "kind": "variable",
    "name": "isDefinedAndNotNull",
    "memberof": "MakeMeDev/Services/postService.js",
    "static": true,
    "longname": "MakeMeDev/Services/postService.js~isDefinedAndNotNull",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Services/postService.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 104,
    "kind": "variable",
    "name": "addDate",
    "memberof": "MakeMeDev/Services/postService.js",
    "static": true,
    "longname": "MakeMeDev/Services/postService.js~addDate",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Services/postService.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 105,
    "kind": "variable",
    "name": "sortPostByLikes",
    "memberof": "MakeMeDev/Services/postService.js",
    "static": true,
    "longname": "MakeMeDev/Services/postService.js~sortPostByLikes",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Services/postService.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 106,
    "kind": "variable",
    "name": "getHandler",
    "memberof": "MakeMeDev/Services/postService.js",
    "static": true,
    "longname": "MakeMeDev/Services/postService.js~getHandler",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Services/postService.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 107,
    "kind": "function",
    "name": "get",
    "memberof": "MakeMeDev/Services/postService.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "MakeMeDev/Services/postService.js~get",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Services/postService.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 40,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Promise<{code: number, body: {error: *}}|{code: number, body: *}|{code: number, body: *}|{code: number, body: {error: string}}>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "search",
        "description": "search field to find in database"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<{code: number, body: {error: *}}|{code: number, body: *}|{code: number, body: *}|{code: number, body: {error: string}}>"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 108,
    "kind": "function",
    "name": "create",
    "memberof": "MakeMeDev/Services/postService.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "MakeMeDev/Services/postService.js~create",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Services/postService.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 65,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Promise<{code: number, body: {success: {post: (string|boolean|SrvPoller.success|Event), user: (string|boolean|SrvPoller.success|Event)}, token: *}}|{code: number, body: {error: string}}|{code: number, body: *}>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "post",
        "description": "post to add, should be really similar to postModels {@link '../Models/postModels'}."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "user",
        "description": "user to update, should be really similar to userModels {@link '../Models/userModels'}."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<{code: number, body: {success: {post: (string|boolean|SrvPoller.success|Event), user: (string|boolean|SrvPoller.success|Event)}, token: *}}|{code: number, body: {error: string}}|{code: number, body: *}>"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 109,
    "kind": "function",
    "name": "updateFunction",
    "memberof": "MakeMeDev/Services/postService.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "MakeMeDev/Services/postService.js~updateFunction",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Services/postService.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 97,
    "todo": [
      "Check if current user if post or post response author"
    ],
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Promise<{code: number, body: {error: string}}|{code: number, body: *}>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "functionPost",
        "description": "the complete function, real code that could be run."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "idPost",
        "description": "post's or response post's id to update"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "user",
        "description": "current user's data"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<{code: number, body: {error: string}}|{code: number, body: *}>"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 110,
    "kind": "function",
    "name": "updateVote",
    "memberof": "MakeMeDev/Services/postService.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "MakeMeDev/Services/postService.js~updateVote",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Services/postService.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 113,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Promise<{code: number, body: {success: {post: (string|boolean|SrvPoller.success|Event), user: (string|boolean|SrvPoller.success|Event)}, token: *}}|{code: number, body: {error: string}}|{code: number, body: *}>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "int",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "vote",
        "description": "vote value. If it's an int, 1=\"like\" & -1=\"dislike\""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "idPost",
        "description": "post's id"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "user",
        "description": "user's data"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<{code: number, body: {success: {post: (string|boolean|SrvPoller.success|Event), user: (string|boolean|SrvPoller.success|Event)}, token: *}}|{code: number, body: {error: string}}|{code: number, body: *}>"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 111,
    "kind": "function",
    "name": "addPostResponse",
    "memberof": "MakeMeDev/Services/postService.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "MakeMeDev/Services/postService.js~addPostResponse",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Services/postService.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 139,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Promise<{code: number, body: {success: {post: (string|boolean|SrvPoller.success|Event), user: (string|boolean|SrvPoller.success|Event)}, token: *}}|{code: number, body: {error: string}}|{code: number, body: *}>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "responsePost",
        "description": "a response to a post"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "idPost",
        "description": "post's id"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "user",
        "description": "user's data"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<{code: number, body: {success: {post: (string|boolean|SrvPoller.success|Event), user: (string|boolean|SrvPoller.success|Event)}, token: *}}|{code: number, body: {error: string}}|{code: number, body: *}>"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 112,
    "kind": "function",
    "name": "addCommentary",
    "memberof": "MakeMeDev/Services/postService.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "MakeMeDev/Services/postService.js~addCommentary",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Services/postService.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 162,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Promise<{code: number, body: {success: {post: (string|boolean|SrvPoller.success|Event), user: (string|boolean|SrvPoller.success|Event)}, token: *}}|{code: number, body: {error: string}}|{code: number, body: *}>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "commentaryPost",
        "description": "a commentary post"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "idPost",
        "description": "post's id"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "user",
        "description": "user's data"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<{code: number, body: {success: {post: (string|boolean|SrvPoller.success|Event), user: (string|boolean|SrvPoller.success|Event)}, token: *}}|{code: number, body: {error: string}}|{code: number, body: *}>"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 113,
    "kind": "function",
    "name": "closeUserUpdateAction",
    "memberof": "MakeMeDev/Services/postService.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "MakeMeDev/Services/postService.js~closeUserUpdateAction",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Services/postService.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 189,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{{code: number, body: {success: {post: (string|boolean|SrvPoller.success|Event), user: (string|boolean|SrvPoller.success|Event)}, token: *}}|{code: number, body: {error: string}}|{code: number, body: *}}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "userData",
        "description": "user's data from a response"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "postData",
        "description": "post's data from a response"
      },
      {
        "nullable": null,
        "types": [
          "string "
        ],
        "spread": false,
        "optional": true,
        "defaultValue": " \"erreur en base de données\"",
        "defaultRaw": "erreur en base de données",
        "name": "msg",
        "description": "message to send in body if there is an issue"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{code: number, body: {success: {post: (string|boolean|SrvPoller.success|Event), user: (string|boolean|SrvPoller.success|Event)}, token: *}}|{code: number, body: {error: string}}|{code: number, body: *}"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 114,
    "kind": "file",
    "name": "MakeMeDev/Services/usersService.js",
    "content": "/**\n * This Service file requires {@link module:../Tools/Services/responseHandler }, {@link module:../Tools/token},\n * {@link module:../Tools/DB/requestOperator} and {@link module:../DB/userRepository}\n * @requires module:../Tools/Services/responseHandler\n * @requires module:../Tools/token\n * @requires module:../Tools/DB/requestOperator\n * @requires module:../DB/userRepository\n */\nconst {getHandler, updateDbHandler} = require(\"../Tools/Services/responseHandler\");\nconst {generateAccessToken} = require(\"../Tools/token\")\nconst {setUpdateValue} = require('../Tools/Services/requestOperator')\nconst {signUp, signIn, updateUserById} = require(\"../DB/userRepository\");\n\n\n//region exported functions\n//region get\n/** @function\n * @name getUser\n * Get user's data if a user with corresponding pseudo/mail and password exist.\n * @param {object} user - user's data needed to signIn\n * @returns {Promise<{code: number, body: {error: string}}|{code: number, body: {error: *}}|{code: number, body: *}>}\n */\nasync function getUser(user) {\n    const userData = await signIn(user);\n    return closeUserAction(userData,\"Any account found with this login/password\" ,false)\n}\n//endregion\n\n//region post\n/** @function\n * @name addUser\n * Create a new user, that will be add in database\n * @param {object} user - user to add, should be really similar to UserModel {@link '../Models/userModel'}.\n * @returns {Promise<{code: number, body: {error: string}}|{code: number, body: {error: *}}|{code: number, body: *}>}\n */\nasync function addUser(user) {\n    const result = await signUp(user);\n    return closeUserAction(result)\n}\n//endregion\n\n//region patch\nasync function updateUser(user) {\n    const keysToUpdate = Object.keys(user).filter(word => [\"pseudo\", \"mail\", \"avatar\"].includes(word));\n    const userData = await updateUserById(user, setUpdateValue(user, keysToUpdate));\n    return closeUserAction(userData, \"Can't update this user: any corresponding account found\")\n}\n//endregion\n//endregion\n\n//region not exported function\nfunction closeUserAction(userData,  msg=\"DB error\", isSetDb=true){\n    generateAccessToken(userData);\n    return ( isSetDb ? updateDbHandler(userData , msg, 500) : getHandler(userData , msg, 404)  )\n}\n//endregion\n\nmodule.exports = {addUser, getUser, updateUser};\n",
    "static": true,
    "longname": "/Users/gwenael/Documents/cours/L2/decembre_projWeb_makeMeDev/MakeMeDev/Services/usersService.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 115,
    "kind": "variable",
    "name": "getHandler",
    "memberof": "MakeMeDev/Services/usersService.js",
    "static": true,
    "longname": "MakeMeDev/Services/usersService.js~getHandler",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Services/usersService.js",
    "importStyle": null,
    "description": "This Service file requires {@link module:../Tools/Services/responseHandler }, {@link module:../Tools/token},\n{@link module:../Tools/DB/requestOperator} and {@link module:../DB/userRepository}",
    "lineNumber": 9,
    "unknown": [
      {
        "tagName": "@requires",
        "tagValue": "module:../Tools/Services/responseHandler"
      },
      {
        "tagName": "@requires",
        "tagValue": "module:../Tools/token"
      },
      {
        "tagName": "@requires",
        "tagValue": "module:../Tools/DB/requestOperator"
      },
      {
        "tagName": "@requires",
        "tagValue": "module:../DB/userRepository"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 116,
    "kind": "variable",
    "name": "generateAccessToken",
    "memberof": "MakeMeDev/Services/usersService.js",
    "static": true,
    "longname": "MakeMeDev/Services/usersService.js~generateAccessToken",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Services/usersService.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 117,
    "kind": "variable",
    "name": "setUpdateValue",
    "memberof": "MakeMeDev/Services/usersService.js",
    "static": true,
    "longname": "MakeMeDev/Services/usersService.js~setUpdateValue",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Services/usersService.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 118,
    "kind": "variable",
    "name": "signUp",
    "memberof": "MakeMeDev/Services/usersService.js",
    "static": true,
    "longname": "MakeMeDev/Services/usersService.js~signUp",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Services/usersService.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 119,
    "kind": "function",
    "name": "getUser",
    "memberof": "MakeMeDev/Services/usersService.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "MakeMeDev/Services/usersService.js~getUser",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Services/usersService.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Promise<{code: number, body: {error: string}}|{code: number, body: {error: *}}|{code: number, body: *}>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "user",
        "description": "user's data needed to signIn"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<{code: number, body: {error: string}}|{code: number, body: {error: *}}|{code: number, body: *}>"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 120,
    "kind": "function",
    "name": "addUser",
    "memberof": "MakeMeDev/Services/usersService.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "MakeMeDev/Services/usersService.js~addUser",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Services/usersService.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 36,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Promise<{code: number, body: {error: string}}|{code: number, body: {error: *}}|{code: number, body: *}>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "user",
        "description": "user to add, should be really similar to UserModel {@link '../Models/userModel'}."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<{code: number, body: {error: string}}|{code: number, body: {error: *}}|{code: number, body: *}>"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 121,
    "kind": "function",
    "name": "updateUser",
    "memberof": "MakeMeDev/Services/usersService.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "MakeMeDev/Services/usersService.js~updateUser",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Services/usersService.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "params": [
      {
        "name": "user",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 122,
    "kind": "function",
    "name": "closeUserAction",
    "memberof": "MakeMeDev/Services/usersService.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "MakeMeDev/Services/usersService.js~closeUserAction",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Services/usersService.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "params": [
      {
        "name": "userData",
        "types": [
          "*"
        ]
      },
      {
        "name": "msg",
        "optional": true,
        "types": [
          "string"
        ],
        "defaultRaw": "DB error",
        "defaultValue": "DB error"
      },
      {
        "name": "isSetDb",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": true,
        "defaultValue": "true"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 123,
    "kind": "file",
    "name": "MakeMeDev/Test/config/MemoryDataBaseServer.js",
    "content": "const { MongoMemoryServer } = require('mongodb-memory-server');\n\n/**\n * @class MemoryDatabaseServer\n */\nclass MemoryDatabaseServer {\n  constructor() {\n    this.mongod = new MongoMemoryServer({\n      binary: {\n        version: '4.0.3',\n      },\n      autoStart: false,\n    });\n  }\n\n  /**\n   * @method start\n   * Start mongodb\n   * @returns {Promise<boolean>}\n   */\n  start() {\n    return this.mongod.start();\n  }\n\n  /**\n   * @method stop\n   * Stop mongodb\n   * @returns {Promise<boolean>}\n   */\n  stop() {\n    return this.mongod.stop();\n  }\n\n  /**\n   * @method getConnectionString\n   * Get mongodb URI\n   * @returns {Promise<string>}\n   */\n  getConnectionString() {\n    return this.mongod.getUri();\n  }\n}\n\nmodule.exports = new MemoryDatabaseServer();\n",
    "static": true,
    "longname": "/Users/gwenael/Documents/cours/L2/decembre_projWeb_makeMeDev/MakeMeDev/Test/config/MemoryDataBaseServer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 124,
    "kind": "variable",
    "name": "MongoMemoryServer",
    "memberof": "MakeMeDev/Test/config/MemoryDataBaseServer.js",
    "static": true,
    "longname": "MakeMeDev/Test/config/MemoryDataBaseServer.js~MongoMemoryServer",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Test/config/MemoryDataBaseServer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 125,
    "kind": "class",
    "name": "MemoryDatabaseServer",
    "memberof": "MakeMeDev/Test/config/MemoryDataBaseServer.js",
    "static": true,
    "longname": "MakeMeDev/Test/config/MemoryDataBaseServer.js~MemoryDatabaseServer",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Test/config/MemoryDataBaseServer.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 6,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "MemoryDatabaseServer"
      }
    ],
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 126,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "MakeMeDev/Test/config/MemoryDataBaseServer.js~MemoryDatabaseServer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "MakeMeDev/Test/config/MemoryDataBaseServer.js~MemoryDatabaseServer#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true
  },
  {
    "__docId__": 127,
    "kind": "member",
    "name": "mongod",
    "memberof": "MakeMeDev/Test/config/MemoryDataBaseServer.js~MemoryDatabaseServer",
    "static": false,
    "longname": "MakeMeDev/Test/config/MemoryDataBaseServer.js~MemoryDatabaseServer#mongod",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 128,
    "kind": "method",
    "name": "start",
    "memberof": "MakeMeDev/Test/config/MemoryDataBaseServer.js~MemoryDatabaseServer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "MakeMeDev/Test/config/MemoryDataBaseServer.js~MemoryDatabaseServer#start",
    "access": "public",
    "description": "",
    "lineNumber": 21,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "start\nStart mongodb"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Promise<boolean>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<boolean>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 129,
    "kind": "method",
    "name": "stop",
    "memberof": "MakeMeDev/Test/config/MemoryDataBaseServer.js~MemoryDatabaseServer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "MakeMeDev/Test/config/MemoryDataBaseServer.js~MemoryDatabaseServer#stop",
    "access": "public",
    "description": "",
    "lineNumber": 30,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "stop\nStop mongodb"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Promise<boolean>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<boolean>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 130,
    "kind": "method",
    "name": "getConnectionString",
    "memberof": "MakeMeDev/Test/config/MemoryDataBaseServer.js~MemoryDatabaseServer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "MakeMeDev/Test/config/MemoryDataBaseServer.js~MemoryDatabaseServer#getConnectionString",
    "access": "public",
    "description": "",
    "lineNumber": 39,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "getConnectionString\nGet mongodb URI"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Promise<string>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<string>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 131,
    "kind": "file",
    "name": "MakeMeDev/Test/config/environment.js",
    "content": "/**\n * This module requires {@link module:../config/MemoryDataBaseServer}.\n * @requires module:../config/MemoryDataBaseServer\n */\nconst MemoryDatabaseServer = require('../config/MemoryDataBaseServer');\nconst NodeEnvironment = require('jest-environment-node');\n\n/**\n * @class CustomEnvironment\n * @extends {NodeEnvironment}\n */\nclass CustomEnvironment extends NodeEnvironment {\n\n    /**\n     * @method setup\n     * @returns {Promise<void>}\n     */\n    async setup() {\n        await super.setup();\n\n        this.global.__DB_URL__ = await MemoryDatabaseServer.getConnectionString();\n    }\n\n     /**\n     * @method teardown\n     * @returns {Promise<void>}\n     */\n    async teardown() {\n        await super.teardown();\n    }\n\n    /**\n     * @method start\n     * @param script\n     * @returns {unknown}\n     */\n    runScript(script) {\n        return super.runScript(script);\n    }\n}\n\nmodule.exports = CustomEnvironment;\n",
    "static": true,
    "longname": "/Users/gwenael/Documents/cours/L2/decembre_projWeb_makeMeDev/MakeMeDev/Test/config/environment.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 132,
    "kind": "variable",
    "name": "MemoryDatabaseServer",
    "memberof": "MakeMeDev/Test/config/environment.js",
    "static": true,
    "longname": "MakeMeDev/Test/config/environment.js~MemoryDatabaseServer",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Test/config/environment.js",
    "importStyle": null,
    "description": "This module requires {@link module:../config/MemoryDataBaseServer}.",
    "lineNumber": 5,
    "unknown": [
      {
        "tagName": "@requires",
        "tagValue": "module:../config/MemoryDataBaseServer"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 133,
    "kind": "variable",
    "name": "NodeEnvironment",
    "memberof": "MakeMeDev/Test/config/environment.js",
    "static": true,
    "longname": "MakeMeDev/Test/config/environment.js~NodeEnvironment",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Test/config/environment.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 134,
    "kind": "class",
    "name": "CustomEnvironment",
    "memberof": "MakeMeDev/Test/config/environment.js",
    "static": true,
    "longname": "MakeMeDev/Test/config/environment.js~CustomEnvironment",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Test/config/environment.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 12,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "CustomEnvironment"
      }
    ],
    "interface": false,
    "extends": [
      "NodeEnvironment"
    ],
    "ignore": true
  },
  {
    "__docId__": 135,
    "kind": "method",
    "name": "setup",
    "memberof": "MakeMeDev/Test/config/environment.js~CustomEnvironment",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "MakeMeDev/Test/config/environment.js~CustomEnvironment#setup",
    "access": "public",
    "description": "",
    "lineNumber": 18,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "setup"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Promise<void>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 136,
    "kind": "method",
    "name": "teardown",
    "memberof": "MakeMeDev/Test/config/environment.js~CustomEnvironment",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "MakeMeDev/Test/config/environment.js~CustomEnvironment#teardown",
    "access": "public",
    "description": "",
    "lineNumber": 28,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "teardown"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Promise<void>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 137,
    "kind": "method",
    "name": "runScript",
    "memberof": "MakeMeDev/Test/config/environment.js~CustomEnvironment",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "MakeMeDev/Test/config/environment.js~CustomEnvironment#runScript",
    "access": "public",
    "description": "",
    "lineNumber": 37,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "start"
      },
      {
        "tagName": "@returns",
        "tagValue": "{unknown}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "script",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "unknown"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 138,
    "kind": "file",
    "name": "MakeMeDev/Test/config/launcher.js",
    "content": "/**\n * This module requires {@link module:../../app}, {@link module:../../Routes/const}.\n * @requires module:../../app\n * @requires module:../../Routes/const\n */\nconst supertest = require('supertest');\nconst {app} = require(\"../../app\")\nconst request = supertest(app);\nconst {url} = require(\"../../Routes/const\");\n\nmodule.exports = {request, url}\n",
    "static": true,
    "longname": "/Users/gwenael/Documents/cours/L2/decembre_projWeb_makeMeDev/MakeMeDev/Test/config/launcher.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 139,
    "kind": "variable",
    "name": "supertest",
    "memberof": "MakeMeDev/Test/config/launcher.js",
    "static": true,
    "longname": "MakeMeDev/Test/config/launcher.js~supertest",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Test/config/launcher.js",
    "importStyle": null,
    "description": "This module requires {@link module:../../app}, {@link module:../../Routes/const}.",
    "lineNumber": 6,
    "unknown": [
      {
        "tagName": "@requires",
        "tagValue": "module:../../app"
      },
      {
        "tagName": "@requires",
        "tagValue": "module:../../Routes/const"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 140,
    "kind": "variable",
    "name": "app",
    "memberof": "MakeMeDev/Test/config/launcher.js",
    "static": true,
    "longname": "MakeMeDev/Test/config/launcher.js~app",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Test/config/launcher.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 141,
    "kind": "variable",
    "name": "request",
    "memberof": "MakeMeDev/Test/config/launcher.js",
    "static": true,
    "longname": "MakeMeDev/Test/config/launcher.js~request",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Test/config/launcher.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 142,
    "kind": "variable",
    "name": "url",
    "memberof": "MakeMeDev/Test/config/launcher.js",
    "static": true,
    "longname": "MakeMeDev/Test/config/launcher.js~url",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Test/config/launcher.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 143,
    "kind": "file",
    "name": "MakeMeDev/Test/config/setup.js",
    "content": "/**\n * This module requires {@link module:../config/MemoryDataBaseServer}.\n * @requires module:../config/MemoryDataBaseServer\n */\nconst MemoryDatabaseServer = require('../config/MemoryDataBaseServer');\n\nmodule.exports = async () => {\n    await MemoryDatabaseServer.start();\n};\n",
    "static": true,
    "longname": "/Users/gwenael/Documents/cours/L2/decembre_projWeb_makeMeDev/MakeMeDev/Test/config/setup.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 144,
    "kind": "variable",
    "name": "MemoryDatabaseServer",
    "memberof": "MakeMeDev/Test/config/setup.js",
    "static": true,
    "longname": "MakeMeDev/Test/config/setup.js~MemoryDatabaseServer",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Test/config/setup.js",
    "importStyle": null,
    "description": "This module requires {@link module:../config/MemoryDataBaseServer}.",
    "lineNumber": 5,
    "unknown": [
      {
        "tagName": "@requires",
        "tagValue": "module:../config/MemoryDataBaseServer"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 145,
    "kind": "file",
    "name": "MakeMeDev/Test/config/setupAfterEnv.js",
    "content": "/**\n * This module requires {@link module:../../Tools/DB/database}.\n * @requires module:../../Tools/DB/database\n */\nconst databaseHelper = require('../../Tools/DB/database');\nrequire('dotenv').config();\n\n\nbeforeAll(() => {\n    return databaseHelper.connect();\n});\n\nbeforeEach(() => {\n    return databaseHelper.truncate();\n});\n\nafterAll(() => {\n    return databaseHelper.disconnect();\n});\n",
    "static": true,
    "longname": "/Users/gwenael/Documents/cours/L2/decembre_projWeb_makeMeDev/MakeMeDev/Test/config/setupAfterEnv.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 146,
    "kind": "variable",
    "name": "databaseHelper",
    "memberof": "MakeMeDev/Test/config/setupAfterEnv.js",
    "static": true,
    "longname": "MakeMeDev/Test/config/setupAfterEnv.js~databaseHelper",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Test/config/setupAfterEnv.js",
    "importStyle": null,
    "description": "This module requires {@link module:../../Tools/DB/database}.",
    "lineNumber": 5,
    "unknown": [
      {
        "tagName": "@requires",
        "tagValue": "module:../../Tools/DB/database"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 147,
    "kind": "file",
    "name": "MakeMeDev/Test/config/teardown.js",
    "content": "/**\n * This module requires {@link module:../config/MemoryDataBaseServer}.\n * @requires module:../config/MemoryDataBaseServer\n */\nconst MemoryDatabaseServer = require('../config/MemoryDataBaseServer');\n\nmodule.exports = async () => {\n    await MemoryDatabaseServer.stop();\n};\n",
    "static": true,
    "longname": "/Users/gwenael/Documents/cours/L2/decembre_projWeb_makeMeDev/MakeMeDev/Test/config/teardown.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 148,
    "kind": "variable",
    "name": "MemoryDatabaseServer",
    "memberof": "MakeMeDev/Test/config/teardown.js",
    "static": true,
    "longname": "MakeMeDev/Test/config/teardown.js~MemoryDatabaseServer",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Test/config/teardown.js",
    "importStyle": null,
    "description": "This module requires {@link module:../config/MemoryDataBaseServer}.",
    "lineNumber": 5,
    "unknown": [
      {
        "tagName": "@requires",
        "tagValue": "module:../config/MemoryDataBaseServer"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 149,
    "kind": "file",
    "name": "MakeMeDev/Test/config/testHelper.js",
    "content": "/**\n * This test file requires {@link module:./config/launcher}.\n * @requires module:./config/launcher\n */\nconst { request, url} = require(\"./launcher\")\n\n//region functions adding expects\n/** @function\n * @name expectExcept\n * Add Expects where response object has a key containing field defined by expectedKeys array.\n * If there should be some keys to avoid, we describe the exceptKeys, like for user's password .\n * @param {array} resKeys - an array containing keys from the response\n * @param {array} expectedKeys - an array containing expected keys (if adding username, we should find this field)\n * @param {array} [exceptKeys=[]]  - an array with exception keys, that we don't wan't to check\n */\nfunction expectExcept(resKeys, expectedKeys, exceptKeys=[]){\n    for (let key of expectedKeys){\n        if (!exceptKeys.includes(key)) {\n            expect(resKeys).toContain(key)\n        }\n    }\n}\n\n/** @function\n * @name expectedResponseOnUserUpsert\n * Add an Expect status 201, and check if the response body.success contains user & post keys\n * When updating a document.\n * @param {object} response - an object containing response's data\n */\nfunction expectedResponseOnUserUpsert(response){\n    expectedStatus(response, 201)\n    expectExcept(  Object.keys(getBodyRes(response)), [ \"user\", \"post\"] )\n}\n\n/** @function\n * @name expectedStatus\n * Add an Expect status defined by codeErr.\n * @param {object} response - an object containing response's data\n * @param {int} [status=200] - expected status code\n */\nfunction expectedStatus(response, status= 200){\n    expect(response.status).toBe(status);\n}\n\n//endregion\n\n//region other functions\n//region getter of object path (defined by our postModel architecture)\n/** @function\n * @name getBodyRes\n * Return the body from a response, use if a day we change response body structure.\n * This way, it will be easy to set the body content.\n * @param {object} response - response from api\n * @returns {SrvPoller.success|{post, user, token}|string|boolean|Event|null}\n */\nfunction getBodyRes(response){\n    try {\n        return response.body.success\n    }catch (e) {\n        return null\n    }\n}\n\n/** @function\n * @name getPostAt\n * Get a post from a response at a defined position thanks to index.\n * We supposed that the searched post is at index 0 from the response body, because\n * getPost request with search params return an array.\n * @param {object} res - response from api\n * @param {object} [index=2] - index of a post we want in the array of posts (answers)\n * @returns {object}\n */\nfunction getPostAt(res, index=2){\n    return getBodyRes(res)[0].post[index]\n}\n\n/** @function\n * @name getUserActivities\n * Get user activities from a response.\n * @param {object} res - response from api\n * @returns {object}\n */\nfunction getUserActivities(res){\n    return getBodyRes(res).user.activities\n}\n//endregion\n\n//region DB requests\n/** @function\n * @name getAllPostReq\n * Get a response from DB that get all post.\n * @returns {object}\n */\nasync function getAllPostReq(){\n    return await request.get(url + 'post?search=')\n}\n\n/** @function\n * @name requestPostVote\n * Post a request to DB to add a like or a dislike to a post. Need a token.\n * @param {object} user - user that add a like\n * @param {object} post - post receiving the like\n * @param {object} voteValue - value of the vote; 1 to like, -1 to dislike\n * @returns {object}\n */\nasync function requestPostVote(user, post, voteValue ){\n    return await prepareReqWithToken(user, url + 'post-vote')\n        .send({vote:voteValue, idPost:getBodyRes(post).post.post[0]._id})\n}\n//endregion\n\n\n/** @function\n * @name prepareReqWithToken\n * Prepare a request on a defined url that need a token authorization.\n * @param {object} user - user's data from a response\n * @param {object} completeUrl - the target url\n * @returns {*}\n */\nfunction prepareReqWithToken(user, completeUrl){\n    return request.post(completeUrl)\n        .set('Authorization', 'Bearer ' + user.body.token)\n}\n//endregion\n\nmodule.exports =\n    {expectExcept, expectedResponseOnUserUpsert, getBodyRes, expectedStatus, getPostAt, getUserActivities,\n     getAllPostReq, requestPostVote ,prepareReqWithToken}\n",
    "static": true,
    "longname": "/Users/gwenael/Documents/cours/L2/decembre_projWeb_makeMeDev/MakeMeDev/Test/config/testHelper.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 150,
    "kind": "variable",
    "name": "request",
    "memberof": "MakeMeDev/Test/config/testHelper.js",
    "static": true,
    "longname": "MakeMeDev/Test/config/testHelper.js~request",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Test/config/testHelper.js",
    "importStyle": null,
    "description": "This test file requires {@link module:./config/launcher}.",
    "lineNumber": 5,
    "unknown": [
      {
        "tagName": "@requires",
        "tagValue": "module:./config/launcher"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 151,
    "kind": "function",
    "name": "expectExcept",
    "memberof": "MakeMeDev/Test/config/testHelper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "MakeMeDev/Test/config/testHelper.js~expectExcept",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Test/config/testHelper.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 16,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "resKeys",
        "description": "an array containing keys from the response"
      },
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "expectedKeys",
        "description": "an array containing expected keys (if adding username, we should find this field)"
      },
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[]",
        "defaultRaw": [],
        "name": "exceptKeys",
        "description": "an array with exception keys, that we don't wan't to check"
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 152,
    "kind": "function",
    "name": "expectedResponseOnUserUpsert",
    "memberof": "MakeMeDev/Test/config/testHelper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "MakeMeDev/Test/config/testHelper.js~expectedResponseOnUserUpsert",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Test/config/testHelper.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 30,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "response",
        "description": "an object containing response's data"
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 153,
    "kind": "function",
    "name": "expectedStatus",
    "memberof": "MakeMeDev/Test/config/testHelper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "MakeMeDev/Test/config/testHelper.js~expectedStatus",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Test/config/testHelper.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 41,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "response",
        "description": "an object containing response's data"
      },
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "200",
        "defaultRaw": 200,
        "name": "status",
        "description": "expected status code"
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 154,
    "kind": "function",
    "name": "getBodyRes",
    "memberof": "MakeMeDev/Test/config/testHelper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "MakeMeDev/Test/config/testHelper.js~getBodyRes",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Test/config/testHelper.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 56,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{SrvPoller.success|{post, user, token}|string|boolean|Event|null}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "response",
        "description": "response from api"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SrvPoller.success",
        "{post, user, token}",
        "string",
        "boolean",
        "Event",
        "null"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 155,
    "kind": "function",
    "name": "getPostAt",
    "memberof": "MakeMeDev/Test/config/testHelper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "MakeMeDev/Test/config/testHelper.js~getPostAt",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Test/config/testHelper.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 73,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{object}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "response from api"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "2",
        "defaultRaw": 2,
        "name": "index",
        "description": "index of a post we want in the array of posts (answers)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 156,
    "kind": "function",
    "name": "getUserActivities",
    "memberof": "MakeMeDev/Test/config/testHelper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "MakeMeDev/Test/config/testHelper.js~getUserActivities",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Test/config/testHelper.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 83,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{object}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "response from api"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 157,
    "kind": "function",
    "name": "getAllPostReq",
    "memberof": "MakeMeDev/Test/config/testHelper.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "MakeMeDev/Test/config/testHelper.js~getAllPostReq",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Test/config/testHelper.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 94,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{object}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": ""
    },
    "params": [],
    "ignore": true
  },
  {
    "__docId__": 158,
    "kind": "function",
    "name": "requestPostVote",
    "memberof": "MakeMeDev/Test/config/testHelper.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "MakeMeDev/Test/config/testHelper.js~requestPostVote",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Test/config/testHelper.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 106,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{object}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "user",
        "description": "user that add a like"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "post",
        "description": "post receiving the like"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "voteValue",
        "description": "value of the vote; 1 to like, -1 to dislike"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 159,
    "kind": "function",
    "name": "prepareReqWithToken",
    "memberof": "MakeMeDev/Test/config/testHelper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "MakeMeDev/Test/config/testHelper.js~prepareReqWithToken",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Test/config/testHelper.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 120,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{*}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "user",
        "description": "user's data from a response"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "completeUrl",
        "description": "the target url"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 160,
    "kind": "file",
    "name": "MakeMeDev/Test/models.js",
    "content": "/**\n * A more than complete post.\n * @type {{post: {post: [{like: number, author: {avatar: string, creationDate: string, userId: string, pseudo: string}, dislike: number, function: string, totalLike: number, description: string, commentary: [{author: {avatar: string, creationDate: string, userId: string, pseudo: string}, commentary: string}]}, {like: number, author: {avatar: string, creationDate: string, userId: string, pseudo: string}, dislike: number, function: string, totalLike: number, description: string, commentary: [{author: {avatar: string, creationDate: string, userId: string, pseudo: string}, commentary: string}]}, {like: number, author: {avatar: string, creationDate: string, userId: string, pseudo: string}, dislike: number, function: string, totalLike: number, description: string, commentary: [{author: {avatar: string, creationDate: string, userId: string, pseudo: string}, commentary: string}]}], name: string, returns: [{name: string, description: string, type: string}, {name: string, description: string, type: string}], tag: [string], params: [{defaultValue: string, name: string, description: string, type: string}]}}}\n */\nexports.post = {\n    \"post\": {\n        \"name\": \"test\",\n        \"tag\" : ['test'],\n        \"params\" : [\n            {\n                \"name\" : \"num\",\n                \"type\" : \"int\",\n                \"description\" : \"num to multiply\",\n                \"defaultValue\" : \"10\"\n            }\n        ],\n        \"returns\" : [\n            {\n                \"name\" : \"result\",\n                \"type\" : \"int\",\n                \"description\" : \"result value\"\n                },\n                {\n                    \"name\" : \"result\",\n                    \"type\" : \"array\",\n                    \"description\" : \"result value\"\n                }\n            ],\n        \"post\" : [\n            {\n                \"author\" : {\n                    \"userId\": \"5fd688dec05dfb4a8eb64d1f\",\n                    \"creationDate\" : \"2020-10-10\",\n                    \"pseudo\" : \"test\",\n                    \"avatar\" : \"test\"\n                },\n                \"description\" : \"a function to multiply by 2 a num and returning the result\",\n                \"like\" : 2,\n                \"dislike\" : 2,\n                \"totalLike\" : 0,\n                \"function\" : \"multiply2x(num){return num*2}\",\n                \"commentary\" : [\n                    {\n                        \"author\" : {\n                            \"userId\": \"5fd688dec05dfb4a8eb64d1f\",\n                            \"creationDate\" : \"2020-10-10\",\n                            \"pseudo\" : \"test\",\n                            \"avatar\" : \"test\"\n                        },\n                        \"commentary\" : \"i really needed this, thx\"\n                    }\n                ]\n            },\n            {\n                \"author\" : {\n                    \"userId\": \"5fd688dec05dfb4a8eb64d1f\",\n                    \"creationDate\" : \"2020-10-10\",\n                    \"pseudo\" : \"test\",\n                    \"avatar\" : \"test\"\n                },\n                \"description\" : \"simplify your function\",\n                \"like\" : 4,\n                \"dislike\" : 0,\n                \"totalLike\" : 4,\n                \"function\" : \"multiply2x(num){return num+num}\",\n                \"commentary\" : [\n                    {\n                        \"author\" : {\n                            \"userId\": \"5fd688dec05dfb4a8eb64d1f\",\n                            \"creationDate\" : \"2020-10-10\",\n                            \"pseudo\" : \"test\",\n                            \"avatar\" : \"test\"\n                        },\n                        \"commentary\" : \"i really needed this, thx\"\n                    }\n                ]\n            },\n            {\n                \"author\" : {\n                    \"userId\": \"5fd688dec05dfb4a8eb64d1f\",\n                    \"creationDate\" : \"2020-10-10\",\n                    \"pseudo\" : \"test\",\n                    \"avatar\" : \"test\"\n                },\n                \"description\" : \"other function\",\n                \"like\" : 4,\n                \"dislike\" : 1,\n                \"totalLike\" : 4,\n                \"function\" : \"multiplyPow2(num){return num**2}\",\n                \"commentary\" : [\n                    {\n                        \"author\" : {\n                            \"userId\": \"5fd688dec05dfb4a8eb64d1f\",\n                            \"creationDate\" : \"2020-10-10\",\n                            \"pseudo\" : \"test\",\n                            \"avatar\" : \"test\"\n                        },\n                        \"commentary\" : \"i really needed this, thx\"\n                    }\n                ]\n            }\n        ]\n    }\n}\n\n/**\n * A minimal post object that can be added in DB when creating a post\n * @type {{post: {post: [{function: string, description: string}], name: string, returns: [{name: string, description: string, type: string}, {name: string, description: string, type: string}], tag: [string], params: [{defaultValue: string, name: string, description: string, type: string}]}}}\n */\nexports.minimalPost = {\n    \"post\": {\n        \"name\": \"test\",\n        \"tag\" : ['test'],\n        \"params\" : [\n            {\n                \"name\" : \"num\",\n                \"type\" : \"int\",\n                \"description\" : \"num to multiply\",\n                \"defaultValue\" : \"10\"\n            }\n        ],\n        \"returns\" : [\n            {\n                \"name\" : \"result\",\n                \"type\" : \"int\",\n                \"description\" : \"result value\"\n            },\n            {\n                \"name\" : \"result\",\n                \"type\" : \"array\",\n                \"description\" : \"result value\"\n            }\n        ],\n        \"post\" : [\n            {\n                \"description\" : \"a function to multiply by 2 a num and returning the result\",\n                \"function\" : \"multiply2x(num){return num*2}\",\n            }\n        ]\n    }\n}\n\n\n/**\n * A response post, that can be add to a post\n * @type {{function: string, description: string}}\n */\nexports.responsePost = {\n    \"description\": \"better solution\",\n    \"function\": \"multiply2x2x2x2x2(num){return num*2}\"\n}\n\n/**\n * A commentary post, that can be add to a post\n * @type {{commentary: string}}\n */\nexports.commentaryPost = {\n    \"commentary\" : \"first\"\n}\n\n/**\n * A user that can be inserted in database when sign up\n * @type {{user: {password: string, mail: string, pseudo: string}}}\n */\nexports.user = {\n    user: {\n        pseudo: 'userName',\n        mail: 'useremail@email.com',\n        password: '123123',\n    }\n}\n",
    "static": true,
    "longname": "/Users/gwenael/Documents/cours/L2/decembre_projWeb_makeMeDev/MakeMeDev/Test/models.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 161,
    "kind": "file",
    "name": "MakeMeDev/Test/post.test.js",
    "content": "/**\n * This test file requires {@link module:./config/launcher}, {@link module:./config/testHelper }  and\n * {@link module:./models}.\n * @requires module:./config/launcher\n * @requires module:./config/testHelper\n * @requires module:./models\n */\nconst { request, url} = require(\"./config/launcher\")\nconst { post, responsePost, commentaryPost, user} = require(\"./models\");\nconst { expectedResponseOnUserUpsert, expectExcept, getBodyRes, expectedStatus,\n        getPostAt, getUserActivities, getAllPostReq, requestPostVote,\n        prepareReqWithToken} = require(\"./config/testHelper\")\n\n/**\n * post object at position 0 from post model\n * @type {object} post0\n */\nconst post0 = post.post.post[0]\n\n/**\n * @todo Make lot of tests, to test each possible situation.\n * It will be sufficient for MVP.\n */\ndescribe('Post', () => {\n    let newUser;\n    let newPost;\n\n    beforeEach(async () => {\n        newUser = await request.post(url + \"users\").send(user)\n        newPost = await prepareReqWithToken(newUser, url + \"post\").send(post)\n    })\n\n    //region create post and search posts\n    /**\n     * @test {sendPost}\n     * Try to insert a new post document in mongoDB with good post object\n     */\n    it('should be able to create a post', async () => {\n        const response = newPost;\n        expect(Object.values(response.body).length).toEqual(2) //token & success\n        expectedResponseOnUserUpsert(response)\n        expectExcept(Object.keys(getBodyRes(response).user), Object.keys(user.user), [\"password\"])\n        expectExcept(Object.keys(getBodyRes(response).post), Object.keys(post.post))\n    });\n\n    /**\n     * @test {sendPost}\n     * Try to insert a new post document in mongoDB with incomplete post object\n     */\n    it('should not be able to create a post because bad post', async () => {\n        const response = await prepareReqWithToken(newUser, url + \"post\").send({post:{name:\"testBadPost\"}});\n        expectedStatus(response, 400)\n    });\n\n    /**\n     * @test {getPost}\n     * Try to search a post document in mongoDB with a correct request with search param\n     */\n    it('should be able to search a post', async () => {\n        const response = await request.get(url + 'post?search=test(int){int, ?} \"function to multiply\" [test]')\n        expect(typeof getBodyRes(response)).toBe(\"object\")\n        expect(getBodyRes(response)[0].name).toBe(\"test\")\n        expectedStatus(response)\n    });\n\n    /**\n     * @test {getPost}\n     * Try to search a post document in mongoDB with a correct request with postId param\n     */\n    it('should be able to search a post by id', async () => {\n        const response = await request.get(url + 'post?postId=' + getBodyRes(newPost).post._id)\n        expect(typeof getBodyRes(response)).toBe(\"object\")\n        expect(getBodyRes(response).name).toBe(\"test\")\n        expectedStatus(response)\n    });\n    //endregion\n\n    //region vote (like or dislike)\n    /**\n     * @test {sendVote}\n     * Try to like a post in mongoDB with a correct request if the user\n     * never have vote for the post\n     */\n    it('should be able to like a post if NEVER vote', async () => {\n        const response = await requestPostVote( newUser, newPost, 1)\n        const postCheck = await getAllPostReq()\n        expectedStatus(response, 201)\n\n        expect(getPostAt(postCheck).like).toBe(post0.like+1)\n        expect(getUserActivities(response).like).toContain(getBodyRes(newPost).post.post[0]._id)\n    });\n\n    /**\n     * @test {sendVote}\n     * Try to dislike a post in mongoDB with a correct request if the user\n     * never have vote for the post\n     */\n    it('should be able to dislike a post if NEVER vote', async () => {\n        const response = await requestPostVote( newUser, newPost, -1)\n        const postCheck = await getAllPostReq()\n        expectedStatus(response, 201)\n        expect(getPostAt(postCheck).dislike).toBe(post0.dislike+1)\n        expect(getUserActivities(response).dislike).toContain(getBodyRes(newPost).post.post[0]._id)\n    });\n\n    /**\n     * @test {sendVote}\n     * Try to like a post in mongoDB with corrects requests if the user\n     * already add a like for the post\n     */\n    it('should be able to update a vote into post if ALREADY vote same vote', async () => {\n        const response1 = await requestPostVote( newUser, newPost, 1)\n        const postCheck1 = await getAllPostReq()\n        const response2 = await requestPostVote( response1, newPost, 1)\n        const postCheck2 = await getAllPostReq()\n\n        expectedStatus(response1, 201)\n        expectedStatus(response2, 500)\n        expect(getPostAt(postCheck1).like).toBe(post0.like+1)\n        expect(getPostAt(postCheck2).like).toBe(post0.like+1)\n        expect(getUserActivities(response1).like).toContain(getBodyRes(newPost).post.post[0]._id)\n        expect(response2.body.error).toBe(\"Update vote failed\")\n    });\n\n    /**\n     * @test {sendVote}\n     * Try to dislike a post in mongoDB with corrects requests if the user\n     * already add a like for the post\n     */\n    it('should be able to dislike a post', async () => {\n        const response1 = await requestPostVote( newUser, newPost, 1)\n        const postCheck1 = await getAllPostReq()\n        const response2 = await requestPostVote( response1, newPost, -1)\n        const postCheck2 = await getAllPostReq()\n\n        expectedStatus(response1, 201)\n        expectedStatus(response2, 201)\n\n        expect(getPostAt(postCheck1).like).toBe(post0.like+1)\n        expect(getPostAt(postCheck1).dislike).toBe(post0.dislike)\n        expect(getPostAt(postCheck2).like).toBe(post0.like)\n        expect(getPostAt(postCheck2).dislike).toBe(post0.dislike+1)\n        expect(getUserActivities(response1).like).toContain(getBodyRes(newPost).post.post[0]._id)\n        expect(getUserActivities(response1).dislike.length).toBe(0)\n        expect(getUserActivities(response2).dislike).toContain(getBodyRes(newPost).post.post[0]._id)\n        expect(getUserActivities(response2).like.length).toBe(0)\n    });\n    //endregion\n\n    //region add a post (answer) in a created post\n    /**\n     * @test {addResponse}\n     * Try to send a response to a post in mongoDB with corrects requests\n     */\n    it('should be able to send response to a post', async () => {\n        const response = await prepareReqWithToken(newUser, url + \"post-add-response\")\n            .send({responsePost: responsePost, idPost:getBodyRes(newPost).post._id })\n        const postCheck = await getAllPostReq()\n        expectedStatus(response, 201)\n        expect(getPostAt(postCheck, 3).description).toBe(\"better solution\");\n        expect(getUserActivities(response).response).toContain(getPostAt(postCheck, 3)._id)\n    });\n    //endregion\n\n    //region add commentary to a post\n    /**\n     * @test {addCommentary}\n     * Try to send a commentary to a post in mongoDB with corrects requests\n     */\n    it('should be able to send a commentary to a post', async () => {\n        const response = await prepareReqWithToken(newUser, url + \"post-add-commentary\")\n            .send({commentaryPost: commentaryPost, idPost:getBodyRes(newPost).post.post[0]._id })\n        const postCheck = await getAllPostReq()\n        expectedStatus(response, 201)\n        expect(getPostAt(postCheck).commentary[1].commentary).toBe(\"first\");\n        expect(getUserActivities(response).commentary).toContain(getPostAt(postCheck).commentary[1]._id)\n    });\n\n    /**\n     * @test {addCommentary}\n     * Try to send commentaries to a post in mongoDB with corrects requests,\n     * each commentary date should be different.\n     */\n    it('should be able to send 2 commentary with 2 different timestamp', async () => {\n        const response1 = await prepareReqWithToken(newUser, url + \"post-add-commentary\")\n            .send({commentaryPost: commentaryPost, idPost:getBodyRes(newPost).post.post[0]._id })\n        const postCheck = await getAllPostReq()\n        const response2 = await prepareReqWithToken(response1, url + \"post-add-commentary\")\n            .send({commentaryPost: commentaryPost, idPost:getBodyRes(newPost).post.post[0]._id })\n        const postCheck2 = await getAllPostReq()\n        let comment = getPostAt(postCheck).commentary\n        let comment2 = getPostAt(postCheck2).commentary\n\n        expectedStatus(response1, 201)\n        expect(getPostAt(postCheck).commentary[1].commentary).toBe(\"first\");\n        expect(getUserActivities(response1).commentary).toContain(getPostAt(postCheck).commentary[1]._id)\n        expect(comment[comment.length-1].date< comment2[comment2.length-1].date).toBe(true)\n    });\n    //endregion\n\n});\n",
    "static": true,
    "longname": "/Users/gwenael/Documents/cours/L2/decembre_projWeb_makeMeDev/MakeMeDev/Test/post.test.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 162,
    "kind": "variable",
    "name": "request",
    "memberof": "MakeMeDev/Test/post.test.js",
    "static": true,
    "longname": "MakeMeDev/Test/post.test.js~request",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Test/post.test.js",
    "importStyle": null,
    "description": "This test file requires {@link module:./config/launcher}, {@link module:./config/testHelper }  and\n{@link module:./models}.",
    "lineNumber": 8,
    "unknown": [
      {
        "tagName": "@requires",
        "tagValue": "module:./config/launcher"
      },
      {
        "tagName": "@requires",
        "tagValue": "module:./config/testHelper"
      },
      {
        "tagName": "@requires",
        "tagValue": "module:./models"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 163,
    "kind": "variable",
    "name": "post",
    "memberof": "MakeMeDev/Test/post.test.js",
    "static": true,
    "longname": "MakeMeDev/Test/post.test.js~post",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Test/post.test.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 164,
    "kind": "variable",
    "name": "expectedResponseOnUserUpsert",
    "memberof": "MakeMeDev/Test/post.test.js",
    "static": true,
    "longname": "MakeMeDev/Test/post.test.js~expectedResponseOnUserUpsert",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Test/post.test.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 165,
    "kind": "variable",
    "name": "post0",
    "memberof": "MakeMeDev/Test/post.test.js",
    "static": true,
    "longname": "MakeMeDev/Test/post.test.js~post0",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Test/post.test.js",
    "importStyle": null,
    "description": "post object at position 0 from post model",
    "lineNumber": 18,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 166,
    "kind": "file",
    "name": "MakeMeDev/Test/serveur.test.js",
    "content": "/**\n * This test file requires {@link module:./config/launcher} and\n * {@link module:./models}.\n * @requires module:./config/launcher\n * @requires module:./models\n */\nconst { request, url} = require(\"./config/launcher\")\nconst { rateLimiterConfig } = require('../Tools/rateLimiter');\n\n/**\n * @todo Make lot of tests, to test each possible situation\n */\ndescribe('Post', () => {\n\n    /**\n     * @test {getPost}\n     * Try to get post more than the request limit.\n     * It test our request limiter, if it respond with a 429 status.\n     * It also test if we get result at each request (seems that sometimes\n     * a request could return nothing).\n     */\n    it('should return that user launch to many request', async () => {\n        let arrBool = []\n        for (let nbReq = 0; nbReq<rateLimiterConfig.max+5; nbReq++){\n            if (nbReq>rateLimiterConfig.max){\n                let resp = await request.get(url + 'post?search=test(int){int, ?} \"function to multiply\" #test#')\n                expect(resp.status).toBe(429)\n            }\n            else{\n                let resp =await request.get(url + 'post?search=test(int){int, ?} \"function to multiply\" #test#')\n                arrBool.push(Object.keys(resp.body))\n            }\n        }\n        console.log(arrBool)\n    });\n\n});\n",
    "static": true,
    "longname": "/Users/gwenael/Documents/cours/L2/decembre_projWeb_makeMeDev/MakeMeDev/Test/serveur.test.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 167,
    "kind": "variable",
    "name": "request",
    "memberof": "MakeMeDev/Test/serveur.test.js",
    "static": true,
    "longname": "MakeMeDev/Test/serveur.test.js~request",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Test/serveur.test.js",
    "importStyle": null,
    "description": "This test file requires {@link module:./config/launcher} and\n{@link module:./models}.",
    "lineNumber": 7,
    "unknown": [
      {
        "tagName": "@requires",
        "tagValue": "module:./config/launcher"
      },
      {
        "tagName": "@requires",
        "tagValue": "module:./models"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 168,
    "kind": "variable",
    "name": "rateLimiterConfig",
    "memberof": "MakeMeDev/Test/serveur.test.js",
    "static": true,
    "longname": "MakeMeDev/Test/serveur.test.js~rateLimiterConfig",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Test/serveur.test.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 169,
    "kind": "file",
    "name": "MakeMeDev/Test/user.test.js",
    "content": "/**\n * This test file requires {@link module:./config/launcher}, {@link module:./config/testHelper }  and\n * {@link module:./models}.\n * @requires module:./config/launcher\n * @requires module:./config/testHelper\n * @requires module:./models\n */\nconst {request, url} = require(\"./config/launcher\")\nconst { prepareReqWithToken, expectedStatus, getBodyRes, expectExcept} = require(\"./config/testHelper\")\nconst { user } = require(\"./models\");\n\n/**\n * user pseudo from the model\n * @type {string} userPseudo\n */\nconst userPseudo= user.user.pseudo\n\n/**\n * user password from the model\n * @type {string} userPassword\n */\nconst userPassword= user.user.password\n\n/**\n * user object containing pseudo and password from the model\n * to test login\n * @type {string} userPseudo\n */\nconst userSignIn = {\n    user:{\n        login: userPseudo,\n        password: userPassword,\n    }\n}\n\n/**\n * @todo Make lot of tests, to test each possible situation.\n * It will be sufficient for MVP.\n */\ndescribe('User', () => {\n    let newUser;\n    beforeEach(async () => {\n        newUser = await request.post(url + \"users\").send(user)\n    })\n\n    //region sign up and login user\n    /**\n     * @test {signUp}\n     * Try to insert a new user document in mongoDB with correct user object.\n     */\n    it('should be able to create user', async () => {\n        const response = newUser;\n        expectedStatus(response, 201)\n        expect(Object.values(response.body).length).toEqual(2)\n    });\n\n    /**\n     * @test {signIn}\n     * Try to login a user with correct object {password, pseudo}.\n     */\n    it('should be able to get user', async () => {\n        const response = await request.post(url + \"user-signin\").send(userSignIn)\n        expectedStatus(response, 200)\n        expect(getBodyRes(response).pseudo).toBe(userPseudo)\n    });\n\n    /**\n     * @test {signIn}\n     * Try to login a user with bad object {password, pseudo}.\n     */\n    it('should not be able to get user', async () => {\n        const response = await request.post(url + \"user-signin\").send({\n            user:{\n                login: userPseudo,\n                password: \"testpassword\",\n            }\n        })\n        expectedStatus(response, 404)\n    });\n    //endregion\n\n\n    //region update user\n    /**\n     * @test {updateUser}\n     * Try to update a user with new pseudo, mail and avatar object\n     * thanks to its id.\n     */\n    it('should be able to update user', async () => {\n        const user = await request.post(url + \"user-signin\").send(userSignIn)\n        const userData = {\n            user: {\n                id: user.body.success._id,\n                pseudo: 'test',\n                mail: 'test@test.com',\n                avatar: 'test'\n            }\n        }\n        const response = await prepareReqWithToken(user,url + \"update-users\" )\n            .send(userData);\n        expectedStatus(response, 201)\n        expect(getBodyRes(response).pseudo).toBe(userData.user.pseudo)\n        expect(getBodyRes(response).mail).toBe(userData.user.mail)\n        expect(getBodyRes(response).avatar).toBe(userData.user.avatar)\n        expectExcept(  Object.keys(getBodyRes(response)), Object.keys(userData.user), [\"id\"] )\n\n    });\n\n    /**\n     * @test {updateUser}\n     * Try to update a user with new pseudo, mail and avatar object\n     * thanks to a bad user id.\n     */\n    it('should be able to update user because use id from token', async () => {\n        const user = await request.post(url + \"user-signin\").send(userSignIn)\n        const userData = {\n            user: {\n                id: \"1\",\n                pseudo: 'test',\n                mail: 'test@test.com',\n                avatar: 'test'\n            }\n        }\n        const response = await prepareReqWithToken(user,url + \"update-users\" )\n            .send(userData);\n        expectedStatus(response, 201)\n        expect(getBodyRes(response).pseudo).toBe(userData.user.pseudo)\n        expect(getBodyRes(response).mail).toBe(userData.user.mail)\n        expect(getBodyRes(response).avatar).toBe(userData.user.avatar)\n        expectExcept(  Object.keys(getBodyRes(response)), Object.keys(userData.user), [\"id\"] )\n\n    });\n\n\n    /**\n     * @test {updateUser}\n     * Try to update a user with new mail and avatar object\n     */\n    it('should not be able to update user without crash', async () => {\n        const user = await request.post(url + \"user-signin\").send(userSignIn)\n        const userData = {\n            user: {\n                mail: 'test@test.com',\n                avatar: 'test'\n            }\n        }\n        const response = await prepareReqWithToken(user,url + \"update-users\" )\n            .send(userData);\n        expectedStatus(response, 201)\n        expect(getBodyRes(response).pseudo).toBe(userPseudo)\n        expect(getBodyRes(response).mail).toBe(userData.user.mail)\n        expect(getBodyRes(response).avatar).toBe(userData.user.avatar)\n        expectExcept(  Object.keys(getBodyRes(response)), Object.keys(userData.user), [\"id\"] )\n\n    });\n    //endregion\n\n});\n",
    "static": true,
    "longname": "/Users/gwenael/Documents/cours/L2/decembre_projWeb_makeMeDev/MakeMeDev/Test/user.test.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 170,
    "kind": "variable",
    "name": "request",
    "memberof": "MakeMeDev/Test/user.test.js",
    "static": true,
    "longname": "MakeMeDev/Test/user.test.js~request",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Test/user.test.js",
    "importStyle": null,
    "description": "This test file requires {@link module:./config/launcher}, {@link module:./config/testHelper }  and\n{@link module:./models}.",
    "lineNumber": 8,
    "unknown": [
      {
        "tagName": "@requires",
        "tagValue": "module:./config/launcher"
      },
      {
        "tagName": "@requires",
        "tagValue": "module:./config/testHelper"
      },
      {
        "tagName": "@requires",
        "tagValue": "module:./models"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 171,
    "kind": "variable",
    "name": "prepareReqWithToken",
    "memberof": "MakeMeDev/Test/user.test.js",
    "static": true,
    "longname": "MakeMeDev/Test/user.test.js~prepareReqWithToken",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Test/user.test.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 172,
    "kind": "variable",
    "name": "user",
    "memberof": "MakeMeDev/Test/user.test.js",
    "static": true,
    "longname": "MakeMeDev/Test/user.test.js~user",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Test/user.test.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 173,
    "kind": "variable",
    "name": "userPseudo",
    "memberof": "MakeMeDev/Test/user.test.js",
    "static": true,
    "longname": "MakeMeDev/Test/user.test.js~userPseudo",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Test/user.test.js",
    "importStyle": null,
    "description": "user pseudo from the model",
    "lineNumber": 16,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 174,
    "kind": "variable",
    "name": "userPassword",
    "memberof": "MakeMeDev/Test/user.test.js",
    "static": true,
    "longname": "MakeMeDev/Test/user.test.js~userPassword",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Test/user.test.js",
    "importStyle": null,
    "description": "user password from the model",
    "lineNumber": 22,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 175,
    "kind": "variable",
    "name": "userSignIn",
    "memberof": "MakeMeDev/Test/user.test.js",
    "static": true,
    "longname": "MakeMeDev/Test/user.test.js~userSignIn",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Test/user.test.js",
    "importStyle": null,
    "description": "user object containing pseudo and password from the model\nto test login",
    "lineNumber": 29,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 176,
    "kind": "file",
    "name": "MakeMeDev/Tools/Common/countOccurrence.js",
    "content": "/** @function\n * @name countOccurrencesFromArray\n * Count occurrence of string in an array and return an object\n * with each string as key and occurrence as value\n * @param {array} arr - The array to analyse\n * @returns {object} - an object containing strings occurrences\n */\nconst countOccurrencesFromArray = arr => arr.reduce((prev, curr) => (prev[curr] = ++prev[curr] || 1, prev), {});\n\nmodule.exports = {countOccurrencesFromArray}\n",
    "static": true,
    "longname": "/Users/gwenael/Documents/cours/L2/decembre_projWeb_makeMeDev/MakeMeDev/Tools/Common/countOccurrence.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 177,
    "kind": "function",
    "name": "countOccurrencesFromArray",
    "memberof": "MakeMeDev/Tools/Common/countOccurrence.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "MakeMeDev/Tools/Common/countOccurrence.js~countOccurrencesFromArray",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Tools/Common/countOccurrence.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{object} - an object containing strings occurrences"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "arr",
        "description": "The array to analyse"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "an object containing strings occurrences"
    },
    "ignore": true
  },
  {
    "__docId__": 178,
    "kind": "file",
    "name": "MakeMeDev/Tools/Common/regex.js",
    "content": "/**\n * A list of regex we can use to extract search criteria from a simple string\n * like function name, params, returns, description or tags\n * @type {{functionName: RegExp, description: RegExp, returns: RegExp, params: RegExp, tags: RegExp}}\n */\nconst searchRegex = {\n    functionName: /^[a-z]+[a-zA-Z0-9]+/,\n    params: /(?<=\\()(.*)(?=\\))/g,\n    returns : /(?<=\\{)(.*)(?=\\})/g,\n    description : /(?<=\\\")(.*)(?=\\\")/g,\n    tags : /(?<=\\[)(.*)(?=\\])/g,\n}\n\nmodule.exports = {searchRegex}\n",
    "static": true,
    "longname": "/Users/gwenael/Documents/cours/L2/decembre_projWeb_makeMeDev/MakeMeDev/Tools/Common/regex.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 179,
    "kind": "variable",
    "name": "searchRegex",
    "memberof": "MakeMeDev/Tools/Common/regex.js",
    "static": true,
    "longname": "MakeMeDev/Tools/Common/regex.js~searchRegex",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Tools/Common/regex.js",
    "importStyle": null,
    "description": "A list of regex we can use to extract search criteria from a simple string\nlike function name, params, returns, description or tags",
    "lineNumber": 6,
    "type": {
      "nullable": null,
      "types": [
        "{functionName: RegExp, description: RegExp, returns: RegExp, params: RegExp, tags: RegExp}"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 180,
    "kind": "file",
    "name": "MakeMeDev/Tools/Common/stringOperation.js",
    "content": "/** @function\n * @name getStringDelimitedArea\n * Get a string in a delimited area defined by first and last delimiter\n * If the second delimiter isn't found in string, return a string from first delimiter to end\n * @param {string} str - string to analyse\n * @param {string} firstDelimiter - first delimiter used  to get the result\n * @param {string} lastDelimiter - last delimiter used to get the result\n * @returns {string|null}\n */\nfunction getStringDelimitedArea(str, firstDelimiter, lastDelimiter) {\n    return (str.includes(firstDelimiter) && str.includes(lastDelimiter)) ?\n        str.substring(str.lastIndexOf(firstDelimiter) + 1, str.lastIndexOf(lastDelimiter)) : null;\n}\n\n/** @function\n * @name getSearchValue\n * Get a string in a delimited area defined by a delimiter\n * If there is only one delimiter, return null\n * @param {string} str - string to analyse\n * @param {string} delimiter - delimiter used to get the result\n * @returns {string|null}\n */\nfunction getSearchValue(str, delimiter){\n    let value = []\n    let countCharacter = 0;\n    str.split(\"\").map((searchCharacter, index) => {\n        if (searchCharacter === delimiter) {\n            countCharacter ++\n            value.push(index)\n        }\n    })\n    return countCharacter === 2 ? str.substring(value[0] + 1, value[1]) : null\n}\n\n/** @function\n * @name filterDelSpaces\n * delete all spaces in a string\n * @param {string} string - string that won't have spaces anymore\n * @returns {*|void}\n */\nfunction filterDelSpaces(string){\n    return string.replace(/\\s/g, '')\n}\n\nmodule.exports = {getStringDelimitedArea, getSearchValue, filterDelSpaces}\n",
    "static": true,
    "longname": "/Users/gwenael/Documents/cours/L2/decembre_projWeb_makeMeDev/MakeMeDev/Tools/Common/stringOperation.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 181,
    "kind": "function",
    "name": "getStringDelimitedArea",
    "memberof": "MakeMeDev/Tools/Common/stringOperation.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "MakeMeDev/Tools/Common/stringOperation.js~getStringDelimitedArea",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Tools/Common/stringOperation.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{string|null}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": "string to analyse"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "firstDelimiter",
        "description": "first delimiter used  to get the result"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "lastDelimiter",
        "description": "last delimiter used to get the result"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string",
        "null"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 182,
    "kind": "function",
    "name": "getSearchValue",
    "memberof": "MakeMeDev/Tools/Common/stringOperation.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "MakeMeDev/Tools/Common/stringOperation.js~getSearchValue",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Tools/Common/stringOperation.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{string|null}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": "string to analyse"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "delimiter",
        "description": "delimiter used to get the result"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string",
        "null"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 183,
    "kind": "function",
    "name": "filterDelSpaces",
    "memberof": "MakeMeDev/Tools/Common/stringOperation.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "MakeMeDev/Tools/Common/stringOperation.js~filterDelSpaces",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Tools/Common/stringOperation.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 41,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{*|void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "string",
        "description": "string that won't have spaces anymore"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*",
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 184,
    "kind": "file",
    "name": "MakeMeDev/Tools/Common/undefinedControl.js",
    "content": "/** @function\n * @name isDefinedAndNotNull\n * Check if our value data is defined and not null\n * @param {*} value - a value to check\n * @returns {boolean}\n */\nfunction isDefinedAndNotNull(value){\n    return value !==null && value !==undefined\n}\n\n/** @function\n * @name isUndefinedOrNull\n * Check if a value is undefined or null\n * @param {*} value - a value to check\n * @returns {boolean}\n */\nfunction isUndefinedOrNull(value){\n    return value ===null || value ===undefined\n}\n\nmodule.exports = {isDefinedAndNotNull, isUndefinedOrNull}\n",
    "static": true,
    "longname": "/Users/gwenael/Documents/cours/L2/decembre_projWeb_makeMeDev/MakeMeDev/Tools/Common/undefinedControl.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 185,
    "kind": "function",
    "name": "isDefinedAndNotNull",
    "memberof": "MakeMeDev/Tools/Common/undefinedControl.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "MakeMeDev/Tools/Common/undefinedControl.js~isDefinedAndNotNull",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Tools/Common/undefinedControl.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "a value to check"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 186,
    "kind": "function",
    "name": "isUndefinedOrNull",
    "memberof": "MakeMeDev/Tools/Common/undefinedControl.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "MakeMeDev/Tools/Common/undefinedControl.js~isUndefinedOrNull",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Tools/Common/undefinedControl.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 17,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "a value to check"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 187,
    "kind": "file",
    "name": "MakeMeDev/Tools/Controller/controllerHelper.js",
    "content": "/** @function\n * @name emptyRequest\n * Check if our request data isn't empty before continuing other actions\n * @param {object} reqData - data from our request to check\n * @returns {{code: number, body: {error: string}}}\n */\nfunction emptyRequest (reqData){\n    if (reqData === undefined || Object.keys(reqData).length === 0 && reqData.constructor === Object) {\n        return {code: 400, body: {error: \"Requete vide\"}}\n    }\n}\n\nmodule.exports = {emptyRequest}\n",
    "static": true,
    "longname": "/Users/gwenael/Documents/cours/L2/decembre_projWeb_makeMeDev/MakeMeDev/Tools/Controller/controllerHelper.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 188,
    "kind": "function",
    "name": "emptyRequest",
    "memberof": "MakeMeDev/Tools/Controller/controllerHelper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "MakeMeDev/Tools/Controller/controllerHelper.js~emptyRequest",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Tools/Controller/controllerHelper.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{{code: number, body: {error: string}}}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "reqData",
        "description": "data from our request to check"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{code: number, body: {error: string}}"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 189,
    "kind": "file",
    "name": "MakeMeDev/Tools/DB/database.js",
    "content": "const mongoose = require('mongoose');\nrequire('dotenv').config();\n\n\n/** @function\n * @name connect\n * Connect to DB for test or production\n */\nfunction connect() {\n    if (mongoose.connection.readyState === 0) {\n        mongoose.connect((process.env.NODE_ENV === 'test' ? global.__DB_URL__ :process.env.URL_MONGO),\n            {\n                useUnifiedTopology: true,\n                useNewUrlParser: true,\n                useCreateIndex: true,\n                useFindAndModify: false\n            });\n        const db = mongoose.connection;\n        db.on('error', console.error.bind(console, 'Erreur lors de la connexion'));\n        db.once('open', function (){\n            console.log(\"Connexion à la base OK\");\n        });\n    }\n}\n\n/** @function\n * @name truncate\n */\nfunction truncate()  {\n    if (mongoose.connection.readyState !== 0) {\n        const { collections } = mongoose.connection;\n\n        const promises = Object.keys(collections).map(collection =>\n            mongoose.connection.collection(collection).deleteMany({})\n        );\n\n         Promise.all(promises);\n    }\n}\n\n/** @function\n * @name disconnect\n */\nfunction disconnect() {\n    if (mongoose.connection.readyState !== 0) {\n        mongoose.disconnect();\n    }\n}\n\nmodule.exports = {\n    connect,\n    truncate,\n    disconnect,\n};\n",
    "static": true,
    "longname": "/Users/gwenael/Documents/cours/L2/decembre_projWeb_makeMeDev/MakeMeDev/Tools/DB/database.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 190,
    "kind": "variable",
    "name": "mongoose",
    "memberof": "MakeMeDev/Tools/DB/database.js",
    "static": true,
    "longname": "MakeMeDev/Tools/DB/database.js~mongoose",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Tools/DB/database.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 191,
    "kind": "function",
    "name": "connect",
    "memberof": "MakeMeDev/Tools/DB/database.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "MakeMeDev/Tools/DB/database.js~connect",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Tools/DB/database.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 192,
    "kind": "function",
    "name": "truncate",
    "memberof": "MakeMeDev/Tools/DB/database.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "MakeMeDev/Tools/DB/database.js~truncate",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Tools/DB/database.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 29,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 193,
    "kind": "function",
    "name": "disconnect",
    "memberof": "MakeMeDev/Tools/DB/database.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "MakeMeDev/Tools/DB/database.js~disconnect",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Tools/DB/database.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 44,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 194,
    "kind": "file",
    "name": "MakeMeDev/Tools/DB/postHelper.js",
    "content": "/** @function\n * @name getLastCommentaryId\n * Get last commentary id for a post matching with id in params\n * @param {object} result - a result from DB\n * @param {string} postId - post'id\n * @returns {null|*}\n */\nfunction getLastCommentaryId(result, postId) {\n    try {\n        let commentaryId;\n        for (let el of result.post) {\n            if (JSON.stringify(el._id) === JSON.stringify(postId)) {\n                commentaryId = el.commentary[el.commentary.length - 1]._id\n                break\n            }\n        }\n        return commentaryId;\n    }catch (e) {\n        return null\n    }\n}\n\n/** @function\n * @name getLastResponseId\n * get last response id from a result post object\n * @param {object} result - a result from DB\n * @returns {*}\n */\nfunction getLastResponseId(result) {\n    return result.post[result.post.length - 1]._id;\n}\n\nmodule.exports = {getLastCommentaryId, getLastResponseId}\n",
    "static": true,
    "longname": "/Users/gwenael/Documents/cours/L2/decembre_projWeb_makeMeDev/MakeMeDev/Tools/DB/postHelper.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 195,
    "kind": "function",
    "name": "getLastCommentaryId",
    "memberof": "MakeMeDev/Tools/DB/postHelper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "MakeMeDev/Tools/DB/postHelper.js~getLastCommentaryId",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Tools/DB/postHelper.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{null|*}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "result",
        "description": "a result from DB"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "postId",
        "description": "post'id"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "null",
        "*"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 196,
    "kind": "function",
    "name": "getLastResponseId",
    "memberof": "MakeMeDev/Tools/DB/postHelper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "MakeMeDev/Tools/DB/postHelper.js~getLastResponseId",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Tools/DB/postHelper.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 29,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{*}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "result",
        "description": "a result from DB"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 197,
    "kind": "file",
    "name": "MakeMeDev/Tools/DB/postPipeline.js",
    "content": "/**\n * This file requires {@link module:../Common/countOccurrence}, {@link module:../Common/stringOperation}.\n * @requires module:../Common/countOccurrence\n * @requires module:../Common/stringOperation\n */\nconst {countOccurrencesFromArray} = require(\"../Common/countOccurrence\");\nconst {filterDelSpaces} = require(\"../Common/stringOperation\");\n\n//region exported\n\n/** @function\n * @name getPipeline\n * Get a complex Pipeline to search all function depending on data search criteria\n * @param {object} data - post's data\n * @returns {[]}\n */\nfunction getPipeline(data) {\n    return getNameQuery(data)\n        .concat(getParamTypeQuery(data), getReturnTypeQuery(data), getDescriptionQuery(data), getTagQuery(data));\n}\n//endregion\n\n//region pipeline back\n\n//region query for string's array\n\n/** @function\n * @name getMatchFromStringArray\n * Create a $match for a defined field from database containing an array\n * Check if another array contains some or all elements of this DB field\n * @param {string|null} data - an array containing strings, or null (then return empty array)\n * @param {string} dbField - field name from DB\n * @returns {[]|[{$match: {field:{$all:data}}}]}\n */\nfunction getMatchFromStringArray(data, dbField) {\n    if (data !== null) {\n        let array = (filterDelSpaces(data).split(\",\"))\n        if (array.length > 0 && data!==\"\") {\n            return [{$match: {[dbField]: {$all: array}}}]\n        }\n        else if (data===\"\") {\n            return [{$match: {[dbField]:{$size: 0}}}]\n        }\n    }\n    return []\n}\n\n/** @function\n * @name getTagQuery\n * Get a query to search all post's tags in DB\n * @param {object} data - post's data\n * @returns {*[]|{$match: {field: {$all: data}}}[]}\n */\nfunction getTagQuery(data) {\n    return getMatchFromStringArray(data.tag, \"tag\")\n}\n\n//endregion\n\n//region query for returns/params array\n/** @function\n * @name getTabParamOrReturn\n * A complex function, used to prepare a mongo filter for returns or params types.\n * @param {object} data - post's data\n * @param {string} dbFieldNameCount - field name that contain the count of each types\n * @param {string} paramsOrResults - array field name from DB that contains type (returns or params)\n * @returns {unknown[]|[]|{$match: {}}[]}\n */\nfunction getTabParamOrReturn(data, dbFieldNameCount, paramsOrResults) {\n    let paramOrResultTypeQuery = []\n    if (data[dbFieldNameCount] !== null) {\n        let dataSearch = (filterDelSpaces(data[dbFieldNameCount]).split(\",\"))\n        let occurrences = countOccurrencesFromArray(dataSearch)\n        if (dataSearch.length > 0) {\n            return dataSearch.map(result => {\n                //search the number of ? indicated in request\n                if (result === \"?\") {\n                    return {\n                        $match: {\n                            [paramsOrResults]: {$elemMatch: {type: {$regex: \"\"}}, $size: dataSearch.length}\n                        }\n                    }\n                } else if (dataSearch.length === 1 && result === \"\") {\n                    return {$match: {[paramsOrResults]: {$size: 0}}}\n                } //else search all param by params type and numbers of these types\n                else if (dataSearch.length >= 1) {\n                    return {\n                        $match: {\n                            [paramsOrResults]: {$elemMatch: {type: result}, $size: dataSearch.length},\n                            [dbFieldNameCount + \".\" + result]: {\n                                $lte: (occurrences[\"?\"] ? occurrences[\"?\"] : 0) + occurrences[result],\n                                $gte: occurrences[result]\n                            }\n                        }\n                    }\n                }\n                // else, there isn't any params in request, we search by other criteria\n                else {\n                    return {$match: {[paramsOrResults]: {$elemMatch: {type: {$regex: \"\"}}}}}\n                }\n            })\n        } else if (dataSearch.length === 0) {\n            return [{$match: {[paramsOrResults]: {$size: dataSearch.length}}}]\n        }\n    }\n    return paramOrResultTypeQuery;\n}\n\n/** @function\n * @name getParamTypeQuery\n * Get a query to search function param's types in DB\n * @param {object} data - post's data\n * @returns {{$match: {params: {$size: number}}}[]|unknown[]|[]}\n */\nfunction getParamTypeQuery(data) {\n    return getTabParamOrReturn(data, \"paramsTypes\", \"params\");\n}\n\n/** @function\n * @name getReturnTypeQuery\n * Get a query to search function return's types in DB\n * @param {object} data - post's data\n * @returns {*[]|{$match: {field: {$regex: data}}}[]}\n */\nfunction getReturnTypeQuery(data) {\n    return getTabParamOrReturn(data, \"returnsTypes\", \"returns\");\n}\n//endregion\n\n//region query for string\n/** @function\n * @name getDescriptionQuery\n * Get a query to search function's description in DB\n * @param {object} data - post's data\n * @returns {*[]|{$match: {field: {$regex: data}}}[]}\n */\nfunction getDescriptionQuery(data) {\n    return getMatchStringRegex (data.description, \"post.description\")\n}\n\n/** @function\n * @name getNameQuery\n * Get a query to search function's name in DB\n * @param {object} data - post's data\n * @returns {*[]|{$match: {field: {$regex: data}}}[]}\n */\nfunction getNameQuery(data) {\n    return getMatchStringRegex (data.functionName, \"name\")\n}\n\n/** @function\n * @name getMatchStringRegex\n * Return a $match filter for a defined DB field\n * @param {string|null} data - a string that will be used in regex, if null return an empty array\n * @param {string} dbField - DB field from where to match a value\n * @returns {*[]|{$match: {field: {$regex:data}}}[]}\n */\nfunction getMatchStringRegex(data, dbField){\n    if (data !== null) {\n        return [{$match: {[dbField]: {$regex: data}}}];\n    }\n    return []\n}\n//endregion\n\n//endregion\n\n\nmodule.exports = {getPipeline}\n",
    "static": true,
    "longname": "/Users/gwenael/Documents/cours/L2/decembre_projWeb_makeMeDev/MakeMeDev/Tools/DB/postPipeline.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 198,
    "kind": "variable",
    "name": "countOccurrencesFromArray",
    "memberof": "MakeMeDev/Tools/DB/postPipeline.js",
    "static": true,
    "longname": "MakeMeDev/Tools/DB/postPipeline.js~countOccurrencesFromArray",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Tools/DB/postPipeline.js",
    "importStyle": null,
    "description": "This file requires {@link module:../Common/countOccurrence}, {@link module:../Common/stringOperation}.",
    "lineNumber": 6,
    "unknown": [
      {
        "tagName": "@requires",
        "tagValue": "module:../Common/countOccurrence"
      },
      {
        "tagName": "@requires",
        "tagValue": "module:../Common/stringOperation"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 199,
    "kind": "variable",
    "name": "filterDelSpaces",
    "memberof": "MakeMeDev/Tools/DB/postPipeline.js",
    "static": true,
    "longname": "MakeMeDev/Tools/DB/postPipeline.js~filterDelSpaces",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Tools/DB/postPipeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 200,
    "kind": "function",
    "name": "getPipeline",
    "memberof": "MakeMeDev/Tools/DB/postPipeline.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "MakeMeDev/Tools/DB/postPipeline.js~getPipeline",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Tools/DB/postPipeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 17,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{[]}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "post's data"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "[]"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 201,
    "kind": "function",
    "name": "getMatchFromStringArray",
    "memberof": "MakeMeDev/Tools/DB/postPipeline.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "MakeMeDev/Tools/DB/postPipeline.js~getMatchFromStringArray",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Tools/DB/postPipeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 35,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{[]|[{$match: {field:{$all:data}}}]}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "null"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "an array containing strings, or null (then return empty array)"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "dbField",
        "description": "field name from DB"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "[]",
        "[{$match: {field:{$all:data}}}]"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 202,
    "kind": "function",
    "name": "getTagQuery",
    "memberof": "MakeMeDev/Tools/DB/postPipeline.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "MakeMeDev/Tools/DB/postPipeline.js~getTagQuery",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Tools/DB/postPipeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 54,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{*[]|{$match: {field: {$all: data}}}[]}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "post's data"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*[]",
        "{$match: {field: {$all: data}}}[]"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 203,
    "kind": "function",
    "name": "getTabParamOrReturn",
    "memberof": "MakeMeDev/Tools/DB/postPipeline.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "MakeMeDev/Tools/DB/postPipeline.js~getTabParamOrReturn",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Tools/DB/postPipeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 69,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{unknown[]|[]|{$match: {}}[]}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "post's data"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "dbFieldNameCount",
        "description": "field name that contain the count of each types"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "paramsOrResults",
        "description": "array field name from DB that contains type (returns or params)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "unknown[]",
        "[]",
        "{$match: {}}[]"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 204,
    "kind": "function",
    "name": "getParamTypeQuery",
    "memberof": "MakeMeDev/Tools/DB/postPipeline.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "MakeMeDev/Tools/DB/postPipeline.js~getParamTypeQuery",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Tools/DB/postPipeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 115,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{{$match: {params: {$size: number}}}[]|unknown[]|[]}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "post's data"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{$match: {params: {$size: number}}}[]|unknown[]|[]"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 205,
    "kind": "function",
    "name": "getReturnTypeQuery",
    "memberof": "MakeMeDev/Tools/DB/postPipeline.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "MakeMeDev/Tools/DB/postPipeline.js~getReturnTypeQuery",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Tools/DB/postPipeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 125,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{*[]|{$match: {field: {$regex: data}}}[]}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "post's data"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*[]",
        "{$match: {field: {$regex: data}}}[]"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 206,
    "kind": "function",
    "name": "getDescriptionQuery",
    "memberof": "MakeMeDev/Tools/DB/postPipeline.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "MakeMeDev/Tools/DB/postPipeline.js~getDescriptionQuery",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Tools/DB/postPipeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 137,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{*[]|{$match: {field: {$regex: data}}}[]}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "post's data"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*[]",
        "{$match: {field: {$regex: data}}}[]"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 207,
    "kind": "function",
    "name": "getNameQuery",
    "memberof": "MakeMeDev/Tools/DB/postPipeline.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "MakeMeDev/Tools/DB/postPipeline.js~getNameQuery",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Tools/DB/postPipeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 147,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{*[]|{$match: {field: {$regex: data}}}[]}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "post's data"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*[]",
        "{$match: {field: {$regex: data}}}[]"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 208,
    "kind": "function",
    "name": "getMatchStringRegex",
    "memberof": "MakeMeDev/Tools/DB/postPipeline.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "MakeMeDev/Tools/DB/postPipeline.js~getMatchStringRegex",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Tools/DB/postPipeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 158,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{*[]|{$match: {field: {$regex:data}}}[]}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "null"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "a string that will be used in regex, if null return an empty array"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "dbField",
        "description": "DB field from where to match a value"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*[]",
        "{$match: {field: {$regex:data}}}[]"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 209,
    "kind": "file",
    "name": "MakeMeDev/Tools/DB/userHelper.js",
    "content": "/** @function\n * @name filterPassword\n * Delete user password, to avoid security issues.\n * if we forgot to add lean to delete password, we ensure to return a useless string\n * @param {object} data - an object from where to delete one field : password\n * @returns {object}\n */\nfunction filterPassword(data) {\n    data[\"password\"] = \":)\"\n    delete data.password\n    return data\n}\n\nmodule.exports = {filterPassword}\n",
    "static": true,
    "longname": "/Users/gwenael/Documents/cours/L2/decembre_projWeb_makeMeDev/MakeMeDev/Tools/DB/userHelper.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 210,
    "kind": "function",
    "name": "filterPassword",
    "memberof": "MakeMeDev/Tools/DB/userHelper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "MakeMeDev/Tools/DB/userHelper.js~filterPassword",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Tools/DB/userHelper.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{object}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "an object from where to delete one field : password"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 211,
    "kind": "file",
    "name": "MakeMeDev/Tools/Services/addField.js",
    "content": "/**\n * This file requires {@link module:../Common/undefinedControl},  {@link module:../Common/countOccurrence}.\n * @requires module:../Common/undefinedControl\n * @requires module:../Common/countOccurrence\n */\nconst {isUndefinedOrNull} = require(\"../Common/undefinedControl\")\nconst {countOccurrencesFromArray} = require(\"../Common/countOccurrence\")\n\n/** @function\n * @name addAuthor\n * Add an author field in an object with id, pseudo and avatar.\n * @param {object} author - Typically a user object\n * @param {object} object - The object from where we will add author\n */\nfunction addAuthor(author, object){\n    object.author =  {\n        \"userId\": author._id,\n        \"pseudo\": author.pseudo,\n        \"avatar\": author.avatar\n    }\n}\n\n/** @function\n * @name addDate\n * Add a Date field in an object.\n * @param {object} object - The object from where we will add date\n * @param {string} [fieldName=\"creationDate\"] - name of field that will be created\n */\nfunction addDate(object, fieldName=\"creationDate\"){\n    object[fieldName] = new Date().getTime() / 1000\n}\n\n/** @function\n * @name setTypes\n * Add a Date field in an object.\n * @param {object} post - Typically a post object\n * @param {string} fieldName - name of field that will be created\n */\nfunction setTypes(post, fieldName) {\n    let arr = []\n    if (isUndefinedOrNull(post[fieldName])) {\n        post[fieldName] = arr\n    }\n    else {\n        for (let element of post[fieldName]) {\n            arr.push(element.type)\n        }\n    }\n    post[fieldName + \"Types\"] = countOccurrencesFromArray(arr)\n}\n\n\nmodule.exports = {addAuthor, addDate, setTypes}\n",
    "static": true,
    "longname": "/Users/gwenael/Documents/cours/L2/decembre_projWeb_makeMeDev/MakeMeDev/Tools/Services/addField.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 212,
    "kind": "variable",
    "name": "isUndefinedOrNull",
    "memberof": "MakeMeDev/Tools/Services/addField.js",
    "static": true,
    "longname": "MakeMeDev/Tools/Services/addField.js~isUndefinedOrNull",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Tools/Services/addField.js",
    "importStyle": null,
    "description": "This file requires {@link module:../Common/undefinedControl},  {@link module:../Common/countOccurrence}.",
    "lineNumber": 6,
    "unknown": [
      {
        "tagName": "@requires",
        "tagValue": "module:../Common/undefinedControl"
      },
      {
        "tagName": "@requires",
        "tagValue": "module:../Common/countOccurrence"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 213,
    "kind": "variable",
    "name": "countOccurrencesFromArray",
    "memberof": "MakeMeDev/Tools/Services/addField.js",
    "static": true,
    "longname": "MakeMeDev/Tools/Services/addField.js~countOccurrencesFromArray",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Tools/Services/addField.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 214,
    "kind": "function",
    "name": "addAuthor",
    "memberof": "MakeMeDev/Tools/Services/addField.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "MakeMeDev/Tools/Services/addField.js~addAuthor",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Tools/Services/addField.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "author",
        "description": "Typically a user object"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "object",
        "description": "The object from where we will add author"
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 215,
    "kind": "function",
    "name": "addDate",
    "memberof": "MakeMeDev/Tools/Services/addField.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "MakeMeDev/Tools/Services/addField.js~addDate",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Tools/Services/addField.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 29,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "object",
        "description": "The object from where we will add date"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"creationDate\"",
        "defaultRaw": "creationDate",
        "name": "fieldName",
        "description": "name of field that will be created"
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 216,
    "kind": "function",
    "name": "setTypes",
    "memberof": "MakeMeDev/Tools/Services/addField.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "MakeMeDev/Tools/Services/addField.js~setTypes",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Tools/Services/addField.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 39,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "post",
        "description": "Typically a post object"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "fieldName",
        "description": "name of field that will be created"
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 217,
    "kind": "file",
    "name": "MakeMeDev/Tools/Services/requestOperator.js",
    "content": "\n/** @function\n * @name setUpdateValue\n * Define all keys to set\n * @param {object} data - data that will be set\n * @param {array} keysArray - all keys to update\n * @returns {{$set: {}}}\n */\nfunction setUpdateValue(data, keysArray) {\n    let updateValue = {}\n    for (let key of keysArray){\n        updateValue[key] = data[key]\n    }\n    return {$set: updateValue}\n}\n\nmodule.exports = {setUpdateValue}\n",
    "static": true,
    "longname": "/Users/gwenael/Documents/cours/L2/decembre_projWeb_makeMeDev/MakeMeDev/Tools/Services/requestOperator.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 218,
    "kind": "function",
    "name": "setUpdateValue",
    "memberof": "MakeMeDev/Tools/Services/requestOperator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "MakeMeDev/Tools/Services/requestOperator.js~setUpdateValue",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Tools/Services/requestOperator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{{$set: {}}}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "data that will be set"
      },
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "keysArray",
        "description": "all keys to update"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{$set: {}}"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 219,
    "kind": "file",
    "name": "MakeMeDev/Tools/Services/responseHandler.js",
    "content": "\n/** @function\n * @name getHandler\n * Handle HTTP status code and body content to return in a response to Front team\n * For GET request.\n * @param {{success: object}|{error: string}} data - object with success or error data\n * @param {string} [notFoundMsg=\"error\"] - message displayed if we got a success without data\n * @param {int} [codeErr=400] - code to send if there is an error\n * @returns {{code: number, body: {error: string}}|{code: number, body: *}}\n */\nfunction getHandler(data, notFoundMsg=\"error, can't find this in database\", codeErr=400){\n    if (data[\"success\"]===null) {\n        return {code: 404, body: {error: notFoundMsg}}\n    } else if (data[\"success\"]) {\n        return {code: 200, body: data}\n    } else if (data[\"error\"]) {\n        return {code: codeErr, body: data}\n    } else {\n        return {code: 520, body: {error: \"DB error\"}}\n    }\n}\n\n/** @function\n * @name updateDbHandler\n * Handle HTTP status code and body content to return in a response to Front team\n * For POST request (when adding a document).\n * @param {{success: object}|{error: string}} data - object with success or error data\n * @param {string} [notFoundMsg=\"error\"] - message displayed if we got a success without data\n * @param {int} [codeErr=400] - code to send if there is an error\n * @returns {{code: number, body: {error: string}}|{code: number, body: *}}\n */\nfunction updateDbHandler(data, notFoundMsg=\"error, can't add this in database\", codeErr=400){\n    if (data[\"success\"]===null) {\n        return {code: 404, body: {error: notFoundMsg}}\n    } else if (data[\"success\"]) {\n        return {code: 201, body: data}\n    } else if (data[\"error\"]) {\n        return {code: codeErr, body: data}\n    } else {\n        return {code: 520, body: {error: \"DB error\"}}\n    }\n}\n\n\n/** @function\n * @name getHandlerForUserPost\n * Handle HTTP status code and body content to return in a response to Front team\n * For GET request\n * @param {{success: object}|{error: string}} user - user's data\n * @param {{success: object}|{error: string}} post - post's data\n * @param {string} [notFoundMsg=\"error\"] - message displayed if we got a success without data\n * @returns {{code: number, body: {success: {post: string | boolean | SrvPoller.success | Event, user: string | boolean | SrvPoller.success | Event}, token: *}}|{code: number, body: {error: string}}|{code: number, body: (*)}}\n */\nfunction getHandlerForUserPost(user, post, notFoundMsg=\"error, can't update user data : not found in database\"){\n    if (user[\"success\"] && post[\"success\"]){\n        return {code: 201, body: {success:{ user:user.success, post:post.success}, token:user.token}}\n    }\n    else if (user[\"success\"]===null || user[\"success\"]===null) {\n        return {code: 404, body: {error: notFoundMsg}}\n    }\n    else if (user[\"error\"] || post[\"error\"]) {\n        return {code: 404, body: user[\"error\"] ? user : post }\n    } else {\n        return {code: 520, body: {error: \"DB error\"}}\n    }\n}\n\n\nmodule.exports = {getHandler, getHandlerForUserPost, updateDbHandler}\n",
    "static": true,
    "longname": "/Users/gwenael/Documents/cours/L2/decembre_projWeb_makeMeDev/MakeMeDev/Tools/Services/responseHandler.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 220,
    "kind": "function",
    "name": "getHandler",
    "memberof": "MakeMeDev/Tools/Services/responseHandler.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "MakeMeDev/Tools/Services/responseHandler.js~getHandler",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Tools/Services/responseHandler.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{{code: number, body: {error: string}}|{code: number, body: *}}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "{success: object}|{error: string}"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "object with success or error data"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"error\"",
        "defaultRaw": "error",
        "name": "notFoundMsg",
        "description": "message displayed if we got a success without data"
      },
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "400",
        "defaultRaw": 400,
        "name": "codeErr",
        "description": "code to send if there is an error"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{code: number, body: {error: string}}|{code: number, body: *}"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 221,
    "kind": "function",
    "name": "updateDbHandler",
    "memberof": "MakeMeDev/Tools/Services/responseHandler.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "MakeMeDev/Tools/Services/responseHandler.js~updateDbHandler",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Tools/Services/responseHandler.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 32,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{{code: number, body: {error: string}}|{code: number, body: *}}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "{success: object}|{error: string}"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "object with success or error data"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"error\"",
        "defaultRaw": "error",
        "name": "notFoundMsg",
        "description": "message displayed if we got a success without data"
      },
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "400",
        "defaultRaw": 400,
        "name": "codeErr",
        "description": "code to send if there is an error"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{code: number, body: {error: string}}|{code: number, body: *}"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 222,
    "kind": "function",
    "name": "getHandlerForUserPost",
    "memberof": "MakeMeDev/Tools/Services/responseHandler.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "MakeMeDev/Tools/Services/responseHandler.js~getHandlerForUserPost",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Tools/Services/responseHandler.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 54,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{{code: number, body: {success: {post: string | boolean | SrvPoller.success | Event, user: string | boolean | SrvPoller.success | Event}, token: *}}|{code: number, body: {error: string}}|{code: number, body: (*)}}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "{success: object}|{error: string}"
        ],
        "spread": false,
        "optional": false,
        "name": "user",
        "description": "user's data"
      },
      {
        "nullable": null,
        "types": [
          "{success: object}|{error: string}"
        ],
        "spread": false,
        "optional": false,
        "name": "post",
        "description": "post's data"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"error\"",
        "defaultRaw": "error",
        "name": "notFoundMsg",
        "description": "message displayed if we got a success without data"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{code: number, body: {success: {post: string | boolean | SrvPoller.success | Event, user: string | boolean | SrvPoller.success | Event}, token: *}}|{code: number, body: {error: string}}|{code: number, body: (*)}"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 223,
    "kind": "file",
    "name": "MakeMeDev/Tools/Services/searchPost.js",
    "content": "/**\n * This file requires {@link module:../Common/regex}.\n * @requires module:../Common/regex\n */\nconst {searchRegex} = require(\"../Common/regex\")\n\n/** @function\n * @name getSearchPost\n * Used to return an object with function name, params and returns types, description and tag extracted\n * from a string thanks to regex.\n * @param {string} search - string containing criteria we want to search in DB, delimited by characters like () or []\n * @returns {{functionName: (string|null), paramsTypes: (string|null), description: (string|null), returnsTypes: (string|null), tag: (string|null)}}\n */\nfunction getSearchPost(search) {\n    return {\n        functionName: returnFieldByRegex(search, searchRegex.functionName, true),\n        paramsTypes: returnFieldByRegex(search, searchRegex.params),\n        returnsTypes: returnFieldByRegex(search, searchRegex.returns),\n        description: returnFieldByRegex(search, searchRegex.description),\n        tag: returnFieldByRegex(search, searchRegex.tags)\n    };\n}\n\n/** @function\n * @name getSearchPost\n * Return the first occurrence matching with regex in a string or null if any found\n * @param {string} text - string to slice with regex\n * @param {RegExp} regex - regex we used to extract a part of a string\n * @param {boolean} [shouldReturnStr=false] - if true, we return a void string \"\", else null\n * @returns {*}\n */\nfunction returnFieldByRegex(text, regex, shouldReturnStr= false) {\n    const res = text.match(regex)\n    return res===null || res===undefined ? (shouldReturnStr ? \"\" : null ) : res[0]\n}\n\nmodule.exports = {getSearchPost}\n",
    "static": true,
    "longname": "/Users/gwenael/Documents/cours/L2/decembre_projWeb_makeMeDev/MakeMeDev/Tools/Services/searchPost.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 224,
    "kind": "variable",
    "name": "searchRegex",
    "memberof": "MakeMeDev/Tools/Services/searchPost.js",
    "static": true,
    "longname": "MakeMeDev/Tools/Services/searchPost.js~searchRegex",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Tools/Services/searchPost.js",
    "importStyle": null,
    "description": "This file requires {@link module:../Common/regex}.",
    "lineNumber": 5,
    "unknown": [
      {
        "tagName": "@requires",
        "tagValue": "module:../Common/regex"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 225,
    "kind": "function",
    "name": "getSearchPost",
    "memberof": "MakeMeDev/Tools/Services/searchPost.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "MakeMeDev/Tools/Services/searchPost.js~getSearchPost",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Tools/Services/searchPost.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{{functionName: (string|null), paramsTypes: (string|null), description: (string|null), returnsTypes: (string|null), tag: (string|null)}}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "search",
        "description": "string containing criteria we want to search in DB, delimited by characters like () or []"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{functionName: (string|null), paramsTypes: (string|null), description: (string|null), returnsTypes: (string|null), tag: (string|null)}"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 226,
    "kind": "function",
    "name": "returnFieldByRegex",
    "memberof": "MakeMeDev/Tools/Services/searchPost.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "MakeMeDev/Tools/Services/searchPost.js~returnFieldByRegex",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Tools/Services/searchPost.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 32,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{*}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "string to slice with regex"
      },
      {
        "nullable": null,
        "types": [
          "RegExp"
        ],
        "spread": false,
        "optional": false,
        "name": "regex",
        "description": "regex we used to extract a part of a string"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "shouldReturnStr",
        "description": "if true, we return a void string \"\", else null"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 227,
    "kind": "file",
    "name": "MakeMeDev/Tools/Services/sortPost.js",
    "content": "/**\n * This file requires {@link module:../Common/undefinedControl}.\n * @requires module:../Common/undefinedControl\n */\nconst {isDefinedAndNotNull} = require(\"../Common/undefinedControl\")\n\n/** @function\n * @name sortAllPostByLike\n * Sort post array by like - dislike in descending order for all post from a response.\n * @param {object} data - typically a response with success field containing an array of posts\n * @returns {*}\n */\nfunction sortAllPostByLike(data) {\n    if (isDefinedAndNotNull(data.success)) {\n        for (let func of data.success) {\n            func = sortPostByLikes(func)\n        }\n    }\n    return data\n}\n\n/** @function\n * @name sortPostByLikes\n * Sort post array of an object by like - dislike in descending order.\n * @param {object} data - typically a post object from a response\n * @returns {*}\n */\nfunction sortPostByLikes(data) {\n    data.post.sort(function (a, b) {\n        return (b.like - b.dislike) - (a.like - a.dislike);\n    })\n    return data\n}\n\nmodule.exports = {sortPostByLikes, sortAllPostByLike}\n",
    "static": true,
    "longname": "/Users/gwenael/Documents/cours/L2/decembre_projWeb_makeMeDev/MakeMeDev/Tools/Services/sortPost.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 228,
    "kind": "variable",
    "name": "isDefinedAndNotNull",
    "memberof": "MakeMeDev/Tools/Services/sortPost.js",
    "static": true,
    "longname": "MakeMeDev/Tools/Services/sortPost.js~isDefinedAndNotNull",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Tools/Services/sortPost.js",
    "importStyle": null,
    "description": "This file requires {@link module:../Common/undefinedControl}.",
    "lineNumber": 5,
    "unknown": [
      {
        "tagName": "@requires",
        "tagValue": "module:../Common/undefinedControl"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 229,
    "kind": "function",
    "name": "sortAllPostByLike",
    "memberof": "MakeMeDev/Tools/Services/sortPost.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "MakeMeDev/Tools/Services/sortPost.js~sortAllPostByLike",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Tools/Services/sortPost.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 13,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{*}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "typically a response with success field containing an array of posts"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 230,
    "kind": "function",
    "name": "sortPostByLikes",
    "memberof": "MakeMeDev/Tools/Services/sortPost.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "MakeMeDev/Tools/Services/sortPost.js~sortPostByLikes",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Tools/Services/sortPost.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 28,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{*}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "typically a post object from a response"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 231,
    "kind": "file",
    "name": "MakeMeDev/Tools/rateLimiter.js",
    "content": "const rateLimit = require('express-rate-limit');\n/**\n * Config of our request limit, with 100 request per minute\n * @type {{headers: boolean, windowMs: number, max: number, message: string}}\n */\nconst rateLimiterConfig = {\n    windowMs:   60 * 1000, // 1 mn in milliseconds\n    max: 100,\n    message: 'You have exceeded the 100 requests in 1 mn limit!',\n    headers: true,\n}\nconst rateLimiterUsingThirdParty = rateLimit(rateLimiterConfig);\n\nmodule.exports = {rateLimiterUsingThirdParty, rateLimiterConfig}\n",
    "static": true,
    "longname": "/Users/gwenael/Documents/cours/L2/decembre_projWeb_makeMeDev/MakeMeDev/Tools/rateLimiter.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 232,
    "kind": "variable",
    "name": "rateLimit",
    "memberof": "MakeMeDev/Tools/rateLimiter.js",
    "static": true,
    "longname": "MakeMeDev/Tools/rateLimiter.js~rateLimit",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Tools/rateLimiter.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 233,
    "kind": "variable",
    "name": "rateLimiterConfig",
    "memberof": "MakeMeDev/Tools/rateLimiter.js",
    "static": true,
    "longname": "MakeMeDev/Tools/rateLimiter.js~rateLimiterConfig",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Tools/rateLimiter.js",
    "importStyle": null,
    "description": "Config of our request limit, with 100 request per minute",
    "lineNumber": 6,
    "type": {
      "nullable": null,
      "types": [
        "{headers: boolean, windowMs: number, max: number, message: string}"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 234,
    "kind": "variable",
    "name": "rateLimiterUsingThirdParty",
    "memberof": "MakeMeDev/Tools/rateLimiter.js",
    "static": true,
    "longname": "MakeMeDev/Tools/rateLimiter.js~rateLimiterUsingThirdParty",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Tools/rateLimiter.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 235,
    "kind": "file",
    "name": "MakeMeDev/Tools/token.js",
    "content": "const jwt = require(\"jsonwebtoken\");\n\n/** @function\n * @name generateAccessToken\n * @param {object} userData - user's data\n * @returns {undefined|*}\n */\nfunction generateAccessToken(userData) {\n    if (userData[\"success\"]!==null && userData[\"success\"]!==undefined) {\n        return userData[\"token\"] = jwt.sign(userData, process.env.TOKEN_SECRET, {expiresIn: '3600s'});\n    }\n}\n\nmodule.exports  = {generateAccessToken}\n",
    "static": true,
    "longname": "/Users/gwenael/Documents/cours/L2/decembre_projWeb_makeMeDev/MakeMeDev/Tools/token.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 236,
    "kind": "variable",
    "name": "jwt",
    "memberof": "MakeMeDev/Tools/token.js",
    "static": true,
    "longname": "MakeMeDev/Tools/token.js~jwt",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Tools/token.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 237,
    "kind": "function",
    "name": "generateAccessToken",
    "memberof": "MakeMeDev/Tools/token.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "MakeMeDev/Tools/token.js~generateAccessToken",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Tools/token.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{undefined|*}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "userData",
        "description": "user's data"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "undefined",
        "*"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 238,
    "kind": "file",
    "name": "MakeMeDev/app.js",
    "content": "/**\n * This file requires {@link module:./Tools/rateLimiter} and {@link module:./router}.\n * @requires module:./Tools/rateLimiter\n * @requires module:./router\n */\nconst { rateLimiterUsingThirdParty } = require('./Tools/rateLimiter');\nconst router = require(\"./router\");\nconst express = require('express');\nconst bodyParser = require(\"body-parser\");\nconst cors = require(\"cors\");\nconst app = express();\n\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: false }));\n\napp.use(rateLimiterUsingThirdParty);\n//Cors\napp.use(cors({ origin: true, credentials: true }));\nrouter(app);\n\nmodule.exports = {app}\n",
    "static": true,
    "longname": "/Users/gwenael/Documents/cours/L2/decembre_projWeb_makeMeDev/MakeMeDev/app.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 239,
    "kind": "variable",
    "name": "rateLimiterUsingThirdParty",
    "memberof": "MakeMeDev/app.js",
    "static": true,
    "longname": "MakeMeDev/app.js~rateLimiterUsingThirdParty",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/app.js",
    "importStyle": null,
    "description": "This file requires {@link module:./Tools/rateLimiter} and {@link module:./router}.",
    "lineNumber": 6,
    "unknown": [
      {
        "tagName": "@requires",
        "tagValue": "module:./Tools/rateLimiter"
      },
      {
        "tagName": "@requires",
        "tagValue": "module:./router"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 240,
    "kind": "variable",
    "name": "router",
    "memberof": "MakeMeDev/app.js",
    "static": true,
    "longname": "MakeMeDev/app.js~router",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/app.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 241,
    "kind": "variable",
    "name": "express",
    "memberof": "MakeMeDev/app.js",
    "static": true,
    "longname": "MakeMeDev/app.js~express",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/app.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 242,
    "kind": "variable",
    "name": "bodyParser",
    "memberof": "MakeMeDev/app.js",
    "static": true,
    "longname": "MakeMeDev/app.js~bodyParser",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/app.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 243,
    "kind": "variable",
    "name": "cors",
    "memberof": "MakeMeDev/app.js",
    "static": true,
    "longname": "MakeMeDev/app.js~cors",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/app.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 244,
    "kind": "variable",
    "name": "app",
    "memberof": "MakeMeDev/app.js",
    "static": true,
    "longname": "MakeMeDev/app.js~app",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/app.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 245,
    "kind": "file",
    "name": "MakeMeDev/index.js",
    "content": "// region Prepare to include the server code into our web_server\n//region MongoDB connection\n/**\n * This file requires {@link module:./Tools/DB/database},  {@link module:./app}.\n * @requires module:./Tools/DB/database\n * @requires module:./app\n */\nconst database = require(\"./Tools/DB/database\")\ndatabase.connect()\n//endregion\n\nconst http = require(\"http\");\nconst {app} = require(\"./app\")\n\nconst server = http.createServer(app);\nrequire('dotenv').config();\n\n// endregion\n\n/**\n * Our app listen port\n * @type {number}\n */\nconst PORT = process.env.PORT || 4021;\nserver.listen(PORT, () => {\n    console.log(\"started \" + PORT);\n});\n",
    "static": true,
    "longname": "/Users/gwenael/Documents/cours/L2/decembre_projWeb_makeMeDev/MakeMeDev/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 246,
    "kind": "variable",
    "name": "database",
    "memberof": "MakeMeDev/index.js",
    "static": true,
    "longname": "MakeMeDev/index.js~database",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/index.js",
    "importStyle": null,
    "description": "This file requires {@link module:./Tools/DB/database},  {@link module:./app}.",
    "lineNumber": 8,
    "unknown": [
      {
        "tagName": "@requires",
        "tagValue": "module:./Tools/DB/database"
      },
      {
        "tagName": "@requires",
        "tagValue": "module:./app"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 247,
    "kind": "variable",
    "name": "http",
    "memberof": "MakeMeDev/index.js",
    "static": true,
    "longname": "MakeMeDev/index.js~http",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 248,
    "kind": "variable",
    "name": "app",
    "memberof": "MakeMeDev/index.js",
    "static": true,
    "longname": "MakeMeDev/index.js~app",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 249,
    "kind": "variable",
    "name": "server",
    "memberof": "MakeMeDev/index.js",
    "static": true,
    "longname": "MakeMeDev/index.js~server",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 250,
    "kind": "variable",
    "name": "PORT",
    "memberof": "MakeMeDev/index.js",
    "static": true,
    "longname": "MakeMeDev/index.js~PORT",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/index.js",
    "importStyle": null,
    "description": "Our app listen port",
    "lineNumber": 24,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 251,
    "kind": "file",
    "name": "MakeMeDev/router.js",
    "content": "module.exports = (app) => {\n  require(\"./Routes/user\")(app);\n  require(\"./Routes/post\")(app);\n};\n",
    "static": true,
    "longname": "/Users/gwenael/Documents/cours/L2/decembre_projWeb_makeMeDev/MakeMeDev/router.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "kind": "index",
    "content": "\n# MakeMeDev\n2020 Web project at Coding factory, MakeMeDev aim to allow users\nto post and search functions from other developers.\n\n* [Initialisation](#Initialisation)\n* [User](#User)\n* [Search](#Search)\n\n## Initialisation\nTo run this server:\n\n    node index.js\n    \n## User\n### Signed in user\nSigned in user will create an account with mail, pseudo, password.\nIt will allow to post new functions to solve a problematic.\n\nThis user will have to :\n-   give a name to his function\n-   describe the function, how it works, which problem it solve ...\n-   define all arguments and returns values :\n    -   type \n    -   name \n    -   description\n    -   default value (`for arguments, not required`)\n-   add tags\n\nOther signed in users may propose to enhance this function,\nthey just have to add a post on the function they want.\nThe rest of the community will elect the optimal solution by voting \nthanks to like and dislike.\n\nThis will allow every user, even if not registered, to find solution to\ntheir issues thanks to the dev community.\n\n### Utilisateur non connecté (visiteur)\n\nUnregistered user may only explore all functions, but won't\nparticipate to develop the MakeMeDev community.\n\n## Search\n### Which are criteria to search function\nYou can search function by: \n-   name\n-   params type \n-   returns type\n-   description\n-   tags\n\n### How to write it\n#### Function name\nIf you want to search by function name, \nfirst step is to write it.\nFunction name is `always` at the beginning of a request.\n>This name could be uncompleted, we search function with a name\n>containing your searched name.\n\nExample:\n\n```\naccurate name       => sortMyArray\nless precise name   => sortMy      \n```\n\n#### Params\nIf you want to search by params, \nfirst step is to write brackets `()`.\nInto those brackets, write the type of params to search.\n>The number of params is important, you can search function without params \n>with single brackets.\n>\n>Moreover, if you want to search function without knowing all params type, replace\n>the unknown ones by ?\n\nExamples:\n```\nno params           => ()\none int             => (int)\n2 int, 1 array      => (int, int, array)\n1 int, 2 unknowns   => (int, ?, ?)\n```\n\n#### Returns\nIf you want to search by returns, \nfirst step is to write braces `{}`.\nInto those braces, write the type of returns to search.\n>Refer to [Params](#Params) for details explanations on types.\n\nExamples:\n```\nno returns      => {}\nunknown         => {?}\none int or null => {int, null}\n```\n\n#### Description\nIf you want to search by description, \nfirst step is to write double quote `\"\"`.\nThen, write a complete or a part of the description.\n\nExample:\n\n```\naccurate description       => \"a function to sort array returning the new array or null if isn't of type array\"\nless precise description   => \"function to sort\"      \n```\n\n#### Tags\nIf you want to search by tags, first step is to write square brackets `[]`.\nInto those square brackets, write all tags you want to search.\n>We search all function with all your tags or more.\n>Empty brackets mean you want a function without any tag\n\nExample:\n\n```\n1 tags => [sort]\n2 tags => [sort, easy]    \n```\n\n### Combination\nEach of those could be used to search function or not.\nYou can use a combination of these to accurate your search.\n\nFind below an example of search request:\n\n`functionName(int, int){int, ?} \"function to multiply\" [tag, tag]`\n\n\n",
    "longname": "/Users/gwenael/Documents/cours/L2/decembre_projWeb_makeMeDev/MakeMeDev/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"makemedev\",\n  \"version\": \"1.0.0\",\n  \"description\": \"projet web 2020\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"start\": \"node index.js\",\n    \"dev\": \"nodemon index.js\",\n    \"test\": \"NODE_ENV=test jest --detectOpenHandles\"\n  },\n  \"jest\": {\n    \"verbose\": true,\n    \"globalSetup\": \"<rootDir>/Test/config/setup.js\",\n    \"globalTeardown\": \"<rootDir>/Test/config/teardown.js\",\n    \"setupFilesAfterEnv\": [\n      \"<rootDir>/Test/config/setupAfterEnv.js\"\n    ],\n    \"testEnvironment\": \"<rootDir>/Test/config/environment.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/Gwenael95/MakeMeDev.git\"\n  },\n  \"keywords\": [\n    \"function\",\n    \"maker\",\n    \"function\",\n    \"browser\"\n  ],\n  \"author\": \"makeMeDevTeam\",\n  \"license\": \"ISC\",\n  \"bugs\": {\n    \"url\": \"https://github.com/Gwenael95/MakeMeDev/issues\"\n  },\n  \"homepage\": \"https://github.com/Gwenael95/MakeMeDev#readme\",\n  \"dependencies\": {\n    \"@jest/globals\": \"^26.6.2\",\n    \"body-parser\": \"^1.19.0\",\n    \"dotenv\": \"^8.2.0\",\n    \"esdoc\": \"^1.1.0\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"express\": \"^4.17.1\",\n    \"express-rate-limit\": \"^5.2.3\",\n    \"jest-environment-node\": \"^26.6.2\",\n    \"jsonwebtoken\": \"^8.5.1\",\n    \"mongodb\": \"^3.6.3\",\n    \"mongoose\": \"^5.11.5\",\n    \"mongoose-unique-validator\": \"^2.0.3\",\n    \"password-hash\": \"^1.2.2\"\n  },\n  \"devDependencies\": {\n    \"cookies\": \"^0.8.0\",\n    \"cors\": \"^2.8.5\",\n    \"jest\": \"^26.6.3\",\n    \"mongodb-memory-server\": \"^6.9.2\",\n    \"supertest\": \"^6.0.1\"\n  }\n}\n",
    "longname": "/Users/gwenael/Documents/cours/L2/decembre_projWeb_makeMeDev/MakeMeDev/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  },
  {
    "__docId__": 252,
    "kind": "testFile",
    "name": "Test/post.test.js",
    "content": "/**\n * This test file requires {@link module:./config/launcher}, {@link module:./config/testHelper }  and\n * {@link module:./models}.\n * @requires module:./config/launcher\n * @requires module:./config/testHelper\n * @requires module:./models\n */\nconst { request, url} = require(\"./config/launcher\")\nconst { post, responsePost, commentaryPost, user} = require(\"./models\");\nconst { expectedResponseOnUserUpsert, expectExcept, getBodyRes, expectedStatus,\n        getPostAt, getUserActivities, getAllPostReq, requestPostVote,\n        prepareReqWithToken} = require(\"./config/testHelper\")\n\n/**\n * post object at position 0 from post model\n * @type {object} post0\n */\nconst post0 = post.post.post[0]\n\n/**\n * @todo Make lot of tests, to test each possible situation.\n * It will be sufficient for MVP.\n */\ndescribe('Post', () => {\n    let newUser;\n    let newPost;\n\n    beforeEach(async () => {\n        newUser = await request.post(url + \"users\").send(user)\n        newPost = await prepareReqWithToken(newUser, url + \"post\").send(post)\n    })\n\n    //region create post and search posts\n    /**\n     * @test {sendPost}\n     * Try to insert a new post document in mongoDB with good post object\n     */\n    it('should be able to create a post', async () => {\n        const response = newPost;\n        expect(Object.values(response.body).length).toEqual(2) //token & success\n        expectedResponseOnUserUpsert(response)\n        expectExcept(Object.keys(getBodyRes(response).user), Object.keys(user.user), [\"password\"])\n        expectExcept(Object.keys(getBodyRes(response).post), Object.keys(post.post))\n    });\n\n    /**\n     * @test {sendPost}\n     * Try to insert a new post document in mongoDB with incomplete post object\n     */\n    it('should not be able to create a post because bad post', async () => {\n        const response = await prepareReqWithToken(newUser, url + \"post\").send({post:{name:\"testBadPost\"}});\n        expectedStatus(response, 400)\n    });\n\n    /**\n     * @test {getPost}\n     * Try to search a post document in mongoDB with a correct request with search param\n     */\n    it('should be able to search a post', async () => {\n        const response = await request.get(url + 'post?search=test(int){int, ?} \"function to multiply\" [test]')\n        expect(typeof getBodyRes(response)).toBe(\"object\")\n        expect(getBodyRes(response)[0].name).toBe(\"test\")\n        expectedStatus(response)\n    });\n\n    /**\n     * @test {getPost}\n     * Try to search a post document in mongoDB with a correct request with postId param\n     */\n    it('should be able to search a post by id', async () => {\n        const response = await request.get(url + 'post?postId=' + getBodyRes(newPost).post._id)\n        expect(typeof getBodyRes(response)).toBe(\"object\")\n        expect(getBodyRes(response).name).toBe(\"test\")\n        expectedStatus(response)\n    });\n    //endregion\n\n    //region vote (like or dislike)\n    /**\n     * @test {sendVote}\n     * Try to like a post in mongoDB with a correct request if the user\n     * never have vote for the post\n     */\n    it('should be able to like a post if NEVER vote', async () => {\n        const response = await requestPostVote( newUser, newPost, 1)\n        const postCheck = await getAllPostReq()\n        expectedStatus(response, 201)\n\n        expect(getPostAt(postCheck).like).toBe(post0.like+1)\n        expect(getUserActivities(response).like).toContain(getBodyRes(newPost).post.post[0]._id)\n    });\n\n    /**\n     * @test {sendVote}\n     * Try to dislike a post in mongoDB with a correct request if the user\n     * never have vote for the post\n     */\n    it('should be able to dislike a post if NEVER vote', async () => {\n        const response = await requestPostVote( newUser, newPost, -1)\n        const postCheck = await getAllPostReq()\n        expectedStatus(response, 201)\n        expect(getPostAt(postCheck).dislike).toBe(post0.dislike+1)\n        expect(getUserActivities(response).dislike).toContain(getBodyRes(newPost).post.post[0]._id)\n    });\n\n    /**\n     * @test {sendVote}\n     * Try to like a post in mongoDB with corrects requests if the user\n     * already add a like for the post\n     */\n    it('should be able to update a vote into post if ALREADY vote same vote', async () => {\n        const response1 = await requestPostVote( newUser, newPost, 1)\n        const postCheck1 = await getAllPostReq()\n        const response2 = await requestPostVote( response1, newPost, 1)\n        const postCheck2 = await getAllPostReq()\n\n        expectedStatus(response1, 201)\n        expectedStatus(response2, 500)\n        expect(getPostAt(postCheck1).like).toBe(post0.like+1)\n        expect(getPostAt(postCheck2).like).toBe(post0.like+1)\n        expect(getUserActivities(response1).like).toContain(getBodyRes(newPost).post.post[0]._id)\n        expect(response2.body.error).toBe(\"Update vote failed\")\n    });\n\n    /**\n     * @test {sendVote}\n     * Try to dislike a post in mongoDB with corrects requests if the user\n     * already add a like for the post\n     */\n    it('should be able to dislike a post', async () => {\n        const response1 = await requestPostVote( newUser, newPost, 1)\n        const postCheck1 = await getAllPostReq()\n        const response2 = await requestPostVote( response1, newPost, -1)\n        const postCheck2 = await getAllPostReq()\n\n        expectedStatus(response1, 201)\n        expectedStatus(response2, 201)\n\n        expect(getPostAt(postCheck1).like).toBe(post0.like+1)\n        expect(getPostAt(postCheck1).dislike).toBe(post0.dislike)\n        expect(getPostAt(postCheck2).like).toBe(post0.like)\n        expect(getPostAt(postCheck2).dislike).toBe(post0.dislike+1)\n        expect(getUserActivities(response1).like).toContain(getBodyRes(newPost).post.post[0]._id)\n        expect(getUserActivities(response1).dislike.length).toBe(0)\n        expect(getUserActivities(response2).dislike).toContain(getBodyRes(newPost).post.post[0]._id)\n        expect(getUserActivities(response2).like.length).toBe(0)\n    });\n    //endregion\n\n    //region add a post (answer) in a created post\n    /**\n     * @test {addResponse}\n     * Try to send a response to a post in mongoDB with corrects requests\n     */\n    it('should be able to send response to a post', async () => {\n        const response = await prepareReqWithToken(newUser, url + \"post-add-response\")\n            .send({responsePost: responsePost, idPost:getBodyRes(newPost).post._id })\n        const postCheck = await getAllPostReq()\n        expectedStatus(response, 201)\n        expect(getPostAt(postCheck, 3).description).toBe(\"better solution\");\n        expect(getUserActivities(response).response).toContain(getPostAt(postCheck, 3)._id)\n    });\n    //endregion\n\n    //region add commentary to a post\n    /**\n     * @test {addCommentary}\n     * Try to send a commentary to a post in mongoDB with corrects requests\n     */\n    it('should be able to send a commentary to a post', async () => {\n        const response = await prepareReqWithToken(newUser, url + \"post-add-commentary\")\n            .send({commentaryPost: commentaryPost, idPost:getBodyRes(newPost).post.post[0]._id })\n        const postCheck = await getAllPostReq()\n        expectedStatus(response, 201)\n        expect(getPostAt(postCheck).commentary[1].commentary).toBe(\"first\");\n        expect(getUserActivities(response).commentary).toContain(getPostAt(postCheck).commentary[1]._id)\n    });\n\n    /**\n     * @test {addCommentary}\n     * Try to send commentaries to a post in mongoDB with corrects requests,\n     * each commentary date should be different.\n     */\n    it('should be able to send 2 commentary with 2 different timestamp', async () => {\n        const response1 = await prepareReqWithToken(newUser, url + \"post-add-commentary\")\n            .send({commentaryPost: commentaryPost, idPost:getBodyRes(newPost).post.post[0]._id })\n        const postCheck = await getAllPostReq()\n        const response2 = await prepareReqWithToken(response1, url + \"post-add-commentary\")\n            .send({commentaryPost: commentaryPost, idPost:getBodyRes(newPost).post.post[0]._id })\n        const postCheck2 = await getAllPostReq()\n        let comment = getPostAt(postCheck).commentary\n        let comment2 = getPostAt(postCheck2).commentary\n\n        expectedStatus(response1, 201)\n        expect(getPostAt(postCheck).commentary[1].commentary).toBe(\"first\");\n        expect(getUserActivities(response1).commentary).toContain(getPostAt(postCheck).commentary[1]._id)\n        expect(comment[comment.length-1].date< comment2[comment2.length-1].date).toBe(true)\n    });\n    //endregion\n\n});\n",
    "static": true,
    "longname": "/Users/gwenael/Documents/cours/L2/decembre_projWeb_makeMeDev/MakeMeDev/Test/post.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 253,
    "kind": "test",
    "name": "describe0",
    "testId": 0,
    "memberof": "Test/post.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "Test/post.test.js~describe0",
    "access": null,
    "description": "Post",
    "lineNumber": 24,
    "todo": [
      "Make lot of tests, to test each possible situation.\nIt will be sufficient for MVP."
    ]
  },
  {
    "__docId__": 254,
    "kind": "test",
    "name": "it1",
    "testId": 1,
    "memberof": "Test/post.test.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "Test/post.test.js~describe0.it1",
    "access": null,
    "description": "should be able to create a post",
    "lineNumber": 38,
    "testTargets": [
      "sendPost"
    ]
  },
  {
    "__docId__": 255,
    "kind": "test",
    "name": "it2",
    "testId": 2,
    "memberof": "Test/post.test.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "Test/post.test.js~describe0.it2",
    "access": null,
    "description": "should not be able to create a post because bad post",
    "lineNumber": 50,
    "testTargets": [
      "sendPost"
    ]
  },
  {
    "__docId__": 256,
    "kind": "test",
    "name": "it3",
    "testId": 3,
    "memberof": "Test/post.test.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "Test/post.test.js~describe0.it3",
    "access": null,
    "description": "should be able to search a post",
    "lineNumber": 59,
    "testTargets": [
      "getPost"
    ]
  },
  {
    "__docId__": 257,
    "kind": "test",
    "name": "it4",
    "testId": 4,
    "memberof": "Test/post.test.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "Test/post.test.js~describe0.it4",
    "access": null,
    "description": "should be able to search a post by id",
    "lineNumber": 70,
    "testTargets": [
      "getPost"
    ]
  },
  {
    "__docId__": 258,
    "kind": "test",
    "name": "it5",
    "testId": 5,
    "memberof": "Test/post.test.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "Test/post.test.js~describe0.it5",
    "access": null,
    "description": "should be able to like a post if NEVER vote",
    "lineNumber": 84,
    "testTargets": [
      "sendVote"
    ]
  },
  {
    "__docId__": 259,
    "kind": "test",
    "name": "it6",
    "testId": 6,
    "memberof": "Test/post.test.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "Test/post.test.js~describe0.it6",
    "access": null,
    "description": "should be able to dislike a post if NEVER vote",
    "lineNumber": 98,
    "testTargets": [
      "sendVote"
    ]
  },
  {
    "__docId__": 260,
    "kind": "test",
    "name": "it7",
    "testId": 7,
    "memberof": "Test/post.test.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "Test/post.test.js~describe0.it7",
    "access": null,
    "description": "should be able to update a vote into post if ALREADY vote same vote",
    "lineNumber": 111,
    "testTargets": [
      "sendVote"
    ]
  },
  {
    "__docId__": 261,
    "kind": "test",
    "name": "it8",
    "testId": 8,
    "memberof": "Test/post.test.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "Test/post.test.js~describe0.it8",
    "access": null,
    "description": "should be able to dislike a post",
    "lineNumber": 130,
    "testTargets": [
      "sendVote"
    ]
  },
  {
    "__docId__": 262,
    "kind": "test",
    "name": "it9",
    "testId": 9,
    "memberof": "Test/post.test.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "Test/post.test.js~describe0.it9",
    "access": null,
    "description": "should be able to send response to a post",
    "lineNumber": 155,
    "testTargets": [
      "addResponse"
    ]
  },
  {
    "__docId__": 263,
    "kind": "test",
    "name": "it10",
    "testId": 10,
    "memberof": "Test/post.test.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "Test/post.test.js~describe0.it10",
    "access": null,
    "description": "should be able to send a commentary to a post",
    "lineNumber": 170,
    "testTargets": [
      "addCommentary"
    ]
  },
  {
    "__docId__": 264,
    "kind": "test",
    "name": "it11",
    "testId": 11,
    "memberof": "Test/post.test.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "Test/post.test.js~describe0.it11",
    "access": null,
    "description": "should be able to send 2 commentary with 2 different timestamp",
    "lineNumber": 184,
    "testTargets": [
      "addCommentary"
    ]
  },
  {
    "__docId__": 265,
    "kind": "testFile",
    "name": "Test/serveur.test.js",
    "content": "/**\n * This test file requires {@link module:./config/launcher} and\n * {@link module:./models}.\n * @requires module:./config/launcher\n * @requires module:./models\n */\nconst { request, url} = require(\"./config/launcher\")\nconst { rateLimiterConfig } = require('../Tools/rateLimiter');\n\n/**\n * @todo Make lot of tests, to test each possible situation\n */\ndescribe('Post', () => {\n\n    /**\n     * @test {getPost}\n     * Try to get post more than the request limit.\n     * It test our request limiter, if it respond with a 429 status.\n     * It also test if we get result at each request (seems that sometimes\n     * a request could return nothing).\n     */\n    it('should return that user launch to many request', async () => {\n        let arrBool = []\n        for (let nbReq = 0; nbReq<rateLimiterConfig.max+5; nbReq++){\n            if (nbReq>rateLimiterConfig.max){\n                let resp = await request.get(url + 'post?search=test(int){int, ?} \"function to multiply\" #test#')\n                expect(resp.status).toBe(429)\n            }\n            else{\n                let resp =await request.get(url + 'post?search=test(int){int, ?} \"function to multiply\" #test#')\n                arrBool.push(Object.keys(resp.body))\n            }\n        }\n        console.log(arrBool)\n    });\n\n});\n",
    "static": true,
    "longname": "/Users/gwenael/Documents/cours/L2/decembre_projWeb_makeMeDev/MakeMeDev/Test/serveur.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 266,
    "kind": "test",
    "name": "describe12",
    "testId": 12,
    "memberof": "Test/serveur.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "Test/serveur.test.js~describe12",
    "access": null,
    "description": "Post",
    "lineNumber": 13,
    "todo": [
      "Make lot of tests, to test each possible situation"
    ]
  },
  {
    "__docId__": 267,
    "kind": "test",
    "name": "it13",
    "testId": 13,
    "memberof": "Test/serveur.test.js~describe12",
    "testDepth": 1,
    "static": true,
    "longname": "Test/serveur.test.js~describe12.it13",
    "access": null,
    "description": "should return that user launch to many request",
    "lineNumber": 22,
    "testTargets": [
      "getPost"
    ]
  },
  {
    "__docId__": 268,
    "kind": "testFile",
    "name": "Test/user.test.js",
    "content": "/**\n * This test file requires {@link module:./config/launcher}, {@link module:./config/testHelper }  and\n * {@link module:./models}.\n * @requires module:./config/launcher\n * @requires module:./config/testHelper\n * @requires module:./models\n */\nconst {request, url} = require(\"./config/launcher\")\nconst { prepareReqWithToken, expectedStatus, getBodyRes, expectExcept} = require(\"./config/testHelper\")\nconst { user } = require(\"./models\");\n\n/**\n * user pseudo from the model\n * @type {string} userPseudo\n */\nconst userPseudo= user.user.pseudo\n\n/**\n * user password from the model\n * @type {string} userPassword\n */\nconst userPassword= user.user.password\n\n/**\n * user object containing pseudo and password from the model\n * to test login\n * @type {string} userPseudo\n */\nconst userSignIn = {\n    user:{\n        login: userPseudo,\n        password: userPassword,\n    }\n}\n\n/**\n * @todo Make lot of tests, to test each possible situation.\n * It will be sufficient for MVP.\n */\ndescribe('User', () => {\n    let newUser;\n    beforeEach(async () => {\n        newUser = await request.post(url + \"users\").send(user)\n    })\n\n    //region sign up and login user\n    /**\n     * @test {signUp}\n     * Try to insert a new user document in mongoDB with correct user object.\n     */\n    it('should be able to create user', async () => {\n        const response = newUser;\n        expectedStatus(response, 201)\n        expect(Object.values(response.body).length).toEqual(2)\n    });\n\n    /**\n     * @test {signIn}\n     * Try to login a user with correct object {password, pseudo}.\n     */\n    it('should be able to get user', async () => {\n        const response = await request.post(url + \"user-signin\").send(userSignIn)\n        expectedStatus(response, 200)\n        expect(getBodyRes(response).pseudo).toBe(userPseudo)\n    });\n\n    /**\n     * @test {signIn}\n     * Try to login a user with bad object {password, pseudo}.\n     */\n    it('should not be able to get user', async () => {\n        const response = await request.post(url + \"user-signin\").send({\n            user:{\n                login: userPseudo,\n                password: \"testpassword\",\n            }\n        })\n        expectedStatus(response, 404)\n    });\n    //endregion\n\n\n    //region update user\n    /**\n     * @test {updateUser}\n     * Try to update a user with new pseudo, mail and avatar object\n     * thanks to its id.\n     */\n    it('should be able to update user', async () => {\n        const user = await request.post(url + \"user-signin\").send(userSignIn)\n        const userData = {\n            user: {\n                id: user.body.success._id,\n                pseudo: 'test',\n                mail: 'test@test.com',\n                avatar: 'test'\n            }\n        }\n        const response = await prepareReqWithToken(user,url + \"update-users\" )\n            .send(userData);\n        expectedStatus(response, 201)\n        expect(getBodyRes(response).pseudo).toBe(userData.user.pseudo)\n        expect(getBodyRes(response).mail).toBe(userData.user.mail)\n        expect(getBodyRes(response).avatar).toBe(userData.user.avatar)\n        expectExcept(  Object.keys(getBodyRes(response)), Object.keys(userData.user), [\"id\"] )\n\n    });\n\n    /**\n     * @test {updateUser}\n     * Try to update a user with new pseudo, mail and avatar object\n     * thanks to a bad user id.\n     */\n    it('should be able to update user because use id from token', async () => {\n        const user = await request.post(url + \"user-signin\").send(userSignIn)\n        const userData = {\n            user: {\n                id: \"1\",\n                pseudo: 'test',\n                mail: 'test@test.com',\n                avatar: 'test'\n            }\n        }\n        const response = await prepareReqWithToken(user,url + \"update-users\" )\n            .send(userData);\n        expectedStatus(response, 201)\n        expect(getBodyRes(response).pseudo).toBe(userData.user.pseudo)\n        expect(getBodyRes(response).mail).toBe(userData.user.mail)\n        expect(getBodyRes(response).avatar).toBe(userData.user.avatar)\n        expectExcept(  Object.keys(getBodyRes(response)), Object.keys(userData.user), [\"id\"] )\n\n    });\n\n\n    /**\n     * @test {updateUser}\n     * Try to update a user with new mail and avatar object\n     */\n    it('should not be able to update user without crash', async () => {\n        const user = await request.post(url + \"user-signin\").send(userSignIn)\n        const userData = {\n            user: {\n                mail: 'test@test.com',\n                avatar: 'test'\n            }\n        }\n        const response = await prepareReqWithToken(user,url + \"update-users\" )\n            .send(userData);\n        expectedStatus(response, 201)\n        expect(getBodyRes(response).pseudo).toBe(userPseudo)\n        expect(getBodyRes(response).mail).toBe(userData.user.mail)\n        expect(getBodyRes(response).avatar).toBe(userData.user.avatar)\n        expectExcept(  Object.keys(getBodyRes(response)), Object.keys(userData.user), [\"id\"] )\n\n    });\n    //endregion\n\n});\n",
    "static": true,
    "longname": "/Users/gwenael/Documents/cours/L2/decembre_projWeb_makeMeDev/MakeMeDev/Test/user.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 269,
    "kind": "test",
    "name": "describe14",
    "testId": 14,
    "memberof": "Test/user.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "Test/user.test.js~describe14",
    "access": null,
    "description": "User",
    "lineNumber": 40
  },
  {
    "__docId__": 270,
    "kind": "test",
    "name": "it15",
    "testId": 15,
    "memberof": "Test/user.test.js~describe14",
    "testDepth": 1,
    "static": true,
    "longname": "Test/user.test.js~describe14.it15",
    "access": null,
    "description": "should be able to create user",
    "lineNumber": 51,
    "testTargets": [
      "signUp"
    ]
  },
  {
    "__docId__": 271,
    "kind": "test",
    "name": "it16",
    "testId": 16,
    "memberof": "Test/user.test.js~describe14",
    "testDepth": 1,
    "static": true,
    "longname": "Test/user.test.js~describe14.it16",
    "access": null,
    "description": "should be able to get user",
    "lineNumber": 61,
    "testTargets": [
      "signIn"
    ]
  },
  {
    "__docId__": 272,
    "kind": "test",
    "name": "it17",
    "testId": 17,
    "memberof": "Test/user.test.js~describe14",
    "testDepth": 1,
    "static": true,
    "longname": "Test/user.test.js~describe14.it17",
    "access": null,
    "description": "should not be able to get user",
    "lineNumber": 71,
    "testTargets": [
      "signIn"
    ]
  },
  {
    "__docId__": 273,
    "kind": "test",
    "name": "it18",
    "testId": 18,
    "memberof": "Test/user.test.js~describe14",
    "testDepth": 1,
    "static": true,
    "longname": "Test/user.test.js~describe14.it18",
    "access": null,
    "description": "should be able to update user",
    "lineNumber": 89,
    "testTargets": [
      "updateUser"
    ]
  },
  {
    "__docId__": 274,
    "kind": "test",
    "name": "it19",
    "testId": 19,
    "memberof": "Test/user.test.js~describe14",
    "testDepth": 1,
    "static": true,
    "longname": "Test/user.test.js~describe14.it19",
    "access": null,
    "description": "should be able to update user because use id from token",
    "lineNumber": 114,
    "testTargets": [
      "updateUser"
    ]
  },
  {
    "__docId__": 275,
    "kind": "test",
    "name": "it20",
    "testId": 20,
    "memberof": "Test/user.test.js~describe14",
    "testDepth": 1,
    "static": true,
    "longname": "Test/user.test.js~describe14.it20",
    "access": null,
    "description": "should not be able to update user without crash",
    "lineNumber": 139,
    "testTargets": [
      "updateUser"
    ]
  }
]