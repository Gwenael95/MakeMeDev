[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "MakeMeDev/.external-ecmascript.js",
    "static": true,
    "longname": "MakeMeDev/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "MakeMeDev/.external-ecmascript.js",
    "static": true,
    "longname": "MakeMeDev/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "MakeMeDev/.external-ecmascript.js",
    "static": true,
    "longname": "MakeMeDev/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "MakeMeDev/.external-ecmascript.js",
    "static": true,
    "longname": "MakeMeDev/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "MakeMeDev/.external-ecmascript.js",
    "static": true,
    "longname": "MakeMeDev/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "MakeMeDev/.external-ecmascript.js",
    "static": true,
    "longname": "MakeMeDev/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "MakeMeDev/.external-ecmascript.js",
    "static": true,
    "longname": "MakeMeDev/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "MakeMeDev/.external-ecmascript.js",
    "static": true,
    "longname": "MakeMeDev/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "MakeMeDev/.external-ecmascript.js",
    "static": true,
    "longname": "MakeMeDev/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "MakeMeDev/.external-ecmascript.js",
    "static": true,
    "longname": "MakeMeDev/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "MakeMeDev/.external-ecmascript.js",
    "static": true,
    "longname": "MakeMeDev/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "MakeMeDev/.external-ecmascript.js",
    "static": true,
    "longname": "MakeMeDev/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "MakeMeDev/.external-ecmascript.js",
    "static": true,
    "longname": "MakeMeDev/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "MakeMeDev/.external-ecmascript.js",
    "static": true,
    "longname": "MakeMeDev/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "MakeMeDev/.external-ecmascript.js",
    "static": true,
    "longname": "MakeMeDev/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "MakeMeDev/.external-ecmascript.js",
    "static": true,
    "longname": "MakeMeDev/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "MakeMeDev/.external-ecmascript.js",
    "static": true,
    "longname": "MakeMeDev/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "MakeMeDev/.external-ecmascript.js",
    "static": true,
    "longname": "MakeMeDev/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "MakeMeDev/.external-ecmascript.js",
    "static": true,
    "longname": "MakeMeDev/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "MakeMeDev/.external-ecmascript.js",
    "static": true,
    "longname": "MakeMeDev/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "MakeMeDev/.external-ecmascript.js",
    "static": true,
    "longname": "MakeMeDev/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "MakeMeDev/.external-ecmascript.js",
    "static": true,
    "longname": "MakeMeDev/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "MakeMeDev/.external-ecmascript.js",
    "static": true,
    "longname": "MakeMeDev/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "MakeMeDev/.external-ecmascript.js",
    "static": true,
    "longname": "MakeMeDev/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "MakeMeDev/.external-ecmascript.js",
    "static": true,
    "longname": "MakeMeDev/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "MakeMeDev/.external-ecmascript.js",
    "static": true,
    "longname": "MakeMeDev/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "MakeMeDev/.external-ecmascript.js",
    "static": true,
    "longname": "MakeMeDev/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "MakeMeDev/.external-ecmascript.js",
    "static": true,
    "longname": "MakeMeDev/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "MakeMeDev/.external-ecmascript.js",
    "static": true,
    "longname": "MakeMeDev/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "MakeMeDev/.external-ecmascript.js",
    "static": true,
    "longname": "MakeMeDev/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "MakeMeDev/.external-ecmascript.js",
    "static": true,
    "longname": "MakeMeDev/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "MakeMeDev/.external-ecmascript.js",
    "static": true,
    "longname": "MakeMeDev/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "MakeMeDev/.external-ecmascript.js",
    "static": true,
    "longname": "MakeMeDev/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "MakeMeDev/.external-ecmascript.js",
    "static": true,
    "longname": "MakeMeDev/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "MakeMeDev/.external-ecmascript.js",
    "static": true,
    "longname": "MakeMeDev/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "MakeMeDev/.external-ecmascript.js",
    "static": true,
    "longname": "MakeMeDev/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "MakeMeDev/.external-ecmascript.js",
    "static": true,
    "longname": "MakeMeDev/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "MakeMeDev/.external-ecmascript.js",
    "static": true,
    "longname": "MakeMeDev/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "MakeMeDev/.external-ecmascript.js",
    "static": true,
    "longname": "MakeMeDev/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "MakeMeDev/.external-ecmascript.js",
    "static": true,
    "longname": "MakeMeDev/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "MakeMeDev/.external-ecmascript.js",
    "static": true,
    "longname": "MakeMeDev/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "MakeMeDev/.external-ecmascript.js",
    "static": true,
    "longname": "MakeMeDev/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "MakeMeDev/.external-ecmascript.js",
    "static": true,
    "longname": "MakeMeDev/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "MakeMeDev/.external-ecmascript.js",
    "static": true,
    "longname": "MakeMeDev/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "MakeMeDev/.external-ecmascript.js",
    "static": true,
    "longname": "MakeMeDev/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "MakeMeDev/.external-ecmascript.js",
    "static": true,
    "longname": "MakeMeDev/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "MakeMeDev/.external-ecmascript.js",
    "static": true,
    "longname": "MakeMeDev/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "MakeMeDev/Controllers/postController.js",
    "content": "const { create, get, updateVote, addPostResponse, addCommentary, updateFunction } = require(\"../Services/postService\");\nconst {emptyRequest} = require(\"../Tools/Controller/controllerHelper\");\n\n\n/** @function\n * @name getPost\n * Get a post from database if our query isn't empty\n * @param {Request} req - request received\n * @param {Response} res - response to dispatched\n * @param {Function} next - get control to the next middleware function\n * @returns {Promise<*|boolean|void>}\n */\nexports.getPost = async (req, res, next)  => {\n    const {search} =  req.query\n    const response = emptyRequest(search) ? emptyRequest(search) : await get(search)\n    return res.status(response.code).send(response.body)\n};\n\n/** @function\n * @name sendPost\n * Send a post to add in database if our post data isn't empty\n * @param {Request<{user:object, body:object, params:object}>} req - request received\n * @param {Response<{status:int}>} res - response to dispatched\n * @param {Function} next - get control to the next middleware function\n * @returns {Promise<*|boolean|void>}\n */\nexports.sendPost = async (req, res, next) => {\n    const {post} = req.body;\n    const response = emptyRequest(post) ? emptyRequest(post) : await create(post, req.user)\n    return res.status(response.code).send(response.body)\n};\n\n\n/** @function\n * @name sendVote\n * Send a vote to like or dislike a post in DB\n * @param {Request<{user:object, body:object, params:object}>} req - request received\n * @param {Response<{status:int}>} res - response to dispatched\n * @param {Function} next - get control to the next middleware function\n * @returns {Promise<*|boolean|void>}\n */\nexports.sendVote = async (req, res, next)  => {\n    const {vote, idPost} =  req.body\n    const response = emptyRequest(vote) ? emptyRequest(vote) : await updateVote(vote, idPost, req.user)\n    return res.status(response.code).send(response.body)\n};\n\n/** @function\n * @name addResponse\n * Send a response to add to a post in DB\n * @param {Request<{user:object, body:object, params:object}>} req - request received\n * @param {Response<{status:int}>} res - response to dispatched\n * @param {Function} next - get control to the next middleware function\n * @returns {Promise<*|boolean|void>}\n */\nexports.addResponse = async (req, res, next)  => {\n    const {responsePost, idPost} =  req.body\n    const response = emptyRequest(responsePost) ? emptyRequest(responsePost) : await addPostResponse(responsePost, idPost, req.user)\n    return res.status(response.code).send(response.body)\n};\n\n/** @function\n * @name addCommentary\n * Send a comment to add to a post in DB\n * @param {Request<{user:object, body:object, params:object}>} req - request received\n * @param {Response<{status:int}>} res - response to dispatched\n * @param {Function} next - get control to the next middleware function\n * @returns {Promise<*|boolean|void>}\n */\nexports.addCommentary = async (req, res, next)  => {\n    const {commentaryPost, idPost} =  req.body\n    const response = emptyRequest(commentaryPost) ? emptyRequest(commentaryPost) : await addCommentary(commentaryPost, idPost, req.user)\n    return res.status(response.code).send(response.body)\n};\n\n/** @function\n * @name updateFunction\n * Send a function to update it in a post in DB\n * @param {Request<{user:object, body:object, params:object}>} req - request received\n * @param {Response<{status:int}>} res - response to dispatched\n * @param {Function} next - get control to the next middleware function\n * @returns {Promise<*|boolean|void>}\n */\nexports.updateFunction = async (req, res, next)  => {\n    const {functionPost, idPost} =  req.body\n    const response = emptyRequest(functionPost) ? emptyRequest(functionPost) : await updateFunction(functionPost, idPost, req.user)\n    return res.status(response.code).send(response.body)\n};\n\n\n\n\n",
    "static": true,
    "longname": "/Users/gwenael/Documents/cours/L2/decembre_projWeb_makeMeDev/MakeMeDev/Controllers/postController.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "variable",
    "name": "create",
    "memberof": "MakeMeDev/Controllers/postController.js",
    "static": true,
    "longname": "MakeMeDev/Controllers/postController.js~create",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Controllers/postController.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 50,
    "kind": "variable",
    "name": "emptyRequest",
    "memberof": "MakeMeDev/Controllers/postController.js",
    "static": true,
    "longname": "MakeMeDev/Controllers/postController.js~emptyRequest",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Controllers/postController.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 51,
    "kind": "file",
    "name": "MakeMeDev/Controllers/usersController.js",
    "content": "const {addUser, getUser, updateUser} = require(\"../Services/usersService\");\nconst {emptyRequest} = require(\"../Tools/Controller/controllerHelper\");\n\n/** @function\n * @name signUp\n * @param {Request} req - request received\n * @param {Response} res - response to dispatched\n * @param {Function} next - get control to the next middleware function\n * @returns {Promise<*|boolean|void>}\n */\nexports.signUp = async (req, res, next) => {\n    const {user} = req.body;\n    const response = emptyRequest(user) ? emptyRequest(user) : await addUser(user)\n    return res.status(response.code).send(response.body)\n};\n\n/** @function\n * @name updateUser\n * @param {Request} req - request received\n * @param {Response} res - response to dispatched\n * @param {Function} next - get control to the next middleware function\n * @returns {Promise<*|boolean|void>}\n */\nexports.updateUser = async (req, res, next) => {\n    const {user} = req.body;\n    const response = emptyRequest(user) ? emptyRequest(user) : await updateUser(user)\n    return res.status(response.code).send(response.body)\n};\n\n/** @function\n * @name signIn\n * @param {Request} req - request received\n * @param {Response} res - response to dispatched\n * @param {Function} next - get control to the next middleware function\n * @returns {Promise<*|boolean|void>}\n */\nexports.signIn = async (req, res, next)  => {\n    const user = req.query;\n    const response = emptyRequest(user) ? emptyRequest(user) : await getUser(user)\n    return res.status(response.code).send(response.body)\n};\n\n\n\n\n\n\n",
    "static": true,
    "longname": "/Users/gwenael/Documents/cours/L2/decembre_projWeb_makeMeDev/MakeMeDev/Controllers/usersController.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 52,
    "kind": "variable",
    "name": "addUser",
    "memberof": "MakeMeDev/Controllers/usersController.js",
    "static": true,
    "longname": "MakeMeDev/Controllers/usersController.js~addUser",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Controllers/usersController.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 53,
    "kind": "variable",
    "name": "emptyRequest",
    "memberof": "MakeMeDev/Controllers/usersController.js",
    "static": true,
    "longname": "MakeMeDev/Controllers/usersController.js~emptyRequest",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Controllers/usersController.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 54,
    "kind": "file",
    "name": "MakeMeDev/DB/postRepository.js",
    "content": "const mongoose = require('mongoose');\nconst {postSchema} = require(\"../Models/postModel\");\nconst PostModel = mongoose.model('posts', postSchema)\nconst {countOccurrencesFromArray} = require(\"../Tools/Common/countOccurence\")\nconst {filterDelSpaces} = require(\"../Tools/Common/stringOperation\")\nconst ObjectId = mongoose.Types.ObjectId;\n\n/** @function\n * @name addPost\n * Insert a new post in database, and return the result of this try\n * --Should update Current user information, push a new post--\n * @param {object} postData - post to add, should correspond to postModels {@link '../Models/postModels'}.\n * @returns {Promise<{success: {success: T}}|{error: Error.ValidationError | {[p: string]: ValidatorError | CastError} | number}>}\n */\nasync function addPost(postData, user) {\n    const doc = new PostModel(postData);\n    return await doc.save().then(result => {\n        return {success: result}\n    }).catch(err => {\n        return {error: err.errors}\n    })\n}\n\n\n/** @function\n * @name getPost\n * Get post in database depending on a many fields, and return the result of this try\n * @param {object} searchedData - data to search in database\n * @returns {Promise<{success: {success: T}}|{error: Error.ValidationError | {[p: string]: ValidatorError | CastError} | number}>}\n */\nasync function getPost(searchedData) {\n    return await PostModel\n        .aggregate(getPipeline(searchedData))//.sort({\"post.totalLike\":1})\n        .exec()\n        .then(result => {return {success: result}})\n        .catch(err => {\n            return {error: err.errors}\n        });\n}\n\n\nfunction getCommentaryId(result, id) {\n    try {\n        let commentaryId;\n        for (let el of result.post) {\n            if (JSON.stringify(el._id) === JSON.stringify(id)) {\n                commentaryId = el.commentary[el.commentary.length - 1]._id\n                break\n            }\n        }\n        return commentaryId;\n    }catch (e) {\n        return null\n    }\n}\n\nfunction getResponseId(result) {\n    return result.post[result.post.length - 1]._id;\n}\n\nasync function updatePost(filter, update, id) {\n    return await PostModel\n        .findOneAndUpdate(\n            filter,\n            update,\n            {new: true, context: \"query\"})\n        //for options=> upsert: true, setDefaultsOnInsert: true\n        // (use on $setOnInsert; for us create issue) to update date on insert\n        .lean()\n        .exec()\n        .then((result ) => {\n            return {success: result, postId: id , responseId: getResponseId(result), commentaryId: getCommentaryId(result, id)}\n        })\n        .catch(err => {\n            return {error: err.errors}\n        });\n}\n\nasync function updatePostFunction(functionPost, idPost) {\n    return await updatePost({\"post._id\": ObjectId(idPost)}, {$set : {\"post.$.function\": functionPost}}, idPost)\n}\n\nasync function updatePostResponse(responsePost, idPost) {\n    return await updatePost({\"_id\": ObjectId(idPost)}, {$push : {post: responsePost}}, idPost)\n}\n\nasync function updatePostResponseCommentary(commentaryResponse, idPost) {\n    return await updatePost({\"post._id\": ObjectId(idPost)}, {$push : {\"post.$.commentary\": commentaryResponse}}, idPost)\n}\n\nasync function updateLikeOrDislike(likeOrDislike, idPost, user) {\n    let opposite = {like:\"dislike\", dislike:\"like\"}[likeOrDislike]\n    //check if user already vote for this post;\n    // if no : increment like or dislike field\n    // if yes : if it have added a like, and now send a like : DO NOTHING  (same for dislike)\n    //          if it have added a like and change is mind : $inc : -1 for like and $inc +1 for dislike (& vice versa)\n    //update user activities\n    let setPost\n\n    if (!(user.activities[likeOrDislike].includes(idPost) || user.activities[opposite].includes( idPost))) {\n        setPost = {$inc: {[\"post.$.\" + likeOrDislike]:1}}\n    }\n    else if(user.activities[opposite].includes( idPost)) {\n        setPost = {$inc: {[\"post.$.\" + likeOrDislike]:1, [\"post.$.\" + opposite]:-1}}\n    }\n    else{\n        return {error:\"cet utilisateur à déjà mis un \" + likeOrDislike}\n    }\n    //need to update user ACTIVITIES\n    return await updatePost({\"post._id\": ObjectId(idPost)}, setPost, idPost)\n}\n\n//region not exported function\n/** @function\n * @name getPipeline\n * Get a complex Pipeline to search all function depending on data search field\n * @param {object} data - post's data\n * @returns {[]}\n */\nfunction getPipeline(data) {\n    return getNameQuery(data)\n        .concat(getParamTypeQuery(data), getReturnTypeQuery(data), getDescriptionQuery(data), getTagQuery(data));\n}\n\n//region query for string's array\n/** @function\n * @name getTagQuery\n * Get a query to search function's tag in DB\n * @param {object} data - post's data\n * @returns {*[]|{$match: {field: {$all: data}}}[]}\n */\nfunction getTagQuery(data) {\n    return getMatchFromStringArray(data.tag, \"tag\")\n}\n\n/** @function\n * @name getMatchFromStringArray\n * Create a $match for a defined field from database containing an array\n * Check if another array contains some or all elements of this DB field\n * @param {string} data - an array containing strings\n * @param {string} dbField - field name from DB\n * @returns {[]|[{$match: {field:{$all:data}}}]}\n */\nfunction getMatchFromStringArray(data, dbField) {\n    if (data !== null) {\n        let array = (filterDelSpaces(data).split(\",\"))\n        if (array.length > 0 && data!==\"\") {\n            return [{$match: {[dbField]: {$all: array}}}]\n        }\n        else if (data===\"\") {\n            return [{$match: {[dbField]:{$size: 0}}}]\n        }\n    }\n    return []\n}\n//endregion\n\nfunction getTabParamOrReturn(data, types, paramsOrResults) {\n    let paramOrResultTypeQuery = []\n    if (data[types] !== null) {\n        let dataSearch = (filterDelSpaces(data[types]).split(\",\"))\n        let occurrences = countOccurrencesFromArray(dataSearch)\n        if (dataSearch.length > 0) {\n            return dataSearch.map(result => {\n                //search the number of ? indicated in request\n                if (result === \"?\") {\n                    return {\n                        $match: {\n                            [paramsOrResults]: {$elemMatch: {type: {$regex: \"\"}}, $size: dataSearch.length}\n                        }\n                    }\n                } else if (dataSearch.length === 1 && result === \"\") {\n                    return {$match: {[paramsOrResults]: {$size: 0}}}\n                } //else search all param by params type and numbers of these types\n                else if (dataSearch.length >= 1) {\n                    return {\n                        $match: {\n                            [paramsOrResults]: {$elemMatch: {type: result}, $size: dataSearch.length},\n                            [types + \".\" + result]: {\n                                $lte: (occurrences[\"?\"] ? occurrences[\"?\"] : 0) + occurrences[result],\n                                $gte: occurrences[result]\n                            }\n                        }\n                    }\n                }\n                // else, there isn't any params in request, we search by other criteria\n                else {\n                    return {$match: {[paramsOrResults]: {$elemMatch: {type: {$regex: \"\"}}}}}\n                }\n            })\n        } else if (dataSearch.length === 0) {\n            return [{$match: {[paramsOrResults]: {$size: dataSearch.length}}}]\n        }\n    }\n    return paramOrResultTypeQuery;\n}\n\n//region query for params\n/** @function\n * @name getParamTypeQuery\n * Get a query to search function param's type in DB\n * $match work to search the appropriate number of params to search and types\n * @param {object} data - post's data\n * @returns {{$match: {params: {$size: number}}}[]|unknown[]|[]}\n */\nfunction getParamTypeQuery(data) {\n    return getTabParamOrReturn(data, \"paramsTypes\", \"params\");\n}\n\n/** @function\n * @name getReturnTypeQuery\n * Get a query to search function return's type in DB\n * @param {object} data - post's data\n * @returns {*[]|{$match: {field: {$regex: data}}}[]}\n */\nfunction getReturnTypeQuery(data) {\n    return getTabParamOrReturn(data, \"returnsTypes\", \"returns\");\n}\n//endregion\n\n//region query for string\n/** @function\n * @name getDescriptionQuery\n * Get a query to search function's description in DB\n * @param {object} data - post's data\n * @returns {*[]|{$match: {field: {$regex: data}}}[]}\n */\nfunction getDescriptionQuery(data) {\n    return getMatchStringRegex (data.description, \"post.description\")\n}\n\n/** @function\n * @name getNameQuery\n * Get a query to search function's name in DB\n * @param {object} data - post's data\n * @returns {*[]|{$match: {field: {$regex: data}}}[]}\n */\nfunction getNameQuery(data) {\n    return getMatchStringRegex (data.functionName, \"name\")\n}\n\n/** @function\n * @name getMatchStringRegex\n * Return an array with a $match for a defined DB field\n * @param {string} data - a string that will be used in regex\n * @param {string} dbField -\n * @returns {*[]|{$match: {field: {$regex:data}}}[]}\n */\nfunction getMatchStringRegex(data, dbField){\n    if (data !== null) {\n        return [{$match: {[dbField]: {$regex: data}}}];\n    }\n    return []\n}\n//endregion\n\n//endregion\n\n\nmodule.exports = {addPost, getPost, updateLikeOrDislike, updatePostResponse, updatePostResponseCommentary, updatePostFunction};\n",
    "static": true,
    "longname": "/Users/gwenael/Documents/cours/L2/decembre_projWeb_makeMeDev/MakeMeDev/DB/postRepository.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 55,
    "kind": "variable",
    "name": "mongoose",
    "memberof": "MakeMeDev/DB/postRepository.js",
    "static": true,
    "longname": "MakeMeDev/DB/postRepository.js~mongoose",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/DB/postRepository.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 56,
    "kind": "variable",
    "name": "postSchema",
    "memberof": "MakeMeDev/DB/postRepository.js",
    "static": true,
    "longname": "MakeMeDev/DB/postRepository.js~postSchema",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/DB/postRepository.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 57,
    "kind": "variable",
    "name": "PostModel",
    "memberof": "MakeMeDev/DB/postRepository.js",
    "static": true,
    "longname": "MakeMeDev/DB/postRepository.js~PostModel",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/DB/postRepository.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 58,
    "kind": "variable",
    "name": "countOccurrencesFromArray",
    "memberof": "MakeMeDev/DB/postRepository.js",
    "static": true,
    "longname": "MakeMeDev/DB/postRepository.js~countOccurrencesFromArray",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/DB/postRepository.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 59,
    "kind": "variable",
    "name": "filterDelSpaces",
    "memberof": "MakeMeDev/DB/postRepository.js",
    "static": true,
    "longname": "MakeMeDev/DB/postRepository.js~filterDelSpaces",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/DB/postRepository.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 60,
    "kind": "variable",
    "name": "ObjectId",
    "memberof": "MakeMeDev/DB/postRepository.js",
    "static": true,
    "longname": "MakeMeDev/DB/postRepository.js~ObjectId",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/DB/postRepository.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 61,
    "kind": "function",
    "name": "addPost",
    "memberof": "MakeMeDev/DB/postRepository.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "MakeMeDev/DB/postRepository.js~addPost",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/DB/postRepository.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Promise<{success: {success: T}}|{error: Error.ValidationError | {[p: string]: ValidatorError | CastError} | number}>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "postData",
        "description": "post to add, should correspond to postModels {@link '../Models/postModels'}."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<{success: {success: T}}",
        "{error: Error.ValidationError ",
        " {[p: string]: ValidatorError ",
        " CastError"
      ],
      "spread": false,
      "description": "| number}>}"
    },
    "ignore": true
  },
  {
    "__docId__": 62,
    "kind": "function",
    "name": "getPost",
    "memberof": "MakeMeDev/DB/postRepository.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "MakeMeDev/DB/postRepository.js~getPost",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/DB/postRepository.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 31,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Promise<{success: {success: T}}|{error: Error.ValidationError | {[p: string]: ValidatorError | CastError} | number}>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "searchedData",
        "description": "data to search in database"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<{success: {success: T}}",
        "{error: Error.ValidationError ",
        " {[p: string]: ValidatorError ",
        " CastError"
      ],
      "spread": false,
      "description": "| number}>}"
    },
    "ignore": true
  },
  {
    "__docId__": 63,
    "kind": "function",
    "name": "getCommentaryId",
    "memberof": "MakeMeDev/DB/postRepository.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "MakeMeDev/DB/postRepository.js~getCommentaryId",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/DB/postRepository.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "params": [
      {
        "name": "result",
        "types": [
          "*"
        ]
      },
      {
        "name": "id",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 64,
    "kind": "function",
    "name": "getResponseId",
    "memberof": "MakeMeDev/DB/postRepository.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "MakeMeDev/DB/postRepository.js~getResponseId",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/DB/postRepository.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 57,
    "undocument": true,
    "params": [
      {
        "name": "result",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 65,
    "kind": "function",
    "name": "updatePost",
    "memberof": "MakeMeDev/DB/postRepository.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "MakeMeDev/DB/postRepository.js~updatePost",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/DB/postRepository.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 61,
    "undocument": true,
    "params": [
      {
        "name": "filter",
        "types": [
          "*"
        ]
      },
      {
        "name": "update",
        "types": [
          "*"
        ]
      },
      {
        "name": "id",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 66,
    "kind": "function",
    "name": "updatePostFunction",
    "memberof": "MakeMeDev/DB/postRepository.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "MakeMeDev/DB/postRepository.js~updatePostFunction",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/DB/postRepository.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 79,
    "undocument": true,
    "params": [
      {
        "name": "functionPost",
        "types": [
          "*"
        ]
      },
      {
        "name": "idPost",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 67,
    "kind": "function",
    "name": "updatePostResponse",
    "memberof": "MakeMeDev/DB/postRepository.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "MakeMeDev/DB/postRepository.js~updatePostResponse",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/DB/postRepository.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 83,
    "undocument": true,
    "params": [
      {
        "name": "responsePost",
        "types": [
          "*"
        ]
      },
      {
        "name": "idPost",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 68,
    "kind": "function",
    "name": "updatePostResponseCommentary",
    "memberof": "MakeMeDev/DB/postRepository.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "MakeMeDev/DB/postRepository.js~updatePostResponseCommentary",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/DB/postRepository.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 87,
    "undocument": true,
    "params": [
      {
        "name": "commentaryResponse",
        "types": [
          "*"
        ]
      },
      {
        "name": "idPost",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 69,
    "kind": "function",
    "name": "updateLikeOrDislike",
    "memberof": "MakeMeDev/DB/postRepository.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "MakeMeDev/DB/postRepository.js~updateLikeOrDislike",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/DB/postRepository.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 91,
    "undocument": true,
    "params": [
      {
        "name": "likeOrDislike",
        "types": [
          "*"
        ]
      },
      {
        "name": "idPost",
        "types": [
          "*"
        ]
      },
      {
        "name": "user",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 70,
    "kind": "function",
    "name": "getPipeline",
    "memberof": "MakeMeDev/DB/postRepository.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "MakeMeDev/DB/postRepository.js~getPipeline",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/DB/postRepository.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 120,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{[]}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "post's data"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "[]"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 71,
    "kind": "function",
    "name": "getTagQuery",
    "memberof": "MakeMeDev/DB/postRepository.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "MakeMeDev/DB/postRepository.js~getTagQuery",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/DB/postRepository.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 132,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{*[]|{$match: {field: {$all: data}}}[]}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "post's data"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*[]",
        "{$match: {field: {$all: data}}}[]"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 72,
    "kind": "function",
    "name": "getMatchFromStringArray",
    "memberof": "MakeMeDev/DB/postRepository.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "MakeMeDev/DB/postRepository.js~getMatchFromStringArray",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/DB/postRepository.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 144,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{[]|[{$match: {field:{$all:data}}}]}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "an array containing strings"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "dbField",
        "description": "field name from DB"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "[]",
        "[{$match: {field:{$all:data}}}]"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 73,
    "kind": "function",
    "name": "getTabParamOrReturn",
    "memberof": "MakeMeDev/DB/postRepository.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "MakeMeDev/DB/postRepository.js~getTabParamOrReturn",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/DB/postRepository.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 158,
    "undocument": true,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      },
      {
        "name": "types",
        "types": [
          "*"
        ]
      },
      {
        "name": "paramsOrResults",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 74,
    "kind": "function",
    "name": "getParamTypeQuery",
    "memberof": "MakeMeDev/DB/postRepository.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "MakeMeDev/DB/postRepository.js~getParamTypeQuery",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/DB/postRepository.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 206,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{{$match: {params: {$size: number}}}[]|unknown[]|[]}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "post's data"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{$match: {params: {$size: number}}}[]|unknown[]|[]"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 75,
    "kind": "function",
    "name": "getReturnTypeQuery",
    "memberof": "MakeMeDev/DB/postRepository.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "MakeMeDev/DB/postRepository.js~getReturnTypeQuery",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/DB/postRepository.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 216,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{*[]|{$match: {field: {$regex: data}}}[]}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "post's data"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*[]",
        "{$match: {field: {$regex: data}}}[]"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 76,
    "kind": "function",
    "name": "getDescriptionQuery",
    "memberof": "MakeMeDev/DB/postRepository.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "MakeMeDev/DB/postRepository.js~getDescriptionQuery",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/DB/postRepository.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 228,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{*[]|{$match: {field: {$regex: data}}}[]}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "post's data"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*[]",
        "{$match: {field: {$regex: data}}}[]"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 77,
    "kind": "function",
    "name": "getNameQuery",
    "memberof": "MakeMeDev/DB/postRepository.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "MakeMeDev/DB/postRepository.js~getNameQuery",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/DB/postRepository.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 238,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{*[]|{$match: {field: {$regex: data}}}[]}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "post's data"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*[]",
        "{$match: {field: {$regex: data}}}[]"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 78,
    "kind": "function",
    "name": "getMatchStringRegex",
    "memberof": "MakeMeDev/DB/postRepository.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "MakeMeDev/DB/postRepository.js~getMatchStringRegex",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/DB/postRepository.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 249,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{*[]|{$match: {field: {$regex:data}}}[]}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "a string that will be used in regex"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "dbField",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*[]",
        "{$match: {field: {$regex:data}}}[]"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 79,
    "kind": "file",
    "name": "MakeMeDev/DB/userRepository.js",
    "content": "const uniqueValidator = require('mongoose-unique-validator')\nconst {userSchema} = require(\"../Models/userModel\");\nconst mongoose = require('mongoose');\nconst ObjectId = mongoose.Types.ObjectId;\nconst {generate, verify} = require(\"password-hash\");\nconst UserModel = mongoose.model('users', userSchema)\n\n/** @function\n * @name signUp\n * Add a new user in database, and return the result of this try\n * @param {object} userData - user to add, should correspond to userModel {@link '../Models/userModels'}.\n * @returns {Promise<{success: *}|{error: Error.ValidationError | {[p: string]: ValidatorError | CastError} | number}>}\n */\nasync function signUp(userData) {\n    userSchema.plugin(uniqueValidator)\n    const doc = new UserModel(userData);\n    doc.password = generate(userData.password)\n    return await doc.save()\n        .then(result => {return {success: filterPassword(result)}})\n        .catch(err => {return {error: err.errors}})\n}\n\n/** @function\n * @name signIn\n * Check if user's data are in database and right, depending on a many fields, and return the result of this try\n * @param {object} userData - data to search in database\n * @returns {Promise<{success: *}|{error: Error.ValidationError | {[p: string]: ValidatorError | CastError} | number}>}\n */\nasync function signIn(userData) {\n    return await UserModel.findOne({  $or: [\n            { pseudo: userData.login  },\n            { mail: userData.login },\n        ]}, { \"__v\": 0} ).lean()\n        .exec()\n        .then(result => {\n            return result===null ? {error: \"login incorrect\"}\n            : verify(userData.password, result.password) ? {success: filterPassword(result)}\n            : {error: \"mot de passe incorrect\"}\n        })\n        .catch(err => {return {error: err.errors}});\n}\n\n\nasync function updateUser(filter, update) {\n    return await UserModel\n        .findOneAndUpdate(\n            filter,\n            update,\n            {new: true, runValidators: true, context: \"query\"})\n        .lean()\n        .exec()\n        .then((result) => {\n            return {success: filterPassword(result)}\n        })\n        .catch(err => {\n            return {error: err.errors}\n        });\n}\n\n/** @function\n * @name updateUserById\n * Update user's data depending on his ID and wanted fields to set\n * @param {object} data - user's data\n * @param update\n * @returns {Promise<{success: Object}|{error}>}\n */\nasync function updateUserById(data, update) {\n    try {\n        userSchema.plugin(uniqueValidator)\n        return await updateUser({_id: ObjectId(data.id)}, update)\n    }\n    catch (e) {\n        return {error : \"erreur lors de la mise à jour de l'utilisateur\"}\n    }\n}\n\n\n//region helpers\n/** @function\n * @name filterPassword\n * Delete user password, to avoid security issues.\n * if we forgot to add lean to delete password, we ensure to return a useless string\n * @param {object} data - an object from where to delete one field : password\n * @returns {object}\n */\nfunction filterPassword(data) {\n    data[\"password\"] = \":)\"\n    delete data.password\n    return data\n}\n\n//endregion\n\nmodule.exports = {signUp, signIn, updateUserById};\n",
    "static": true,
    "longname": "/Users/gwenael/Documents/cours/L2/decembre_projWeb_makeMeDev/MakeMeDev/DB/userRepository.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 80,
    "kind": "variable",
    "name": "uniqueValidator",
    "memberof": "MakeMeDev/DB/userRepository.js",
    "static": true,
    "longname": "MakeMeDev/DB/userRepository.js~uniqueValidator",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/DB/userRepository.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 81,
    "kind": "variable",
    "name": "userSchema",
    "memberof": "MakeMeDev/DB/userRepository.js",
    "static": true,
    "longname": "MakeMeDev/DB/userRepository.js~userSchema",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/DB/userRepository.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 82,
    "kind": "variable",
    "name": "mongoose",
    "memberof": "MakeMeDev/DB/userRepository.js",
    "static": true,
    "longname": "MakeMeDev/DB/userRepository.js~mongoose",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/DB/userRepository.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 83,
    "kind": "variable",
    "name": "ObjectId",
    "memberof": "MakeMeDev/DB/userRepository.js",
    "static": true,
    "longname": "MakeMeDev/DB/userRepository.js~ObjectId",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/DB/userRepository.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 84,
    "kind": "variable",
    "name": "generate",
    "memberof": "MakeMeDev/DB/userRepository.js",
    "static": true,
    "longname": "MakeMeDev/DB/userRepository.js~generate",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/DB/userRepository.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 85,
    "kind": "variable",
    "name": "UserModel",
    "memberof": "MakeMeDev/DB/userRepository.js",
    "static": true,
    "longname": "MakeMeDev/DB/userRepository.js~UserModel",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/DB/userRepository.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 86,
    "kind": "function",
    "name": "signUp",
    "memberof": "MakeMeDev/DB/userRepository.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "MakeMeDev/DB/userRepository.js~signUp",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/DB/userRepository.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Promise<{success: *}|{error: Error.ValidationError | {[p: string]: ValidatorError | CastError} | number}>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "userData",
        "description": "user to add, should correspond to userModel {@link '../Models/userModels'}."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<{success: *}",
        "{error: Error.ValidationError ",
        " {[p: string]: ValidatorError ",
        " CastError"
      ],
      "spread": false,
      "description": "| number}>}"
    },
    "ignore": true
  },
  {
    "__docId__": 87,
    "kind": "function",
    "name": "signIn",
    "memberof": "MakeMeDev/DB/userRepository.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "MakeMeDev/DB/userRepository.js~signIn",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/DB/userRepository.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 29,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Promise<{success: *}|{error: Error.ValidationError | {[p: string]: ValidatorError | CastError} | number}>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "userData",
        "description": "data to search in database"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<{success: *}",
        "{error: Error.ValidationError ",
        " {[p: string]: ValidatorError ",
        " CastError"
      ],
      "spread": false,
      "description": "| number}>}"
    },
    "ignore": true
  },
  {
    "__docId__": 88,
    "kind": "function",
    "name": "updateUser",
    "memberof": "MakeMeDev/DB/userRepository.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "MakeMeDev/DB/userRepository.js~updateUser",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/DB/userRepository.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "params": [
      {
        "name": "filter",
        "types": [
          "*"
        ]
      },
      {
        "name": "update",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 89,
    "kind": "function",
    "name": "updateUserById",
    "memberof": "MakeMeDev/DB/userRepository.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "MakeMeDev/DB/userRepository.js~updateUserById",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/DB/userRepository.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 67,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Promise<{success: Object}|{error}>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "user's data"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "update",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<{success: Object}|{error}>"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 90,
    "kind": "function",
    "name": "filterPassword",
    "memberof": "MakeMeDev/DB/userRepository.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "MakeMeDev/DB/userRepository.js~filterPassword",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/DB/userRepository.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 86,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{object}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "an object from where to delete one field : password"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 91,
    "kind": "file",
    "name": "MakeMeDev/Middlewares/middleware.js",
    "content": "const jwt = require(\"jsonwebtoken\");\n\n/** @function\n * @name authenticateToken\n * Check User's token before authorized some community features\n * @param {Request} req - request received\n * @param {Response} res - response to dispatched\n * @param {Function} next - get control to the next middleware function\n * @returns {*}\n */\nfunction authenticateToken(req, res, next) {\n    const authHeader = req.headers['authorization']\n    const token = authHeader && authHeader.split(' ')[1]\n    if (token == null) return res.sendStatus(401)\n    jwt.verify(token, process.env.TOKEN_SECRET, (err, user ) => {\n        if (err) return res.sendStatus(403)\n        req.user = user.success\n        next()\n    })\n}\n\nmodule.exports = {authenticateToken}\n",
    "static": true,
    "longname": "/Users/gwenael/Documents/cours/L2/decembre_projWeb_makeMeDev/MakeMeDev/Middlewares/middleware.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 92,
    "kind": "variable",
    "name": "jwt",
    "memberof": "MakeMeDev/Middlewares/middleware.js",
    "static": true,
    "longname": "MakeMeDev/Middlewares/middleware.js~jwt",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Middlewares/middleware.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 93,
    "kind": "function",
    "name": "authenticateToken",
    "memberof": "MakeMeDev/Middlewares/middleware.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "MakeMeDev/Middlewares/middleware.js~authenticateToken",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Middlewares/middleware.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{*}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Request"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "request received"
      },
      {
        "nullable": null,
        "types": [
          "Response"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "response to dispatched"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "next",
        "description": "get control to the next middleware function"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 94,
    "kind": "file",
    "name": "MakeMeDev/Models/postModel.js",
    "content": "const mongoose = require('mongoose');\n\n/**\n * Our Post Model used for mongoDB {@link '../DB/postRepository.js'}.\n * @type {module:mongoose.Schema<any>}\n */\nexports.postSchema = new mongoose.Schema({\n        bookMarked: {type: Number, default: 0},\n        shared: {type: Number, default: 0},\n        name: {type: String, required: true},\n        author: {\n            userId: {type: mongoose.Types.ObjectId, required: true},\n            pseudo: {type: String, required: true},\n            avatar: {type: String, required: true},\n            creationDate: {type: String, default:  new Date().getTime() / 1000}\n        },\n        params: [\n            {\n                name: {type: String, required: true},\n                type: {type: String, required: true},\n                description: {type: String, required: true},\n                defaultValue: {type: String}\n            }\n        ],\n        paramsTypes:{},\n        returnsTypes:{},\n        returns:[\n            {\n                name: {type: String},\n                type: {type: String},\n                description: {type: String},\n                defaultValue: {type: String}\n            }],\n        tag: [{type: String, required: true}],\n        post: [\n            {\n                author: {\n                    userId: {type: mongoose.Types.ObjectId, required: true},\n                    pseudo: {type: String, required: true},\n                    avatar: {type: String, required: true},\n                },\n                creationDate: {type: String, default:  new Date().getTime() / 1000},\n                function: {type: String, required: true},\n                description: {type: String, required: true},\n                like: {type: Number, default: 0},\n                dislike: {type: Number, default: 0},\n                totalLike: {type: Number, default: 0},\n                commentary: [\n                    {\n                        author: {\n                            userId: {type: mongoose.Types.ObjectId, required: true},\n                            pseudo: {type: String, required: true},\n                            avatar: {type: String, required: true}\n                        },\n                        commentary: {type: String, required: true},\n                        date: {type: String, default:  new Date().getTime() / 1000}\n                    }\n                ]\n            }\n        ]\n});\n",
    "static": true,
    "longname": "/Users/gwenael/Documents/cours/L2/decembre_projWeb_makeMeDev/MakeMeDev/Models/postModel.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 95,
    "kind": "variable",
    "name": "mongoose",
    "memberof": "MakeMeDev/Models/postModel.js",
    "static": true,
    "longname": "MakeMeDev/Models/postModel.js~mongoose",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Models/postModel.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 96,
    "kind": "file",
    "name": "MakeMeDev/Models/userModel.js",
    "content": "const mongoose = require('mongoose');\nconst {postSchema} = require(\"./postModel\");\n\n/**\n * Our User Model used for mongoDB {@link '../DB/userRepository.js'}.\n * @type {module:mongoose.Schema<any>}\n */\nexports.userSchema = new mongoose.Schema({\n    mail: {type: String, required: true, unique: true},\n    pseudo: {type: String, unique: true, required:true},\n    password: {type: String, required: true},\n    avatar: {type: String, default: \"https://discord.com/channels/690896147404816434/785427941127225354/786182169679757314\"},\n    creationDate: {type: String, default: new Date().getTime() / 1000},\n    activities: {\n        like: [{type: mongoose.Types.ObjectId}],\n        dislike: [{type: mongoose.Types.ObjectId}],\n        response: [{type: mongoose.Types.ObjectId}],\n        commentary: [{type: mongoose.Types.ObjectId}],\n    },\n    post: [{type: mongoose.Types.ObjectId}],\n    bookMark: [{type: mongoose.Types.ObjectId}]\n});\n",
    "static": true,
    "longname": "/Users/gwenael/Documents/cours/L2/decembre_projWeb_makeMeDev/MakeMeDev/Models/userModel.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 97,
    "kind": "variable",
    "name": "mongoose",
    "memberof": "MakeMeDev/Models/userModel.js",
    "static": true,
    "longname": "MakeMeDev/Models/userModel.js~mongoose",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Models/userModel.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 98,
    "kind": "variable",
    "name": "postSchema",
    "memberof": "MakeMeDev/Models/userModel.js",
    "static": true,
    "longname": "MakeMeDev/Models/userModel.js~postSchema",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Models/userModel.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 99,
    "kind": "file",
    "name": "MakeMeDev/Routes/const.js",
    "content": "exports.url = process.env.URL\n",
    "static": true,
    "longname": "/Users/gwenael/Documents/cours/L2/decembre_projWeb_makeMeDev/MakeMeDev/Routes/const.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 100,
    "kind": "file",
    "name": "MakeMeDev/Routes/post.js",
    "content": "const {sendPost, getPost, sendVote, addResponse, addCommentary, updateFunction} = require(\"../Controllers/postController\");\nconst {url} = require(\"./const\");\nconst {authenticateToken} = require(\"../Middlewares/middleware\")\n\nmodule.exports = (app) => {\n    app.get(url + \"post\",  getPost);\n    app.post(url + \"post\", authenticateToken,  sendPost);\n    app.post(url + \"post-update\", authenticateToken, updateFunction);\n    app.post(url + \"post-add-response\", authenticateToken, addResponse);\n    app.post(url + \"post-vote\", authenticateToken, sendVote);\n    app.post(url + \"post-add-commentary\", authenticateToken, addCommentary);\n};\n",
    "static": true,
    "longname": "/Users/gwenael/Documents/cours/L2/decembre_projWeb_makeMeDev/MakeMeDev/Routes/post.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 101,
    "kind": "variable",
    "name": "sendPost",
    "memberof": "MakeMeDev/Routes/post.js",
    "static": true,
    "longname": "MakeMeDev/Routes/post.js~sendPost",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Routes/post.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 102,
    "kind": "variable",
    "name": "url",
    "memberof": "MakeMeDev/Routes/post.js",
    "static": true,
    "longname": "MakeMeDev/Routes/post.js~url",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Routes/post.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 103,
    "kind": "variable",
    "name": "authenticateToken",
    "memberof": "MakeMeDev/Routes/post.js",
    "static": true,
    "longname": "MakeMeDev/Routes/post.js~authenticateToken",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Routes/post.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 104,
    "kind": "file",
    "name": "MakeMeDev/Routes/user.js",
    "content": "const {signIn, signUp, updateUser} = require(\"../Controllers/usersController\");\nconst {authenticateToken} = require(\"../Middlewares/middleware\")\nconst {url} = require(\"./const\");\n\nmodule.exports = (app) => {\n    app.get(url + \"users\", signIn);\n    app.post(url + \"users\", signUp);\n    app.post(url + \"update-users\", authenticateToken, updateUser);\n};\n",
    "static": true,
    "longname": "/Users/gwenael/Documents/cours/L2/decembre_projWeb_makeMeDev/MakeMeDev/Routes/user.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 105,
    "kind": "variable",
    "name": "signIn",
    "memberof": "MakeMeDev/Routes/user.js",
    "static": true,
    "longname": "MakeMeDev/Routes/user.js~signIn",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Routes/user.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 106,
    "kind": "variable",
    "name": "authenticateToken",
    "memberof": "MakeMeDev/Routes/user.js",
    "static": true,
    "longname": "MakeMeDev/Routes/user.js~authenticateToken",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Routes/user.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 107,
    "kind": "variable",
    "name": "url",
    "memberof": "MakeMeDev/Routes/user.js",
    "static": true,
    "longname": "MakeMeDev/Routes/user.js~url",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Routes/user.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 108,
    "kind": "file",
    "name": "MakeMeDev/Services/postService.js",
    "content": "const {getHandler, getHandlerForUserPost} = require(\"../Tools/Services/responseHandler\");\nconst {addPost, getPost, updateLikeOrDislike, updatePostResponse, updatePostResponseCommentary, updatePostFunction} = require(\"../DB/postRepository\")\nconst {countOccurrencesFromArray} = require(\"../Tools/Common/countOccurence\")\nconst {updateUserById} = require(\"../DB/userRepository\");\nconst {generateAccessToken} = require(\"../Tools/token\")\nconst {isDefinedAndNotNull, isUndefinedOrNull} = require(\"../Tools/Common/undefinedControl\")\n\nlet test = \"\"\n\n//region exported methods\n\n/** @function\n * @name get\n * Get posts depending on a request get thanks to a string with strict typography to demarcate\n * each field we have to check, and if not exist it will not be searched at all\n * Structure : [functionName](param1, param2, ?){returnedVar}\"functionDescription\"#tag1, tag2, tag3#\n * @param {string} post - post's field to find in database\n * @returns {Promise<{code: number, body: {error: *}}|{code: number, body: *}|{code: number, body: *}|{code: number, body: {error: string}}>}\n */\nasync function get(post) {\n    const objectSearchPost = getSearchPost(post)\n    return getHandler(sortAllPostByLike(await getPost(objectSearchPost)), \"ce post n'existe pas\");\n}\n\nasync function updateFunction(functionPost, idPost, user) {\n    if (functionPost) {\n        return getHandler(await updatePostFunction(functionPost, idPost), \"mise à jour de la fonction réussie\")\n    }\n    return getHandler({error: \"update response failed\"}, \"mise à jou du post impossible\");\n}\n\n\n/** @function\n * @name create\n * Create a new post, that will be add in database.\n * We had one more field : paramsTypes to have an object with a number of occurrence of each params\n * It will make it simpler to search if a post contains an amount of params\n * @param {object} post - post to add, should be really similar to postModels {@link '../Models/postModels'}.\n * @param {object} user - user to update, should be really similar to userModels {@link '../Models/userModels'}.\n * @returns {Promise<{code: number, body: {error: {}}}|{code: number, body: *}|{code: number, body: {error: string}}>}\n */\nasync function create(post, user) {\n    setTypes(post, \"params\");\n    setTypes(post, \"returns\");\n    addAuthor(user ,post)\n    addAuthor(user ,post.post[0])\n    const result = await addPost(post, user);\n    if (result.success) {\n        const userRes = await updateUserById({id: user._id}, {$push: {post: result.success._id}});\n        return closeUserUpdateAction(userRes, result, \"post créé, mais mise à jour des données utilisateur impossible\")\n    }\n    return getHandler(result);\n}\n\n/*\nasync function updateUserIfSuccess(isSuccess, function) {\n    if (isSuccess){\n        const userRes = await function\n        generateAccessToken(userRes)\n        return getHandlerForUserPost(userRes,result, \"mise à jour des votes utilisateur impossible\");\n    }\n}*/\n\n\n\nasync function updateVote(vote, idPost, user) {\n    const likeOrDislike = vote === 1 ? \"like\" : \"dislike\"\n    const opposite = vote === 1 ? \"dislike\" : \"like\"\n    let result = await updateLikeOrDislike(likeOrDislike, idPost, user)\n    //check if updated , then update user\n    if (isDefinedAndNotNull(result.success)) {\n        const userRes = await updateUserById({id: user._id}, {\n            $push: {[\"activities.\" + likeOrDislike]: result.postId},\n            $pull: {[\"activities.\" + opposite]: result.postId}\n        })\n        return closeUserUpdateAction(userRes, result, \"ajout du \" + likeOrDislike + \" sur le post \" + idPost + \" impossible\")\n    }\n    return getHandler({error: \"update vote failed\"}, \"mise à jour des votes du post impossible\");\n}\n\nasync function addPostResponse(responsePost, idPost, user) {\n    addAuthor(user, responsePost)\n    addDate(responsePost, \"creationDate\")\n    if (responsePost['function'] && responsePost['description']) {\n        const result = await updatePostResponse(responsePost, idPost, user)\n        if (result.success !== null && result.success !== undefined) {\n            const userRes = await updateUserById({id: user._id}, {$push: {[\"activities.response\"]: result.responseId}})\n            return closeUserUpdateAction(userRes, result, \"ajout d'une nouvelle reponse , mais mis à jour de l'utilisateur impossible\")\n        }\n    }\n    return getHandler({error: \"update response failed\"}, \"ajout de reponse au post impossible\");\n}\n\nasync function addCommentary(commentaryPost, idPost, user) {\n    addAuthor(user, commentaryPost)\n    addDate(commentaryPost, \"date\")\n    if (commentaryPost['commentary']) {\n        const result = await updatePostResponseCommentary(commentaryPost, idPost, user)\n        if (result.success !== null && result.success !== undefined) {\n            const userRes = await updateUserById({id: user._id}, {$push: {[\"activities.commentary\"]: result.commentaryId}})\n            return closeUserUpdateAction(userRes, result, \"ajout du commentaires, mais mis à jour de l'utilisateur impossible\")\n        }\n    }\n    return getHandler({error: \"update response failed\"}, \"ajout du commentaires impossible\");\n}\n\n//endregion\n\n\n//region not exported functions\nfunction closeUserUpdateAction(userData, postData, msg=\"erreur en base de données\"){\n    generateAccessToken(userData)\n    return getHandlerForUserPost(userData, postData, \"ajout du commentaires impossible\");\n}\n\n\nfunction addAuthor(author, object){\n    object.author =  {\n        \"userId\": author._id,\n        \"pseudo\": author.pseudo,\n        \"avatar\": author.avatar\n    }\n}\n\nfunction addDate(object, fieldName=\"creationDate\"){\n    object[fieldName] = new Date().getTime() / 1000\n}\n\n\nfunction setTypes(post, paramsOrResults) {\n    if (isUndefinedOrNull(post[paramsOrResults])) {\n        post[paramsOrResults] = []\n    }\n    let arr = []\n    for (let element of post[paramsOrResults]) {\n        arr.push(element.type)\n    }\n    post[paramsOrResults + \"Types\"] = countOccurrencesFromArray(arr)\n}\n\nfunction getSearchPost(post) {\n    test = post\n    return {\n        functionName: getStringDelimitedArea(\"[\", \"]\"),\n        paramsTypes: getStringDelimitedArea(\"(\", \")\"),\n        returnsTypes: getStringDelimitedArea(\"{\", \"}\"),\n        description: getSearchValue('\"'),\n        tag: getSearchValue('#')\n    };\n}\n\n/** @function\n * @name getStringDelimitedArea\n * Get a string in a delimited area defined by first and last delimiter\n * If the second delimiter isn't found in string, return a string from first delimiter to end\n * @param {string} test - string to analyse\n * @param {string} firstDelimiter - first delimiter used  to get the result\n * @param {string} lastDelimiter - last delimiter used to get the result\n * @returns {string|null}\n */\nfunction getStringDelimitedArea(firstDelimiter, lastDelimiter) {\n    if (test.includes(firstDelimiter) && test.includes(lastDelimiter)) {\n        let str = test.substring(test.lastIndexOf(firstDelimiter) + 1, test.lastIndexOf(lastDelimiter))\n        test = test.substring(test.lastIndexOf(lastDelimiter) + 1, test.length)\n        return str\n    } else {\n        return null;\n    }\n}\n\n/** @function\n * @name getSearchValue\n * Get a string in a delimited area defined by a delimiter\n * If there is only one delimiter, return null\n * @param {string} test - string to analyse\n * @param {string} delimiter - delimiter used to get the result\n * @returns {string|null}\n */\nfunction getSearchValue(delimiter) {\n    let value = []\n    let countCharacter = 0;\n    test.split(\"\").map((searchCharacter, index) => {\n        if (searchCharacter === delimiter) {\n            countCharacter++\n            value.push(index)\n        }\n    })\n\n    if (countCharacter >= 2) {\n        let str = test.substring(value[0] + 1, value[1])\n        test = test.substring(value[1] + 1, test.length)\n        return str\n    } else {\n        return null;\n    }\n}\n\nfunction sortAllPostByLike(data) {\n    if (isDefinedAndNotNull(data.success)) {\n        for (let func of data.success) {\n            func = sortPostByLikes(func)\n        }\n    }\n    return data\n}\n\nfunction sortPostByLikes(data) {\n    data.post.sort(function (a, b) {\n        return (b.like - b.dislike) - (a.like - a.dislike);\n    })\n    return data\n}\n\n//endregion\n\nmodule.exports = {create, get, updateVote, addPostResponse, addCommentary, updateFunction};\n",
    "static": true,
    "longname": "/Users/gwenael/Documents/cours/L2/decembre_projWeb_makeMeDev/MakeMeDev/Services/postService.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 109,
    "kind": "variable",
    "name": "getHandler",
    "memberof": "MakeMeDev/Services/postService.js",
    "static": true,
    "longname": "MakeMeDev/Services/postService.js~getHandler",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Services/postService.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 110,
    "kind": "variable",
    "name": "addPost",
    "memberof": "MakeMeDev/Services/postService.js",
    "static": true,
    "longname": "MakeMeDev/Services/postService.js~addPost",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Services/postService.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 111,
    "kind": "variable",
    "name": "countOccurrencesFromArray",
    "memberof": "MakeMeDev/Services/postService.js",
    "static": true,
    "longname": "MakeMeDev/Services/postService.js~countOccurrencesFromArray",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Services/postService.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 112,
    "kind": "variable",
    "name": "updateUserById",
    "memberof": "MakeMeDev/Services/postService.js",
    "static": true,
    "longname": "MakeMeDev/Services/postService.js~updateUserById",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Services/postService.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 113,
    "kind": "variable",
    "name": "generateAccessToken",
    "memberof": "MakeMeDev/Services/postService.js",
    "static": true,
    "longname": "MakeMeDev/Services/postService.js~generateAccessToken",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Services/postService.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 114,
    "kind": "variable",
    "name": "isDefinedAndNotNull",
    "memberof": "MakeMeDev/Services/postService.js",
    "static": true,
    "longname": "MakeMeDev/Services/postService.js~isDefinedAndNotNull",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Services/postService.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 115,
    "kind": "variable",
    "name": "test",
    "memberof": "MakeMeDev/Services/postService.js",
    "static": true,
    "longname": "MakeMeDev/Services/postService.js~test",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Services/postService.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 116,
    "kind": "function",
    "name": "get",
    "memberof": "MakeMeDev/Services/postService.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "MakeMeDev/Services/postService.js~get",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Services/postService.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 20,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Promise<{code: number, body: {error: *}}|{code: number, body: *}|{code: number, body: *}|{code: number, body: {error: string}}>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "post",
        "description": "post's field to find in database"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<{code: number, body: {error: *}}|{code: number, body: *}|{code: number, body: *}|{code: number, body: {error: string}}>"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 117,
    "kind": "function",
    "name": "updateFunction",
    "memberof": "MakeMeDev/Services/postService.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "MakeMeDev/Services/postService.js~updateFunction",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Services/postService.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "params": [
      {
        "name": "functionPost",
        "types": [
          "*"
        ]
      },
      {
        "name": "idPost",
        "types": [
          "*"
        ]
      },
      {
        "name": "user",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 118,
    "kind": "function",
    "name": "create",
    "memberof": "MakeMeDev/Services/postService.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "MakeMeDev/Services/postService.js~create",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Services/postService.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 42,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Promise<{code: number, body: {error: {}}}|{code: number, body: *}|{code: number, body: {error: string}}>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "post",
        "description": "post to add, should be really similar to postModels {@link '../Models/postModels'}."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "user",
        "description": "user to update, should be really similar to userModels {@link '../Models/userModels'}."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<{code: number, body: {error: {}}}|{code: number, body: *}|{code: number, body: {error: string}}>"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 119,
    "kind": "function",
    "name": "updateVote",
    "memberof": "MakeMeDev/Services/postService.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "MakeMeDev/Services/postService.js~updateVote",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Services/postService.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 66,
    "undocument": true,
    "params": [
      {
        "name": "vote",
        "types": [
          "*"
        ]
      },
      {
        "name": "idPost",
        "types": [
          "*"
        ]
      },
      {
        "name": "user",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 120,
    "kind": "function",
    "name": "addPostResponse",
    "memberof": "MakeMeDev/Services/postService.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "MakeMeDev/Services/postService.js~addPostResponse",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Services/postService.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 81,
    "undocument": true,
    "params": [
      {
        "name": "responsePost",
        "types": [
          "*"
        ]
      },
      {
        "name": "idPost",
        "types": [
          "*"
        ]
      },
      {
        "name": "user",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 121,
    "kind": "function",
    "name": "addCommentary",
    "memberof": "MakeMeDev/Services/postService.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "MakeMeDev/Services/postService.js~addCommentary",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Services/postService.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 94,
    "undocument": true,
    "params": [
      {
        "name": "commentaryPost",
        "types": [
          "*"
        ]
      },
      {
        "name": "idPost",
        "types": [
          "*"
        ]
      },
      {
        "name": "user",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 122,
    "kind": "function",
    "name": "closeUserUpdateAction",
    "memberof": "MakeMeDev/Services/postService.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "MakeMeDev/Services/postService.js~closeUserUpdateAction",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Services/postService.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 111,
    "undocument": true,
    "params": [
      {
        "name": "userData",
        "types": [
          "*"
        ]
      },
      {
        "name": "postData",
        "types": [
          "*"
        ]
      },
      {
        "name": "msg",
        "optional": true,
        "types": [
          "string"
        ],
        "defaultRaw": "erreur en base de données",
        "defaultValue": "erreur en base de données"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 123,
    "kind": "function",
    "name": "addAuthor",
    "memberof": "MakeMeDev/Services/postService.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "MakeMeDev/Services/postService.js~addAuthor",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Services/postService.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 117,
    "undocument": true,
    "params": [
      {
        "name": "author",
        "types": [
          "*"
        ]
      },
      {
        "name": "object",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 124,
    "kind": "function",
    "name": "addDate",
    "memberof": "MakeMeDev/Services/postService.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "MakeMeDev/Services/postService.js~addDate",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Services/postService.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 125,
    "undocument": true,
    "params": [
      {
        "name": "object",
        "types": [
          "*"
        ]
      },
      {
        "name": "fieldName",
        "optional": true,
        "types": [
          "string"
        ],
        "defaultRaw": "creationDate",
        "defaultValue": "creationDate"
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 125,
    "kind": "function",
    "name": "setTypes",
    "memberof": "MakeMeDev/Services/postService.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "MakeMeDev/Services/postService.js~setTypes",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Services/postService.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 130,
    "undocument": true,
    "params": [
      {
        "name": "post",
        "types": [
          "*"
        ]
      },
      {
        "name": "paramsOrResults",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 126,
    "kind": "function",
    "name": "getSearchPost",
    "memberof": "MakeMeDev/Services/postService.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "MakeMeDev/Services/postService.js~getSearchPost",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Services/postService.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 141,
    "undocument": true,
    "params": [
      {
        "name": "post",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"functionName\": *, \"paramsTypes\": *, \"returnsTypes\": *, \"description\": *, \"tag\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 127,
    "kind": "function",
    "name": "getStringDelimitedArea",
    "memberof": "MakeMeDev/Services/postService.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "MakeMeDev/Services/postService.js~getStringDelimitedArea",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Services/postService.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 161,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{string|null}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "test",
        "description": "string to analyse"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "firstDelimiter",
        "description": "first delimiter used  to get the result"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "lastDelimiter",
        "description": "last delimiter used to get the result"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string",
        "null"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 128,
    "kind": "function",
    "name": "getSearchValue",
    "memberof": "MakeMeDev/Services/postService.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "MakeMeDev/Services/postService.js~getSearchValue",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Services/postService.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 179,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{string|null}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "test",
        "description": "string to analyse"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "delimiter",
        "description": "delimiter used to get the result"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string",
        "null"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 129,
    "kind": "function",
    "name": "sortAllPostByLike",
    "memberof": "MakeMeDev/Services/postService.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "MakeMeDev/Services/postService.js~sortAllPostByLike",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Services/postService.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 198,
    "undocument": true,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 130,
    "kind": "function",
    "name": "sortPostByLikes",
    "memberof": "MakeMeDev/Services/postService.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "MakeMeDev/Services/postService.js~sortPostByLikes",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Services/postService.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 207,
    "undocument": true,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 131,
    "kind": "file",
    "name": "MakeMeDev/Services/usersService.js",
    "content": "const {getHandler} = require(\"../Tools/Services/responseHandler\");\nconst {signUp, signIn, updateUserById} = require(\"../DB/userRepository\");\nconst {generateAccessToken} = require(\"../Tools/token\")\nconst {setUpdateValue} = require('../Tools/DB/requestOperator')\n\n//region exported functions\n/** @function\n * @name addUser\n * Create a new user, that will be add in database\n * @param {object} user - user to add, should be really similar to UserModel {@link '../Models/userModel'}.\n * @returns {Promise<{code: number, body: {error: string}}|{code: number, body: {error: *}}|{code: number, body: *}>}\n */\nasync function addUser(user) {\n    const result = await signUp(user);\n    return closeUserAction(result )\n}\n\n/** @function\n * @name getUser\n * Get users depending on field we want to found\n * @param {object} user - user's data needed to signIn\n * @returns {Promise<{code: number, body: {error: string}}|{code: number, body: {error: *}}|{code: number, body: *}>}\n */\nasync function getUser(user) {\n    const userData = await signIn(user);\n    return closeUserAction(userData,\"aucun compte ne correspond à cette recherche\" )\n}\n\nasync function updateUser(user) {\n    const userData = await updateUserById(user, setUpdateValue(user, [\"pseudo\", \"mail\", \"avatar\"]));\n    return closeUserAction(userData, \"ce compte n'existe pas, impossible de mettre à jour\")\n}\n//endregion\n\n//region not exported function\nfunction closeUserAction(userData, msg=\"erreur en base de données\"){\n    generateAccessToken(userData);\n    return getHandler(userData , msg)\n}\n//endregion\n\nmodule.exports = {addUser, getUser, updateUser};\n",
    "static": true,
    "longname": "/Users/gwenael/Documents/cours/L2/decembre_projWeb_makeMeDev/MakeMeDev/Services/usersService.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 132,
    "kind": "variable",
    "name": "getHandler",
    "memberof": "MakeMeDev/Services/usersService.js",
    "static": true,
    "longname": "MakeMeDev/Services/usersService.js~getHandler",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Services/usersService.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 133,
    "kind": "variable",
    "name": "signUp",
    "memberof": "MakeMeDev/Services/usersService.js",
    "static": true,
    "longname": "MakeMeDev/Services/usersService.js~signUp",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Services/usersService.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 134,
    "kind": "variable",
    "name": "generateAccessToken",
    "memberof": "MakeMeDev/Services/usersService.js",
    "static": true,
    "longname": "MakeMeDev/Services/usersService.js~generateAccessToken",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Services/usersService.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 135,
    "kind": "variable",
    "name": "setUpdateValue",
    "memberof": "MakeMeDev/Services/usersService.js",
    "static": true,
    "longname": "MakeMeDev/Services/usersService.js~setUpdateValue",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Services/usersService.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 136,
    "kind": "function",
    "name": "addUser",
    "memberof": "MakeMeDev/Services/usersService.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "MakeMeDev/Services/usersService.js~addUser",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Services/usersService.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 13,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Promise<{code: number, body: {error: string}}|{code: number, body: {error: *}}|{code: number, body: *}>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "user",
        "description": "user to add, should be really similar to UserModel {@link '../Models/userModel'}."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<{code: number, body: {error: string}}|{code: number, body: {error: *}}|{code: number, body: *}>"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 137,
    "kind": "function",
    "name": "getUser",
    "memberof": "MakeMeDev/Services/usersService.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "MakeMeDev/Services/usersService.js~getUser",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Services/usersService.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 24,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Promise<{code: number, body: {error: string}}|{code: number, body: {error: *}}|{code: number, body: *}>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "user",
        "description": "user's data needed to signIn"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<{code: number, body: {error: string}}|{code: number, body: {error: *}}|{code: number, body: *}>"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 138,
    "kind": "function",
    "name": "updateUser",
    "memberof": "MakeMeDev/Services/usersService.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "MakeMeDev/Services/usersService.js~updateUser",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Services/usersService.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "params": [
      {
        "name": "user",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 139,
    "kind": "function",
    "name": "closeUserAction",
    "memberof": "MakeMeDev/Services/usersService.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "MakeMeDev/Services/usersService.js~closeUserAction",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Services/usersService.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "params": [
      {
        "name": "userData",
        "types": [
          "*"
        ]
      },
      {
        "name": "msg",
        "optional": true,
        "types": [
          "string"
        ],
        "defaultRaw": "erreur en base de données",
        "defaultValue": "erreur en base de données"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 140,
    "kind": "file",
    "name": "MakeMeDev/Test/config/MemoryDataBaseServer.js",
    "content": "const { MongoMemoryServer } = require('mongodb-memory-server');\n\nclass MemoryDatabaseServer {\n  constructor() {\n    this.mongod = new MongoMemoryServer({\n      binary: {\n        version: '4.0.3',\n      },\n      autoStart: false,\n    });\n  }\n\n  start() {\n    return this.mongod.start();\n  }\n\n  stop() {\n    return this.mongod.stop();\n  }\n\n  getConnectionString() {\n    return this.mongod.getUri();\n  }\n}\n\nmodule.exports = new MemoryDatabaseServer();\n",
    "static": true,
    "longname": "/Users/gwenael/Documents/cours/L2/decembre_projWeb_makeMeDev/MakeMeDev/Test/config/MemoryDataBaseServer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 141,
    "kind": "variable",
    "name": "MongoMemoryServer",
    "memberof": "MakeMeDev/Test/config/MemoryDataBaseServer.js",
    "static": true,
    "longname": "MakeMeDev/Test/config/MemoryDataBaseServer.js~MongoMemoryServer",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Test/config/MemoryDataBaseServer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 142,
    "kind": "class",
    "name": "MemoryDatabaseServer",
    "memberof": "MakeMeDev/Test/config/MemoryDataBaseServer.js",
    "static": true,
    "longname": "MakeMeDev/Test/config/MemoryDataBaseServer.js~MemoryDatabaseServer",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Test/config/MemoryDataBaseServer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 143,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "MakeMeDev/Test/config/MemoryDataBaseServer.js~MemoryDatabaseServer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "MakeMeDev/Test/config/MemoryDataBaseServer.js~MemoryDatabaseServer#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 4,
    "undocument": true
  },
  {
    "__docId__": 144,
    "kind": "member",
    "name": "mongod",
    "memberof": "MakeMeDev/Test/config/MemoryDataBaseServer.js~MemoryDatabaseServer",
    "static": false,
    "longname": "MakeMeDev/Test/config/MemoryDataBaseServer.js~MemoryDatabaseServer#mongod",
    "access": "public",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 145,
    "kind": "method",
    "name": "start",
    "memberof": "MakeMeDev/Test/config/MemoryDataBaseServer.js~MemoryDatabaseServer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "MakeMeDev/Test/config/MemoryDataBaseServer.js~MemoryDatabaseServer#start",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 146,
    "kind": "method",
    "name": "stop",
    "memberof": "MakeMeDev/Test/config/MemoryDataBaseServer.js~MemoryDatabaseServer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "MakeMeDev/Test/config/MemoryDataBaseServer.js~MemoryDatabaseServer#stop",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 147,
    "kind": "method",
    "name": "getConnectionString",
    "memberof": "MakeMeDev/Test/config/MemoryDataBaseServer.js~MemoryDatabaseServer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "MakeMeDev/Test/config/MemoryDataBaseServer.js~MemoryDatabaseServer#getConnectionString",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 148,
    "kind": "file",
    "name": "MakeMeDev/Test/config/environment.js",
    "content": "const NodeEnvironment = require('jest-environment-node');\n\nconst MemoryDatabaseServer = require('../config/MemoryDataBaseServer');\n\nclass CustomEnvironment extends NodeEnvironment {\n    async setup() {\n        await super.setup();\n\n        this.global.__DB_URL__ = await MemoryDatabaseServer.getConnectionString();\n    }\n\n    async teardown() {\n        await super.teardown();\n    }\n\n    runScript(script) {\n        return super.runScript(script);\n    }\n}\n\nmodule.exports = CustomEnvironment;\n",
    "static": true,
    "longname": "/Users/gwenael/Documents/cours/L2/decembre_projWeb_makeMeDev/MakeMeDev/Test/config/environment.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 149,
    "kind": "variable",
    "name": "NodeEnvironment",
    "memberof": "MakeMeDev/Test/config/environment.js",
    "static": true,
    "longname": "MakeMeDev/Test/config/environment.js~NodeEnvironment",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Test/config/environment.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 150,
    "kind": "variable",
    "name": "MemoryDatabaseServer",
    "memberof": "MakeMeDev/Test/config/environment.js",
    "static": true,
    "longname": "MakeMeDev/Test/config/environment.js~MemoryDatabaseServer",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Test/config/environment.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 151,
    "kind": "class",
    "name": "CustomEnvironment",
    "memberof": "MakeMeDev/Test/config/environment.js",
    "static": true,
    "longname": "MakeMeDev/Test/config/environment.js~CustomEnvironment",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Test/config/environment.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "interface": false,
    "extends": [
      "NodeEnvironment"
    ],
    "ignore": true
  },
  {
    "__docId__": 152,
    "kind": "method",
    "name": "setup",
    "memberof": "MakeMeDev/Test/config/environment.js~CustomEnvironment",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "MakeMeDev/Test/config/environment.js~CustomEnvironment#setup",
    "access": "public",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 153,
    "kind": "method",
    "name": "teardown",
    "memberof": "MakeMeDev/Test/config/environment.js~CustomEnvironment",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "MakeMeDev/Test/config/environment.js~CustomEnvironment#teardown",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 154,
    "kind": "method",
    "name": "runScript",
    "memberof": "MakeMeDev/Test/config/environment.js~CustomEnvironment",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "MakeMeDev/Test/config/environment.js~CustomEnvironment#runScript",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "params": [
      {
        "name": "script",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 155,
    "kind": "file",
    "name": "MakeMeDev/Test/config/launcher.js",
    "content": "const supertest = require('supertest');\nconst {app} = require(\"../../app\")\n\nconst request = supertest(app);\nconst {url} = require(\"../../Routes/const\");\n\nmodule.exports = {request, url}\n",
    "static": true,
    "longname": "/Users/gwenael/Documents/cours/L2/decembre_projWeb_makeMeDev/MakeMeDev/Test/config/launcher.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 156,
    "kind": "variable",
    "name": "supertest",
    "memberof": "MakeMeDev/Test/config/launcher.js",
    "static": true,
    "longname": "MakeMeDev/Test/config/launcher.js~supertest",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Test/config/launcher.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 157,
    "kind": "variable",
    "name": "app",
    "memberof": "MakeMeDev/Test/config/launcher.js",
    "static": true,
    "longname": "MakeMeDev/Test/config/launcher.js~app",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Test/config/launcher.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 158,
    "kind": "variable",
    "name": "request",
    "memberof": "MakeMeDev/Test/config/launcher.js",
    "static": true,
    "longname": "MakeMeDev/Test/config/launcher.js~request",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Test/config/launcher.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 159,
    "kind": "variable",
    "name": "url",
    "memberof": "MakeMeDev/Test/config/launcher.js",
    "static": true,
    "longname": "MakeMeDev/Test/config/launcher.js~url",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Test/config/launcher.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 160,
    "kind": "file",
    "name": "MakeMeDev/Test/config/setup.js",
    "content": "const MemoryDatabaseServer = require('../config/MemoryDataBaseServer');\n\nmodule.exports = async () => {\n    await MemoryDatabaseServer.start();\n};\n",
    "static": true,
    "longname": "/Users/gwenael/Documents/cours/L2/decembre_projWeb_makeMeDev/MakeMeDev/Test/config/setup.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 161,
    "kind": "variable",
    "name": "MemoryDatabaseServer",
    "memberof": "MakeMeDev/Test/config/setup.js",
    "static": true,
    "longname": "MakeMeDev/Test/config/setup.js~MemoryDatabaseServer",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Test/config/setup.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 162,
    "kind": "file",
    "name": "MakeMeDev/Test/config/setupAfterEnv.js",
    "content": "require('dotenv').config();\n\nconst databaseHelper = require('../../Tools/DB/database');\n\nbeforeAll(() => {\n    return databaseHelper.connect();\n});\n\nbeforeEach(() => {\n    return databaseHelper.truncate();\n});\n\nafterAll(() => {\n    return databaseHelper.disconnect();\n});\n",
    "static": true,
    "longname": "/Users/gwenael/Documents/cours/L2/decembre_projWeb_makeMeDev/MakeMeDev/Test/config/setupAfterEnv.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 163,
    "kind": "variable",
    "name": "databaseHelper",
    "memberof": "MakeMeDev/Test/config/setupAfterEnv.js",
    "static": true,
    "longname": "MakeMeDev/Test/config/setupAfterEnv.js~databaseHelper",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Test/config/setupAfterEnv.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 164,
    "kind": "file",
    "name": "MakeMeDev/Test/config/teardown.js",
    "content": "const MemoryDatabaseServer = require('../config/MemoryDataBaseServer');\n\nmodule.exports = async () => {\n    await MemoryDatabaseServer.stop();\n};\n",
    "static": true,
    "longname": "/Users/gwenael/Documents/cours/L2/decembre_projWeb_makeMeDev/MakeMeDev/Test/config/teardown.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 165,
    "kind": "variable",
    "name": "MemoryDatabaseServer",
    "memberof": "MakeMeDev/Test/config/teardown.js",
    "static": true,
    "longname": "MakeMeDev/Test/config/teardown.js~MemoryDatabaseServer",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Test/config/teardown.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 166,
    "kind": "file",
    "name": "MakeMeDev/Test/config/testHelper.js",
    "content": "const { request, url} = require(\"./launcher\")\n\n//region functions adding expects\n/** @function\n * @name expectExcept\n * Add Expects where response object has a key containing field defined by expected keys.\n * If there should be some keys to avoid, we describe the exceptKeys, like for user's password .\n * @param {array} resKeys - an array containing keys from the response\n * @param {array} expectedKeys - an array containing expected keys (if adding username, we should find this field)\n * @param {array} exceptKeys - an array with exception keys, that we don't wan't to check\n */\nfunction expectExcept(resKeys, expectedKeys, exceptKeys=[]){\n    for (let key of expectedKeys){\n        if (!exceptKeys.includes(key)) {\n            expect(resKeys).toContain(key)\n        }\n    }\n}\n\n/** @function\n * @name expectedResponseOnUserUpsert\n * Add an Expect status 200, and check if the response body.success contains user & post keys.\n * @param {object} response - an object containing response's data\n */\nfunction expectedResponseOnUserUpsert(response){\n    expectedStatus(response)\n    //expect().toStrictEqual([\"user\", \"post\"])\n    expectExcept(  Object.keys(getBodyRes(response)), [ \"user\", \"post\"] )\n}\n\n/** @function\n * @name expectedStatus\n * Add an Expect status 200.\n * @param {object} response - an object containing response's data\n */\nfunction expectedStatus(response){\n    expect(response.status).toBe(200);\n}\n\n//endregion\n\n//region other functions\n//region getter of object path (defined by our postModel architecture)\n/** @function\n * @name getBodyRes\n * Return the body from a response, use if a day we change response body structure.\n * This way, it will be easy to set the body content\n * @param {object} response - response from api\n * @returns {SrvPoller.success|{post, user, token}|string|boolean|Event|null}\n */\nfunction getBodyRes(response){\n    try {\n        return response.body.success\n    }catch (e) {\n        return null\n    }\n}\n\n/** @function\n * @name getPostAt\n * Get a post from a response at a defined position thanks to index.\n * We supposed that the searched post (an answer) is at index 0 from the response body\n * @param {object} res - response from api\n * @param {object} index - index of a post we want in the array of posts (answers)\n * @returns {object}\n */\nfunction getPostAt(res, index=2){\n    return getBodyRes(res)[0].post[index]\n}\n\n/** @function\n * @name getUserActivities\n * Get user activities from a response.\n * @param {object} res - response from api\n * @returns {object}\n */\nfunction getUserActivities(res){\n    return getBodyRes(res).user.activities\n}\n//endregion\n\n//region DB requests\n/** @function\n * @name getAllPostReq\n * Get a response from DB that get all post.\n * @returns {object}\n */\nasync function getAllPostReq(){\n    return await request.get(url + 'post?search=[]')\n}\n\n/** @function\n * @name requestPostVote\n * Post a request to DB to add a like or a dislike to a post\n * @param {object} user - user that add a like\n * @param {object} post - post receiving the like\n * @param {object} voteValue - value of the vote; 1 to like, -1 to dislike\n * @returns {object}\n */\nasync function requestPostVote(user, post, voteValue ){\n    //console.log(user.body)\n    return await request.post(url + 'post-vote')\n        .set('Authorization', 'Bearer ' + user.body.token)\n        .send({vote:voteValue, idPost:getBodyRes(post).post.post[0]._id})\n}\n//endregion\n\n\n/** @function\n * @name prepareReqWithToken\n * Prepare a request on a defined url that need a token authorization\n * @param {object} user - user's data from a response\n * @param {object} completeUrl - the target url\n * @returns {*}\n */\nfunction prepareReqWithToken(user, completeUrl){\n    return request.post(completeUrl)\n        .set('Authorization', 'Bearer ' + user.body.token)\n}\n//endregion\n\nmodule.exports =\n    {expectExcept, expectedResponseOnUserUpsert, getBodyRes, expectedStatus, getPostAt, getUserActivities,\n     getAllPostReq, requestPostVote ,prepareReqWithToken}\n",
    "static": true,
    "longname": "/Users/gwenael/Documents/cours/L2/decembre_projWeb_makeMeDev/MakeMeDev/Test/config/testHelper.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 167,
    "kind": "variable",
    "name": "request",
    "memberof": "MakeMeDev/Test/config/testHelper.js",
    "static": true,
    "longname": "MakeMeDev/Test/config/testHelper.js~request",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Test/config/testHelper.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 168,
    "kind": "function",
    "name": "expectExcept",
    "memberof": "MakeMeDev/Test/config/testHelper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "MakeMeDev/Test/config/testHelper.js~expectExcept",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Test/config/testHelper.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "resKeys",
        "description": "an array containing keys from the response"
      },
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "expectedKeys",
        "description": "an array containing expected keys (if adding username, we should find this field)"
      },
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "exceptKeys",
        "description": "an array with exception keys, that we don't wan't to check"
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 169,
    "kind": "function",
    "name": "expectedResponseOnUserUpsert",
    "memberof": "MakeMeDev/Test/config/testHelper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "MakeMeDev/Test/config/testHelper.js~expectedResponseOnUserUpsert",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Test/config/testHelper.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 25,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "response",
        "description": "an object containing response's data"
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 170,
    "kind": "function",
    "name": "expectedStatus",
    "memberof": "MakeMeDev/Test/config/testHelper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "MakeMeDev/Test/config/testHelper.js~expectedStatus",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Test/config/testHelper.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 36,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "response",
        "description": "an object containing response's data"
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 171,
    "kind": "function",
    "name": "getBodyRes",
    "memberof": "MakeMeDev/Test/config/testHelper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "MakeMeDev/Test/config/testHelper.js~getBodyRes",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Test/config/testHelper.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 51,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{SrvPoller.success|{post, user, token}|string|boolean|Event|null}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "response",
        "description": "response from api"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SrvPoller.success",
        "{post, user, token}",
        "string",
        "boolean",
        "Event",
        "null"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 172,
    "kind": "function",
    "name": "getPostAt",
    "memberof": "MakeMeDev/Test/config/testHelper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "MakeMeDev/Test/config/testHelper.js~getPostAt",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Test/config/testHelper.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 67,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{object}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "response from api"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": "index of a post we want in the array of posts (answers)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 173,
    "kind": "function",
    "name": "getUserActivities",
    "memberof": "MakeMeDev/Test/config/testHelper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "MakeMeDev/Test/config/testHelper.js~getUserActivities",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Test/config/testHelper.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 77,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{object}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "response from api"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 174,
    "kind": "function",
    "name": "getAllPostReq",
    "memberof": "MakeMeDev/Test/config/testHelper.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "MakeMeDev/Test/config/testHelper.js~getAllPostReq",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Test/config/testHelper.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 88,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{object}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": ""
    },
    "params": [],
    "ignore": true
  },
  {
    "__docId__": 175,
    "kind": "function",
    "name": "requestPostVote",
    "memberof": "MakeMeDev/Test/config/testHelper.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "MakeMeDev/Test/config/testHelper.js~requestPostVote",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Test/config/testHelper.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 100,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{object}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "user",
        "description": "user that add a like"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "post",
        "description": "post receiving the like"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "voteValue",
        "description": "value of the vote; 1 to like, -1 to dislike"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 176,
    "kind": "function",
    "name": "prepareReqWithToken",
    "memberof": "MakeMeDev/Test/config/testHelper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "MakeMeDev/Test/config/testHelper.js~prepareReqWithToken",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Test/config/testHelper.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 116,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{*}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "user",
        "description": "user's data from a response"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "completeUrl",
        "description": "the target url"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 177,
    "kind": "file",
    "name": "MakeMeDev/Test/models.js",
    "content": "exports.post = {\n    \"post\": {\n        \"name\": \"test\",\n        \"tag\" : ['test'],\n        \"params\" : [\n            {\n                \"name\" : \"num\",\n                \"type\" : \"int\",\n                \"description\" : \"num to multiply\",\n                \"defaultValue\" : \"10\"\n            }\n        ],\n        \"returns\" : [\n            {\n                \"name\" : \"result\",\n                \"type\" : \"int\",\n                \"description\" : \"result value\"\n                },\n                {\n                    \"name\" : \"result\",\n                    \"type\" : \"array\",\n                    \"description\" : \"result value\"\n                }\n            ],\n        \"post\" : [\n            {\n                \"author\" : {\n                    \"userId\": \"5fd688dec05dfb4a8eb64d1f\",\n                    \"creationDate\" : \"2020-10-10\",\n                    \"pseudo\" : \"test\",\n                    \"avatar\" : \"test\"\n                },\n                \"description\" : \"a function to multiply by 2 a num and returning the result\",\n                \"like\" : 2,\n                \"dislike\" : 2,\n                \"totalLike\" : 0,\n                \"function\" : \"multiply2x(num){return num*2}\",\n                \"commentary\" : [\n                    {\n                        \"author\" : {\n                            \"userId\": \"5fd688dec05dfb4a8eb64d1f\",\n                            \"creationDate\" : \"2020-10-10\",\n                            \"pseudo\" : \"test\",\n                            \"avatar\" : \"test\"\n                        },\n                        \"commentary\" : \"i really needed this, thx\"\n                    }\n                ]\n            },\n            {\n                \"author\" : {\n                    \"userId\": \"5fd688dec05dfb4a8eb64d1f\",\n                    \"creationDate\" : \"2020-10-10\",\n                    \"pseudo\" : \"test\",\n                    \"avatar\" : \"test\"\n                },\n                \"description\" : \"simplify your function\",\n                \"like\" : 4,\n                \"dislike\" : 0,\n                \"totalLike\" : 4,\n                \"function\" : \"multiply2x(num){return num+num}\",\n                \"commentary\" : [\n                    {\n                        \"author\" : {\n                            \"userId\": \"5fd688dec05dfb4a8eb64d1f\",\n                            \"creationDate\" : \"2020-10-10\",\n                            \"pseudo\" : \"test\",\n                            \"avatar\" : \"test\"\n                        },\n                        \"commentary\" : \"i really needed this, thx\"\n                    }\n                ]\n            },\n            {\n                \"author\" : {\n                    \"userId\": \"5fd688dec05dfb4a8eb64d1f\",\n                    \"creationDate\" : \"2020-10-10\",\n                    \"pseudo\" : \"test\",\n                    \"avatar\" : \"test\"\n                },\n                \"description\" : \"other function\",\n                \"like\" : 4,\n                \"dislike\" : 1,\n                \"totalLike\" : 4,\n                \"function\" : \"multiplyPow2(num){return num**2}\",\n                \"commentary\" : [\n                    {\n                        \"author\" : {\n                            \"userId\": \"5fd688dec05dfb4a8eb64d1f\",\n                            \"creationDate\" : \"2020-10-10\",\n                            \"pseudo\" : \"test\",\n                            \"avatar\" : \"test\"\n                        },\n                        \"commentary\" : \"i really needed this, thx\"\n                    }\n                ]\n            }\n        ]\n    }\n}\n\nexports.responsePost = {\n    \"description\": \"better solution\",\n    \"function\": \"multiply2x2x2x2x2(num){return num*2}\"\n}\n\nexports.commentaryPost = {\n    \"commentary\" : \"first\"\n}\n\nexports.user = {\n    user: {\n        pseudo: 'userName',\n            mail: 'useremail@email.com',\n            password: '123123',\n    }\n}\n",
    "static": true,
    "longname": "/Users/gwenael/Documents/cours/L2/decembre_projWeb_makeMeDev/MakeMeDev/Test/models.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 178,
    "kind": "file",
    "name": "MakeMeDev/Test/post.test.js",
    "content": "const { request, url} = require(\"./config/launcher\")\nconst { post, responsePost, commentaryPost, user} = require(\"./models\");\nconst { expectedResponseOnUserUpsert, expectExcept, getBodyRes, expectedStatus,\n        getPostAt, getUserActivities, getAllPostReq, requestPostVote,\n        prepareReqWithToken} = require(\"./config/testHelper\")\nconst post0 = post.post.post[0]\n\n\ndescribe('Post', () => {\n    let newUser;\n    let newPost;\n\n    beforeEach(async () => {\n        newUser = await request.post(url + \"users\").send(user)\n        newPost = await prepareReqWithToken(newUser, url + \"post\").send(post)\n    })\n\n    //region create post and search posts\n    it('should be able to create a post', async () => {\n        const response = newPost;\n        expect(Object.values(response.body).length).toEqual(2) //token & success\n        expectedResponseOnUserUpsert(response)\n        expectExcept(Object.keys(getBodyRes(response).user), Object.keys(user.user), [\"password\"])\n        expectExcept(Object.keys(getBodyRes(response).post), Object.keys(post.post))\n    });\n\n    it('should be able to search a post', async () => {\n        const response = await request.get(url + 'post?search=[test](int){int, ?} \"function to multiply\" #test#')\n        expect(typeof getBodyRes(response)).toBe(\"object\")\n        expect(getBodyRes(response)[0].name).toBe(\"test\")\n        expectedStatus(response)\n    });\n    //endregion\n\n    //region vote (like or dislike)\n    it('should be able to like a post if NEVER vote', async () => {\n        const response = await requestPostVote( newUser, newPost, 1)\n        const postCheck = await getAllPostReq()\n        expectedStatus(response)\n\n        expect(getPostAt(postCheck).like).toBe(post0.like+1)\n        expect(getUserActivities(response).like).toContain(getBodyRes(newPost).post.post[0]._id)\n    });\n\n    it('should be able to dislike a post if NEVER vote', async () => {\n        const response = await requestPostVote( newUser, newPost, -1)\n        const postCheck = await getAllPostReq()\n        expectedStatus(response)\n        expect(getPostAt(postCheck).dislike).toBe(post0.dislike+1)\n        expect(getUserActivities(response).dislike).toContain(getBodyRes(newPost).post.post[0]._id)\n    });\n\n\n    it('should be able to update a vote into post if ALREADY vote same vote', async () => {\n        const response1 = await requestPostVote( newUser, newPost, 1)\n        const postCheck1 = await getAllPostReq()\n        const response2 = await requestPostVote( response1, newPost, 1)\n        const postCheck2 = await getAllPostReq()\n\n        expect(response1.status).toBe(200);\n        expect(response2.status).toBe(404);\n        expect(getPostAt(postCheck1).like).toBe(post0.like+1)\n        expect(getPostAt(postCheck2).like).toBe(post0.like+1)\n        expect(getUserActivities(response1).like).toContain(getBodyRes(newPost).post.post[0]._id)\n        expect(response2.body.error).toBe(\"update vote failed\")\n    });\n\n    it('should be able to dislike a post', async () => {\n        const response1 = await requestPostVote( newUser, newPost, 1)\n        const postCheck1 = await getAllPostReq()\n        const response2 = await requestPostVote( response1, newPost, -1)\n        const postCheck2 = await getAllPostReq()\n\n\n        expect(response1.status).toBe(200);\n        expect(response2.status).toBe(200);\n        expect(getPostAt(postCheck1).like).toBe(post0.like+1)\n        expect(getPostAt(postCheck1).dislike).toBe(post0.dislike)\n        expect(getPostAt(postCheck2).like).toBe(post0.like)\n        expect(getPostAt(postCheck2).dislike).toBe(post0.dislike+1)\n        expect(getUserActivities(response1).like).toContain(getBodyRes(newPost).post.post[0]._id)\n        expect(getUserActivities(response1).dislike.length).toBe(0)\n        expect(getUserActivities(response2).dislike).toContain(getBodyRes(newPost).post.post[0]._id)\n        expect(getUserActivities(response2).like.length).toBe(0)\n    });\n    //endregion\n\n    //region add a post (answer) in a created post\n    it('should be able to send response to a post', async () => {\n        const response = await prepareReqWithToken(newUser, url + \"post-add-response\")\n            .send({responsePost: responsePost, idPost:getBodyRes(newPost).post._id })\n        const postCheck = await getAllPostReq()\n        expect(getPostAt(postCheck, 3).description).toBe(\"better solution\");\n        expect(response.status).toBe(200);\n        expect(getUserActivities(response).response).toContain(getPostAt(postCheck, 3)._id)\n    });\n    //endregion\n\n    //region add commentary to a post\n    it('should be able to send a commentary to a post', async () => {\n        const response = await prepareReqWithToken(newUser, url + \"post-add-commentary\")\n            .send({commentaryPost: commentaryPost, idPost:getBodyRes(newPost).post.post[0]._id })\n        const postCheck = await getAllPostReq()\n        expect(response.status).toBe(200);\n        expect(getPostAt(postCheck).commentary[1].commentary).toBe(\"first\");\n        expect(getUserActivities(response).commentary).toContain(getPostAt(postCheck).commentary[1]._id)\n    });\n\n    it('should be able to send 2 commentary with 2 different timestamp', async () => {\n        const response1 = await prepareReqWithToken(newUser, url + \"post-add-commentary\")\n            .send({commentaryPost: commentaryPost, idPost:getBodyRes(newPost).post.post[0]._id })\n        const postCheck = await getAllPostReq()\n        const response2 = await prepareReqWithToken(response1, url + \"post-add-commentary\")\n            .send({commentaryPost: commentaryPost, idPost:getBodyRes(newPost).post.post[0]._id })\n        const postCheck2 = await getAllPostReq()\n        let comment = getPostAt(postCheck).commentary\n        let comment2 = getPostAt(postCheck2).commentary\n\n        expect(response1.status).toBe(200);\n        expect(getPostAt(postCheck).commentary[1].commentary).toBe(\"first\");\n        expect(getUserActivities(response1).commentary).toContain(getPostAt(postCheck).commentary[1]._id)\n        expect(comment[comment.length-1].date< comment2[comment2.length-1].date).toBe(true)\n    });\n    //endregion\n\n});\n",
    "static": true,
    "longname": "/Users/gwenael/Documents/cours/L2/decembre_projWeb_makeMeDev/MakeMeDev/Test/post.test.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 179,
    "kind": "variable",
    "name": "request",
    "memberof": "MakeMeDev/Test/post.test.js",
    "static": true,
    "longname": "MakeMeDev/Test/post.test.js~request",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Test/post.test.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 180,
    "kind": "variable",
    "name": "post",
    "memberof": "MakeMeDev/Test/post.test.js",
    "static": true,
    "longname": "MakeMeDev/Test/post.test.js~post",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Test/post.test.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 181,
    "kind": "variable",
    "name": "expectedResponseOnUserUpsert",
    "memberof": "MakeMeDev/Test/post.test.js",
    "static": true,
    "longname": "MakeMeDev/Test/post.test.js~expectedResponseOnUserUpsert",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Test/post.test.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 182,
    "kind": "variable",
    "name": "post0",
    "memberof": "MakeMeDev/Test/post.test.js",
    "static": true,
    "longname": "MakeMeDev/Test/post.test.js~post0",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Test/post.test.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 183,
    "kind": "file",
    "name": "MakeMeDev/Test/user.test.js",
    "content": "const {request, url} = require(\"./config/launcher\")\nconst { user } = require(\"./models\");\nconst { prepareReqWithToken} = require(\"./config/testHelper\")\n\ndescribe('User', () => {\n    let newUser;\n    beforeEach(async () => {\n        newUser = await request.post(url + \"users\").send(user)\n    })\n\n    it('should be able to create user', async () => {\n        const response = newUser;\n        expect(response.status).toBe(200);\n        expect(Object.values(response.body).length).toEqual(2)\n    });\n\n    it('should be able to get user', async () => {\n        const userName = \"userName\"\n        const response = await request.get(url + \"users?login=\" + userName + \"&password=123123\")\n        expect(response.status).toBe(200);\n        expect(response.body.success.pseudo).toBe(userName)\n    });\n\n    it('should not be able to get user', async () => {\n        const userName = \"userName\"\n        const response = await request.get(url + \"users?login=\" + userName + \"&password=hi\")\n        expect(response.status).toBe(404);\n    });\n\n    it('should be able to update user', async () => {\n        const user = await request.get(url + \"users?login=userName&password=123123\")\n        const userData = {\n            user: {\n                id: user.body.success._id,\n                pseudo: 'test',\n                mail: 'test@test.com',\n                avatar: 'test'\n            }\n        }\n        const response = await prepareReqWithToken(user,url + \"update-users\" )\n            .send(userData);\n        expect(response.status).toBe(200)\n        expect(response.body.success.pseudo).toBe(userData.user.pseudo)\n        expect(response.body.success.mail).toBe(userData.user.mail)\n        expect(response.body.success.avatar).toBe(userData.user.avatar)\n    });\n\n\n    it('should not be able to update user without crash', async () => {\n        const user = await request.get(url + \"users?login=userName&password=123123\")\n        const userData = {\n            user: {\n                id: \"1\",\n                pseudo: 'test',\n                mail: 'test@test.com',\n                avatar: 'test'\n            }\n        }\n        const response = await prepareReqWithToken(user,url + \"update-users\" )\n            .send(userData);\n        expect(response.status).toBe(404)\n    });\n\n});\n",
    "static": true,
    "longname": "/Users/gwenael/Documents/cours/L2/decembre_projWeb_makeMeDev/MakeMeDev/Test/user.test.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 184,
    "kind": "variable",
    "name": "request",
    "memberof": "MakeMeDev/Test/user.test.js",
    "static": true,
    "longname": "MakeMeDev/Test/user.test.js~request",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Test/user.test.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 185,
    "kind": "variable",
    "name": "user",
    "memberof": "MakeMeDev/Test/user.test.js",
    "static": true,
    "longname": "MakeMeDev/Test/user.test.js~user",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Test/user.test.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 186,
    "kind": "variable",
    "name": "prepareReqWithToken",
    "memberof": "MakeMeDev/Test/user.test.js",
    "static": true,
    "longname": "MakeMeDev/Test/user.test.js~prepareReqWithToken",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Test/user.test.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 187,
    "kind": "file",
    "name": "MakeMeDev/Tools/Common/countOccurence.js",
    "content": "/** @function\n * @name countOccurrencesFromArray\n * Count occurrence of string in an array and return an object\n * with each string as key and occurrence as value\n * @param {array} arr - The array to analyse\n * @returns {object} - an object containing strings occurrences\n */\nconst countOccurrencesFromArray = arr => arr.reduce((prev, curr) => (prev[curr] = ++prev[curr] || 1, prev), {});\n\nmodule.exports = {countOccurrencesFromArray}\n",
    "static": true,
    "longname": "/Users/gwenael/Documents/cours/L2/decembre_projWeb_makeMeDev/MakeMeDev/Tools/Common/countOccurence.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 188,
    "kind": "function",
    "name": "countOccurrencesFromArray",
    "memberof": "MakeMeDev/Tools/Common/countOccurence.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "MakeMeDev/Tools/Common/countOccurence.js~countOccurrencesFromArray",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Tools/Common/countOccurence.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{object} - an object containing strings occurrences"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "arr",
        "description": "The array to analyse"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "an object containing strings occurrences"
    },
    "ignore": true
  },
  {
    "__docId__": 189,
    "kind": "file",
    "name": "MakeMeDev/Tools/Common/stringOperation.js",
    "content": "/** @function\n * @name getStringDelimitedArea\n * Get a string in a delimited area defined by first and last delimiter\n * If the second delimiter isn't found in string, return a string from first delimiter to end\n * @param {string} str - string to analyse\n * @param {string} firstDelimiter - first delimiter used  to get the result\n * @param {string} lastDelimiter - last delimiter used to get the result\n * @returns {string|null}\n */\nfunction getStringDelimitedArea(str, firstDelimiter, lastDelimiter) {\n    return (str.includes(firstDelimiter) && str.includes(lastDelimiter)) ?\n        str.substring(str.lastIndexOf(firstDelimiter) + 1, str.lastIndexOf(lastDelimiter)) : null;\n}\n\n/** @function\n * @name getSearchValue\n * Get a string in a delimited area defined by a delimiter\n * If there is only one delimiter, return null\n * @param {string} str - string to analyse\n * @param {string} delimiter - delimiter used to get the result\n * @returns {string|null}\n */\nfunction getSearchValue(str, delimiter){\n    let value = []\n    let countCharacter = 0;\n    str.split(\"\").map((searchCharacter, index) => {\n        if (searchCharacter === delimiter) {\n            countCharacter ++\n            value.push(index)\n        }\n    })\n    return countCharacter === 2 ? str.substring(value[0] + 1, value[1]) : null\n}\n\n/** @function\n * @name filterDelSpaces\n * delete all spaces in a string\n * @param {string} string - string that won't have spaces anymore\n * @returns {*|void}\n */\nfunction filterDelSpaces(string){\n    return string.replace(/\\s/g, '')\n}\n\nmodule.exports = {getStringDelimitedArea, getSearchValue, filterDelSpaces}\n",
    "static": true,
    "longname": "/Users/gwenael/Documents/cours/L2/decembre_projWeb_makeMeDev/MakeMeDev/Tools/Common/stringOperation.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 190,
    "kind": "function",
    "name": "getStringDelimitedArea",
    "memberof": "MakeMeDev/Tools/Common/stringOperation.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "MakeMeDev/Tools/Common/stringOperation.js~getStringDelimitedArea",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Tools/Common/stringOperation.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{string|null}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": "string to analyse"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "firstDelimiter",
        "description": "first delimiter used  to get the result"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "lastDelimiter",
        "description": "last delimiter used to get the result"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string",
        "null"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 191,
    "kind": "function",
    "name": "getSearchValue",
    "memberof": "MakeMeDev/Tools/Common/stringOperation.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "MakeMeDev/Tools/Common/stringOperation.js~getSearchValue",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Tools/Common/stringOperation.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{string|null}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": "string to analyse"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "delimiter",
        "description": "delimiter used to get the result"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string",
        "null"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 192,
    "kind": "function",
    "name": "filterDelSpaces",
    "memberof": "MakeMeDev/Tools/Common/stringOperation.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "MakeMeDev/Tools/Common/stringOperation.js~filterDelSpaces",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Tools/Common/stringOperation.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 41,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{*|void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "string",
        "description": "string that won't have spaces anymore"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*",
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 193,
    "kind": "file",
    "name": "MakeMeDev/Tools/Common/undefinedControl.js",
    "content": "function isDefinedAndNotNull(value){\n    return value !==null && value !==undefined\n}\n\nfunction isUndefinedOrNull(value){\n    return value ===null || value ===undefined\n}\n\nmodule.exports = {isDefinedAndNotNull, isUndefinedOrNull}\n",
    "static": true,
    "longname": "/Users/gwenael/Documents/cours/L2/decembre_projWeb_makeMeDev/MakeMeDev/Tools/Common/undefinedControl.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 194,
    "kind": "function",
    "name": "isDefinedAndNotNull",
    "memberof": "MakeMeDev/Tools/Common/undefinedControl.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "MakeMeDev/Tools/Common/undefinedControl.js~isDefinedAndNotNull",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Tools/Common/undefinedControl.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 195,
    "kind": "function",
    "name": "isUndefinedOrNull",
    "memberof": "MakeMeDev/Tools/Common/undefinedControl.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "MakeMeDev/Tools/Common/undefinedControl.js~isUndefinedOrNull",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Tools/Common/undefinedControl.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 196,
    "kind": "file",
    "name": "MakeMeDev/Tools/Controller/controllerHelper.js",
    "content": "/** @function\n * @name emptyRequest\n * Check if our request data isn't empty before continuing other actions\n * @param {object} reqData - data from our request to check\n * @returns {{code: number, body: {error: string}}}\n */\nfunction emptyRequest (reqData){\n    if (reqData === undefined || Object.keys(reqData).length === 0 && reqData.constructor === Object) {\n        return {code: 404, body: {error: \"Requete vide\"}}\n    }\n}\n\nmodule.exports = {emptyRequest}\n",
    "static": true,
    "longname": "/Users/gwenael/Documents/cours/L2/decembre_projWeb_makeMeDev/MakeMeDev/Tools/Controller/controllerHelper.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 197,
    "kind": "function",
    "name": "emptyRequest",
    "memberof": "MakeMeDev/Tools/Controller/controllerHelper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "MakeMeDev/Tools/Controller/controllerHelper.js~emptyRequest",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Tools/Controller/controllerHelper.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{{code: number, body: {error: string}}}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "reqData",
        "description": "data from our request to check"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{code: number, body: {error: string}}"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 198,
    "kind": "file",
    "name": "MakeMeDev/Tools/DB/database.js",
    "content": "const mongoose = require('mongoose');\nrequire('dotenv').config();\n\n\nfunction connect() {\n    if (mongoose.connection.readyState === 0) {\n        process.env.NODE_ENV === 'test' ? configTest() : configMongo()\n        const db = mongoose.connection;\n        db.on('error', console.error.bind(console, 'Erreur lors de la connexion'));\n        db.once('open', function (){\n            console.log(\"Connexion à la base OK\");\n        });\n    }\n}\n\nconst configTest = () => {\n    mongoose.connect(global.__DB_URL__,\n        {\n            useUnifiedTopology: true,\n            useNewUrlParser: true,\n            useCreateIndex: true,\n            useFindAndModify: false\n        })\n}\n\nconst configMongo = () => {\n    mongoose.connect(process.env.URL_MONGO,\n    {\n        useUnifiedTopology: true,\n        useNewUrlParser: true,\n        useCreateIndex: true,\n        useFindAndModify: false\n    })}\n\nfunction truncate()  {\n    if (mongoose.connection.readyState !== 0) {\n        const { collections } = mongoose.connection;\n\n        const promises = Object.keys(collections).map(collection =>\n            mongoose.connection.collection(collection).deleteMany({})\n        );\n\n         Promise.all(promises);\n    }\n}\n\nfunction disconnect() {\n    if (mongoose.connection.readyState !== 0) {\n        mongoose.disconnect();\n    }\n}\n\nmodule.exports = {\n    connect,\n    truncate,\n    disconnect,\n};\n",
    "static": true,
    "longname": "/Users/gwenael/Documents/cours/L2/decembre_projWeb_makeMeDev/MakeMeDev/Tools/DB/database.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 199,
    "kind": "variable",
    "name": "mongoose",
    "memberof": "MakeMeDev/Tools/DB/database.js",
    "static": true,
    "longname": "MakeMeDev/Tools/DB/database.js~mongoose",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Tools/DB/database.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 200,
    "kind": "function",
    "name": "connect",
    "memberof": "MakeMeDev/Tools/DB/database.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "MakeMeDev/Tools/DB/database.js~connect",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Tools/DB/database.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 201,
    "kind": "function",
    "name": "configTest",
    "memberof": "MakeMeDev/Tools/DB/database.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "MakeMeDev/Tools/DB/database.js~configTest",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Tools/DB/database.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 202,
    "kind": "function",
    "name": "configMongo",
    "memberof": "MakeMeDev/Tools/DB/database.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "MakeMeDev/Tools/DB/database.js~configMongo",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Tools/DB/database.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 203,
    "kind": "function",
    "name": "truncate",
    "memberof": "MakeMeDev/Tools/DB/database.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "MakeMeDev/Tools/DB/database.js~truncate",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Tools/DB/database.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 204,
    "kind": "function",
    "name": "disconnect",
    "memberof": "MakeMeDev/Tools/DB/database.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "MakeMeDev/Tools/DB/database.js~disconnect",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Tools/DB/database.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 205,
    "kind": "file",
    "name": "MakeMeDev/Tools/DB/requestOperator.js",
    "content": "\n/** @function\n * @name setUpdateValue\n * Define all keys to set\n * @param {object} data - data that will be set\n * @param {array} keysArray - all keys to update\n * @returns {{$set: {}}}\n */\nfunction setUpdateValue(data, keysArray) {\n    let updateValue = {}\n    for (let key of keysArray){\n        updateValue[key] = data[key]\n    }\n    return {$set: updateValue}\n}\n\nmodule.exports = {setUpdateValue}\n",
    "static": true,
    "longname": "/Users/gwenael/Documents/cours/L2/decembre_projWeb_makeMeDev/MakeMeDev/Tools/DB/requestOperator.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 206,
    "kind": "function",
    "name": "setUpdateValue",
    "memberof": "MakeMeDev/Tools/DB/requestOperator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "MakeMeDev/Tools/DB/requestOperator.js~setUpdateValue",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Tools/DB/requestOperator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{{$set: {}}}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "data that will be set"
      },
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "keysArray",
        "description": "all keys to update"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{$set: {}}"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 207,
    "kind": "file",
    "name": "MakeMeDev/Tools/Services/responseHandler.js",
    "content": "\n/** @function\n * @name getHandler\n * Handle HTTP status code and body content to return in a response to Front team\n * For GET request\n * @param {{success: string, object}|{error: string}} data - object with success or error data\n * @param {string} notFoundMsg - message displayed if we got a success without data\n * @returns {{code: number, body: {error: string}}|{code: number, body: {error: *}}|{code: number, body: *}}\n */\nfunction getHandler(data, notFoundMsg=\"error\"){\n    if (data[\"success\"]===null) {\n        return {code: 404, body: {error: notFoundMsg}}\n    } else if (data[\"success\"]) {\n        return {code: 200, body: data}\n    } else if (data[\"error\"]) {\n        return {code: 404, body: data}\n    } else {\n        return {code: 404, body: {error: \"erreur en base de donnée\"}}\n    }\n}\n\n\n/** @function\n * @name getHandlerForUserPost\n */\nfunction getHandlerForUserPost(user, post, notFoundMsg=\"error\"){\n    if (user[\"success\"] && post[\"success\"]){\n        return {code: 200, body: {success:{ user:user.success, post:post.success}, token:user.token}}\n    }\n    else if (user[\"success\"]===null || user[\"success\"]===null) {\n        return {code: 404, body: {error: notFoundMsg}}\n    }\n    else if (user[\"error\"] || post[\"error\"]) {\n        return {code: 404, body: user[\"error\"] ? user : post }\n    } else {\n        return {code: 404, body: {error: \"erreur en base de donnée\"}}\n    }\n}\n\nmodule.exports = {getHandler, getHandlerForUserPost}\n",
    "static": true,
    "longname": "/Users/gwenael/Documents/cours/L2/decembre_projWeb_makeMeDev/MakeMeDev/Tools/Services/responseHandler.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 208,
    "kind": "function",
    "name": "getHandler",
    "memberof": "MakeMeDev/Tools/Services/responseHandler.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "MakeMeDev/Tools/Services/responseHandler.js~getHandler",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Tools/Services/responseHandler.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{{code: number, body: {error: string}}|{code: number, body: {error: *}}|{code: number, body: *}}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "{success: string, object}|{error: string}"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "object with success or error data"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "notFoundMsg",
        "description": "message displayed if we got a success without data"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{code: number, body: {error: string}}|{code: number, body: {error: *}}|{code: number, body: *}"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 209,
    "kind": "function",
    "name": "getHandlerForUserPost",
    "memberof": "MakeMeDev/Tools/Services/responseHandler.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "MakeMeDev/Tools/Services/responseHandler.js~getHandlerForUserPost",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Tools/Services/responseHandler.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 26,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "user",
        "types": [
          "*"
        ]
      },
      {
        "name": "post",
        "types": [
          "*"
        ]
      },
      {
        "name": "notFoundMsg",
        "optional": true,
        "types": [
          "string"
        ],
        "defaultRaw": "error",
        "defaultValue": "error"
      }
    ],
    "return": {
      "types": [
        "{\"code\": number, \"body\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 210,
    "kind": "file",
    "name": "MakeMeDev/Tools/token.js",
    "content": "const jwt = require(\"jsonwebtoken\");\n\n/** @function\n * @name generateAccessToken\n * @param {object} userData - user's data\n * @returns {undefined|*}\n */\nfunction generateAccessToken(userData) {\n    if (userData[\"success\"]!==null && userData[\"success\"]!==undefined) {\n        return userData[\"token\"] = jwt.sign(userData, process.env.TOKEN_SECRET, {expiresIn: '3600s'});\n    }\n}\n\nmodule.exports  = {generateAccessToken}\n",
    "static": true,
    "longname": "/Users/gwenael/Documents/cours/L2/decembre_projWeb_makeMeDev/MakeMeDev/Tools/token.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 211,
    "kind": "variable",
    "name": "jwt",
    "memberof": "MakeMeDev/Tools/token.js",
    "static": true,
    "longname": "MakeMeDev/Tools/token.js~jwt",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Tools/token.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 212,
    "kind": "function",
    "name": "generateAccessToken",
    "memberof": "MakeMeDev/Tools/token.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "MakeMeDev/Tools/token.js~generateAccessToken",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/Tools/token.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{undefined|*}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "userData",
        "description": "user's data"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "undefined",
        "*"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 213,
    "kind": "file",
    "name": "MakeMeDev/app.js",
    "content": "const express = require('express');\nconst bodyParser = require(\"body-parser\");\nconst cors = require(\"cors\");\nconst app = express();\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: false }));\n\n//Cors\napp.use(cors({ origin: true, credentials: true }));\nconst router = require(\"./router\");\nrouter(app);\n\nmodule.exports = {app}\n",
    "static": true,
    "longname": "/Users/gwenael/Documents/cours/L2/decembre_projWeb_makeMeDev/MakeMeDev/app.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 214,
    "kind": "variable",
    "name": "express",
    "memberof": "MakeMeDev/app.js",
    "static": true,
    "longname": "MakeMeDev/app.js~express",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/app.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 215,
    "kind": "variable",
    "name": "bodyParser",
    "memberof": "MakeMeDev/app.js",
    "static": true,
    "longname": "MakeMeDev/app.js~bodyParser",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/app.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 216,
    "kind": "variable",
    "name": "cors",
    "memberof": "MakeMeDev/app.js",
    "static": true,
    "longname": "MakeMeDev/app.js~cors",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/app.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 217,
    "kind": "variable",
    "name": "app",
    "memberof": "MakeMeDev/app.js",
    "static": true,
    "longname": "MakeMeDev/app.js~app",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/app.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 218,
    "kind": "variable",
    "name": "router",
    "memberof": "MakeMeDev/app.js",
    "static": true,
    "longname": "MakeMeDev/app.js~router",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/app.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 219,
    "kind": "file",
    "name": "MakeMeDev/index.js",
    "content": "// region Prepare to include the server code into our web_server\n//region MongoDB connection\nconst database = require(\"./Tools/DB/database\")\ndatabase.connect()\n//endregion\n\nconst http = require(\"http\");\nconst {app} = require(\"./app\")\n\nconst server = http.createServer(app);\nrequire('dotenv').config();\n\n// endregion\n\n\nconst PORT = process.env.PORT || 4021;\nserver.listen(PORT, () => {\n    console.log(\"started \" + PORT);\n});\n",
    "static": true,
    "longname": "/Users/gwenael/Documents/cours/L2/decembre_projWeb_makeMeDev/MakeMeDev/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 220,
    "kind": "variable",
    "name": "database",
    "memberof": "MakeMeDev/index.js",
    "static": true,
    "longname": "MakeMeDev/index.js~database",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 221,
    "kind": "variable",
    "name": "http",
    "memberof": "MakeMeDev/index.js",
    "static": true,
    "longname": "MakeMeDev/index.js~http",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 222,
    "kind": "variable",
    "name": "app",
    "memberof": "MakeMeDev/index.js",
    "static": true,
    "longname": "MakeMeDev/index.js~app",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 223,
    "kind": "variable",
    "name": "server",
    "memberof": "MakeMeDev/index.js",
    "static": true,
    "longname": "MakeMeDev/index.js~server",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 224,
    "kind": "variable",
    "name": "PORT",
    "memberof": "MakeMeDev/index.js",
    "static": true,
    "longname": "MakeMeDev/index.js~PORT",
    "access": "public",
    "export": false,
    "importPath": "makemedev/MakeMeDev/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 225,
    "kind": "file",
    "name": "MakeMeDev/router.js",
    "content": "module.exports = (app) => {\n  require(\"./Routes/user\")(app);\n  require(\"./Routes/post\")(app);\n};\n",
    "static": true,
    "longname": "/Users/gwenael/Documents/cours/L2/decembre_projWeb_makeMeDev/MakeMeDev/router.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "kind": "index",
    "content": "\n# MakeMeDev\nProjet web de l'an 2020, MakeMeDev a pour but de permettre aux utilisateurs \nde poster et rechercher des functions produites par la communauté dev.\n\n-   Utilisateur connecté\n    - \nL'utilisateur pourra se créer un compte avec mail, mot de passe et pseudo.\nCela lui donnera alors le droit de poster des fonctions répondant à une problématique.\n\nCet utilisateur devra fournir :\n-   un nom de fonction\n-   décrire l'utilité de cette dernière\n-   définir ses différents arguments \n    -   type \n    -   nom \n    -   description\n    -   valeur par défaut\n-   définir la valeur de retour\n-   fournir des tags\n\nD'autres utilisateurs pourront proposer une amélioration de cette fonction.\nCe sera alors à la communauté de faire ressortir la solution optimal\nvia les likes et dislikes.\n\nTout ceci permettra aux autres utilisateurs de trouver la fonction correspondant\nà leur besoin.\n\n\n-   Utilisateur non connecté (visiteur)\n    - \n\nLes visiteurs non connecté pourront seulement consulter les posts, ils ne pourront \ndonc pas participer à la création et amélioration de fonctions.\n",
    "longname": "/Users/gwenael/Documents/cours/L2/decembre_projWeb_makeMeDev/MakeMeDev/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"makemedev\",\n  \"version\": \"1.0.0\",\n  \"description\": \"projet web 2020\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"start\": \"node index.js\",\n    \"dev\": \"nodemon index.js\",\n    \"test\": \"NODE_ENV=test jest --detectOpenHandles\"\n  },\n  \"jest\": {\n    \"verbose\": true,\n    \"globalSetup\": \"<rootDir>/Test/config/setup.js\",\n    \"globalTeardown\": \"<rootDir>/Test/config/teardown.js\",\n    \"setupFilesAfterEnv\": [\n      \"<rootDir>/Test/config/setupAfterEnv.js\"\n    ],\n    \"testEnvironment\": \"<rootDir>/Test/config/environment.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/Gwenael95/MakeMeDev.git\"\n  },\n  \"keywords\": [\n    \"function\",\n    \"maker\",\n    \"function\",\n    \"browser\"\n  ],\n  \"author\": \"makeMeDevTeam\",\n  \"license\": \"ISC\",\n  \"bugs\": {\n    \"url\": \"https://github.com/Gwenael95/MakeMeDev/issues\"\n  },\n  \"homepage\": \"https://github.com/Gwenael95/MakeMeDev#readme\",\n  \"dependencies\": {\n    \"@jest/globals\": \"^26.6.2\",\n    \"body-parser\": \"^1.19.0\",\n    \"dotenv\": \"^8.2.0\",\n    \"esdoc\": \"^1.1.0\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"express\": \"^4.17.1\",\n    \"jest-environment-node\": \"^26.6.2\",\n    \"jsonwebtoken\": \"^8.5.1\",\n    \"mongodb\": \"^3.6.3\",\n    \"mongoose\": \"^5.11.5\",\n    \"mongoose-unique-validator\": \"^2.0.3\",\n    \"password-hash\": \"^1.2.2\"\n  },\n  \"devDependencies\": {\n    \"cookies\": \"^0.8.0\",\n    \"cors\": \"^2.8.5\",\n    \"jest\": \"^26.6.3\",\n    \"mongodb-memory-server\": \"^6.9.2\",\n    \"supertest\": \"^6.0.1\"\n  }\n}\n",
    "longname": "/Users/gwenael/Documents/cours/L2/decembre_projWeb_makeMeDev/MakeMeDev/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]